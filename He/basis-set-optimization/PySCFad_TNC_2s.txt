#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:14:20 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1e-05                1
                                1e-06                1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1e-05, 1.0], [1e-06, 1.0]]]}
ecp = {}
CPU time:         1.36
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -6.01105707376407e-09  E_coul = 4.048055889342155e-16
init E= -6.01105666895848e-09
    CPU time for initialize scf      0.12 sec, wall time      0.17 sec
  mo_energy =
[-0.00689134]
E1 = -0.013782672382057904  E_coul = 0.0021281961972590456
cycle= 1 E= -0.0116544761847989  delta_E= -0.0117  |g|=    0  |ddm|=    2
    CPU time for cycle= 1      0.16 sec, wall time      0.21 sec
  mo_energy =
[-0.00476314]
E1 = -0.013782672382057904  E_coul = 0.0021281961972590456
cycle= 2 E= -0.0116544761847989  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.05 sec, wall time      0.06 sec
E1 = -0.013782672382057904  E_coul = 0.0021281961972590456
  mo_energy =
[-0.00476314]
E1 = -0.013782672382057904  E_coul = 0.0021281961972590456
Extra cycle  E= -0.0116544761847989  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.34 sec, wall time      0.44 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:14:21 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1e-05                1
                                1e-06                1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1e-05, 1.0], [1e-06, 1.0]]]}
ecp = {}
CPU time:         1.80
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -6.01105707376407e-09  E_coul = 4.048055889342155e-16
init E= -6.01105666895848e-09
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.00689134]
E1 = -0.013782672382057904  E_coul = 0.0021281961972590456
cycle= 1 E= -0.0116544761847989  delta_E= -0.0117  |g|=    0  |ddm|=    2
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
  mo_energy =
[-0.00476314]
E1 = -0.013782672382057904  E_coul = 0.0021281961972590456
cycle= 2 E= -0.0116544761847989  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -0.013782672382057904  E_coul = 0.0021281961972590456
  mo_energy =
[-0.00476314]
E1 = -0.013782672382057904  E_coul = 0.0021281961972590456
Extra cycle  E= -0.0116544761847989  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -0.013782672382057904  E_coul = 0.0021281961972590456
init E= -0.0116544761847989
    CPU time for initialize scf      0.26 sec, wall time      0.31 sec
  mo_energy =
[-0.00476314]
E1 = -0.013782672382057904  E_coul = 0.0021281961972590456
cycle= 1 E= -0.0116544761847989  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -0.013782672382057904  E_coul = 0.0021281961972590456
  mo_energy =
[-0.00476314]
E1 = -0.013782672382057904  E_coul = 0.0021281961972590456
Extra cycle  E= -0.0116544761847989  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.65 sec, wall time      0.70 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:14:24 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.00006999456e-05      1
                                1.01488472821e-06      1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.000069994560844e-05, 1.0], [1.0148847282131113e-06, 1.0]]]}
ecp = {}
CPU time:         5.06
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -6.025397106754628e-09  E_coul = 4.067559814842449e-16
init E= -6.02539669999865e-09
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.00690289]
E1 = -0.013805790226932764  E_coul = 0.0021354290146722646
cycle= 1 E= -0.0116703612122605  delta_E= -0.0117  |g|=    0  |ddm|=    2
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.00476747]
E1 = -0.013805790226932764  E_coul = 0.0021354290146722646
cycle= 2 E= -0.0116703612122605  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -0.013805790226932764  E_coul = 0.0021354290146722646
  mo_energy =
[-0.00476747]
E1 = -0.013805790226932764  E_coul = 0.0021354290146722646
Extra cycle  E= -0.0116703612122605  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:14:24 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.00006999456e-05      1
                                1.01488472821e-06      1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.000069994560844e-05, 1.0], [1.0148847282131113e-06, 1.0]]]}
ecp = {}
CPU time:         5.15
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -6.025397106754628e-09  E_coul = 4.067559814842449e-16
init E= -6.02539669999865e-09
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.00690289]
E1 = -0.013805790226932764  E_coul = 0.0021354290146722646
cycle= 1 E= -0.0116703612122605  delta_E= -0.0117  |g|=    0  |ddm|=    2
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.00476747]
E1 = -0.013805790226932764  E_coul = 0.0021354290146722646
cycle= 2 E= -0.0116703612122605  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -0.013805790226932764  E_coul = 0.0021354290146722646
  mo_energy =
[-0.00476747]
E1 = -0.013805790226932764  E_coul = 0.0021354290146722646
Extra cycle  E= -0.0116703612122605  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.05 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -0.013805790226932764  E_coul = 0.0021354290146722646
init E= -0.0116703612122605
    CPU time for initialize scf      0.04 sec, wall time      0.04 sec
  mo_energy =
[-0.00476747]
E1 = -0.013805790226932764  E_coul = 0.0021354290146722646
cycle= 1 E= -0.0116703612122605  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -0.013805790226932764  E_coul = 0.0021354290146722646
  mo_energy =
[-0.00476747]
E1 = -0.013805790226932764  E_coul = 0.0021354290146722646
Extra cycle  E= -0.0116703612122605  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.08 sec, wall time      0.08 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:14:26 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.00402211694e-05      1
                                1.85532528286e-06      1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.0040221169439866e-05, 1.0], [1.855325282860487e-06, 1.0]]]}
ecp = {}
CPU time:         6.76
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -6.856925828496157e-09  E_coul = 5.204626781103518e-16
init E= -6.85692530803348e-09
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.00743415]
E1 = -0.014868306007220732  E_coul = 0.00244711100599103
cycle= 1 E= -0.0124211950012297  delta_E= -0.0124  |g|=    0  |ddm|=    2
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.00498704]
E1 = -0.014868306007220732  E_coul = 0.00244711100599103
cycle= 2 E= -0.0124211950012297  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -0.014868306007220732  E_coul = 0.00244711100599103
  mo_energy =
[-0.00498704]
E1 = -0.014868306007220732  E_coul = 0.00244711100599103
Extra cycle  E= -0.0124211950012297  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:14:26 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.00402211694e-05      1
                                1.85532528286e-06      1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.0040221169439866e-05, 1.0], [1.855325282860487e-06, 1.0]]]}
ecp = {}
CPU time:         6.84
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -6.856925828496157e-09  E_coul = 5.204626781103518e-16
init E= -6.85692530803348e-09
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.00743415]
E1 = -0.014868306007220732  E_coul = 0.00244711100599103
cycle= 1 E= -0.0124211950012297  delta_E= -0.0124  |g|=    0  |ddm|=    2
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.00498704]
E1 = -0.014868306007220732  E_coul = 0.00244711100599103
cycle= 2 E= -0.0124211950012297  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -0.014868306007220732  E_coul = 0.00244711100599103
  mo_energy =
[-0.00498704]
E1 = -0.014868306007220732  E_coul = 0.00244711100599103
Extra cycle  E= -0.0124211950012297  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -0.014868306007220732  E_coul = 0.00244711100599103
init E= -0.0124211950012297
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.00498704]
E1 = -0.014868306007220732  E_coul = 0.00244711100599103
cycle= 1 E= -0.0124211950012297  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -0.014868306007220732  E_coul = 0.00244711100599103
  mo_energy =
[-0.00498704]
E1 = -0.014868306007220732  E_coul = 0.00244711100599103
Extra cycle  E= -0.0124211950012297  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:14:28 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.02413270166e-05      1
                                6.13195169716e-06      1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.0241327016639188e-05, 1.0], [6.131951697162923e-06, 1.0]]]}
ecp = {}
CPU time:         8.33
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -1.2295741599811102e-08  E_coul = 1.4640949404084538e-15
init E= -1.22957401357162e-08
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.00908224]
E1 = -0.018164490974085477  E_coul = 0.003195260337321048
cycle= 1 E= -0.0149692306367644  delta_E= -0.015  |g|=    0  |ddm|=    2
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
  mo_energy =
[-0.00588699]
E1 = -0.018164490974085477  E_coul = 0.003195260337321048
cycle= 2 E= -0.0149692306367644  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -0.018164490974085477  E_coul = 0.003195260337321048
  mo_energy =
[-0.00588699]
E1 = -0.018164490974085477  E_coul = 0.003195260337321048
Extra cycle  E= -0.0149692306367644  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:14:28 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.02413270166e-05      1
                                6.13195169716e-06      1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.0241327016639188e-05, 1.0], [6.131951697162923e-06, 1.0]]]}
ecp = {}
CPU time:         8.43
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -1.2295741599811102e-08  E_coul = 1.4640949404084538e-15
init E= -1.22957401357162e-08
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.00908224]
E1 = -0.018164490974085477  E_coul = 0.003195260337321048
cycle= 1 E= -0.0149692306367644  delta_E= -0.015  |g|=    0  |ddm|=    2
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
  mo_energy =
[-0.00588699]
E1 = -0.018164490974085477  E_coul = 0.003195260337321048
cycle= 2 E= -0.0149692306367644  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -0.018164490974085477  E_coul = 0.003195260337321048
  mo_energy =
[-0.00588699]
E1 = -0.018164490974085477  E_coul = 0.003195260337321048
Extra cycle  E= -0.0149692306367644  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.03 sec, wall time      0.03 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -0.018164490974085477  E_coul = 0.003195260337321048
init E= -0.0149692306367644
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.00588699]
E1 = -0.018164490974085477  E_coul = 0.003195260337321048
cycle= 1 E= -0.0149692306367644  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -0.018164490974085477  E_coul = 0.003195260337321048
  mo_energy =
[-0.00588699]
E1 = -0.018164490974085477  E_coul = 0.003195260337321048
Extra cycle  E= -0.0149692306367644  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.06 sec, wall time      0.06 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:14:29 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.0241328725e-05      1
                                6.13195180465e-06      1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.0241328725008825e-05, 1.0], [6.131951804654589e-06, 1.0]]]}
ecp = {}
CPU time:        10.14
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -1.229574438128993e-08  E_coul = 1.4640955199205908e-15
init E= -1.22957429171944e-08
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.00908224]
E1 = -0.018164491936650345  E_coul = 0.0031952604950692826
cycle= 1 E= -0.0149692314415811  delta_E= -0.015  |g|=    0  |ddm|=    2
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.00588699]
E1 = -0.018164491936650345  E_coul = 0.0031952604950692826
cycle= 2 E= -0.0149692314415811  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -0.018164491936650345  E_coul = 0.0031952604950692826
  mo_energy =
[-0.00588699]
E1 = -0.018164491936650345  E_coul = 0.0031952604950692826
Extra cycle  E= -0.0149692314415811  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:14:29 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.0241328725e-05      1
                                6.13195180465e-06      1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.0241328725008825e-05, 1.0], [6.131951804654589e-06, 1.0]]]}
ecp = {}
CPU time:        10.26
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -1.229574438128993e-08  E_coul = 1.4640955199205908e-15
init E= -1.22957429171944e-08
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.00908224]
E1 = -0.018164491936650345  E_coul = 0.0031952604950692826
cycle= 1 E= -0.0149692314415811  delta_E= -0.015  |g|=    0  |ddm|=    2
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
  mo_energy =
[-0.00588699]
E1 = -0.018164491936650345  E_coul = 0.0031952604950692826
cycle= 2 E= -0.0149692314415811  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -0.018164491936650345  E_coul = 0.0031952604950692826
  mo_energy =
[-0.00588699]
E1 = -0.018164491936650345  E_coul = 0.0031952604950692826
Extra cycle  E= -0.0149692314415811  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.03 sec, wall time      0.03 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -0.018164491936650345  E_coul = 0.0031952604950692826
init E= -0.0149692314415811
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.00588699]
E1 = -0.018164491936650345  E_coul = 0.0031952604950692826
cycle= 1 E= -0.0149692314415811  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -0.018164491936650345  E_coul = 0.0031952604950692826
  mo_energy =
[-0.00588699]
E1 = -0.018164491936650345  E_coul = 0.0031952604950692826
Extra cycle  E= -0.0149692314415811  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.06 sec, wall time      0.06 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:14:31 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.73876250135e-05      1
                                7.21080728947e-06      1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.7387625013476657e-05, 1.0], [7.2108072894695274e-06, 1.0]]]}
ecp = {}
CPU time:        11.76
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -5.691615468975171e-08  E_coul = 2.1295483547360637e-14
init E= -5.69161333942682e-08
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.01288376]
E1 = -0.02576753375432385  E_coul = 0.004364777511144194
cycle= 1 E= -0.0214027562431797  delta_E= -0.0214  |g|=    0  |ddm|=    2
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.00851899]
E1 = -0.02576753375432385  E_coul = 0.004364777511144194
cycle= 2 E= -0.0214027562431797  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -0.02576753375432385  E_coul = 0.004364777511144194
  mo_energy =
[-0.00851899]
E1 = -0.02576753375432385  E_coul = 0.004364777511144194
Extra cycle  E= -0.0214027562431797  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:14:31 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.73876250135e-05      1
                                7.21080728947e-06      1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.7387625013476657e-05, 1.0], [7.2108072894695274e-06, 1.0]]]}
ecp = {}
CPU time:        11.88
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -5.691615468975171e-08  E_coul = 2.1295483547360637e-14
init E= -5.69161333942682e-08
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.01288376]
E1 = -0.02576753375432385  E_coul = 0.004364777511144194
cycle= 1 E= -0.0214027562431797  delta_E= -0.0214  |g|=    0  |ddm|=    2
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.00851899]
E1 = -0.02576753375432385  E_coul = 0.004364777511144194
cycle= 2 E= -0.0214027562431797  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -0.02576753375432385  E_coul = 0.004364777511144194
  mo_energy =
[-0.00851899]
E1 = -0.02576753375432385  E_coul = 0.004364777511144194
Extra cycle  E= -0.0214027562431797  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -0.02576753375432385  E_coul = 0.004364777511144194
init E= -0.0214027562431797
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.00851899]
E1 = -0.02576753375432385  E_coul = 0.004364777511144194
cycle= 1 E= -0.0214027562431797  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -0.02576753375432385  E_coul = 0.004364777511144194
  mo_energy =
[-0.00851899]
E1 = -0.02576753375432385  E_coul = 0.004364777511144194
Extra cycle  E= -0.0214027562431797  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:14:33 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  0.000113119114998      1
                                1.2605085251e-05      1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [0.00011311911499766399, 1.0], [1.2605085251002549e-05, 1.0]]]}
ecp = {}
CPU time:        13.37
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -7.799599409813326e-07  E_coul = 2.0360201548904e-12
init E= -7.79957904961178e-07
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.02340957]
E1 = -0.04681937817975435  E_coul = 0.007336497268645111
cycle= 1 E= -0.0394828809111092  delta_E= -0.0395  |g|=    0  |ddm|=    2
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.01607319]
E1 = -0.04681937817975435  E_coul = 0.007336497268645111
cycle= 2 E= -0.0394828809111092  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -0.04681937817975435  E_coul = 0.007336497268645111
  mo_energy =
[-0.01607319]
E1 = -0.04681937817975435  E_coul = 0.007336497268645111
Extra cycle  E= -0.0394828809111092  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:14:33 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  0.000113119114998      1
                                1.2605085251e-05      1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [0.00011311911499766399, 1.0], [1.2605085251002549e-05, 1.0]]]}
ecp = {}
CPU time:        13.50
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -7.799599409813326e-07  E_coul = 2.0360201548904e-12
init E= -7.79957904961178e-07
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.02340957]
E1 = -0.04681937817975435  E_coul = 0.007336497268645111
cycle= 1 E= -0.0394828809111092  delta_E= -0.0395  |g|=    0  |ddm|=    2
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.01607319]
E1 = -0.04681937817975435  E_coul = 0.007336497268645111
cycle= 2 E= -0.0394828809111092  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -0.04681937817975435  E_coul = 0.007336497268645111
  mo_energy =
[-0.01607319]
E1 = -0.04681937817975435  E_coul = 0.007336497268645111
Extra cycle  E= -0.0394828809111092  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -0.04681937817975435  E_coul = 0.007336497268645111
init E= -0.0394828809111092
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.01607319]
E1 = -0.04681937817975435  E_coul = 0.007336497268645111
cycle= 1 E= -0.0394828809111092  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -0.04681937817975435  E_coul = 0.007336497268645111
  mo_energy =
[-0.01607319]
E1 = -0.04681937817975435  E_coul = 0.007336497268645111
Extra cycle  E= -0.0394828809111092  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:14:34 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  0.0022564063646      1
                                0.000147462034289      1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [0.0022564063646023473, 1.0], [0.00014746203428932803, 1.0]]]}
ecp = {}
CPU time:        15.03
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -0.00027941567592284854  E_coul = 5.9425880176616534e-08
init E= -0.000279356250042672
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.09754089]
E1 = -0.19516480488556337  E_coul = 0.02899192760028981
cycle= 1 E= -0.166172877285274  delta_E= -0.166  |g|=    0  |ddm|=    2
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.06859047]
E1 = -0.19516480488556337  E_coul = 0.02899192760028981
cycle= 2 E= -0.166172877285274  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -0.19516480488556337  E_coul = 0.02899192760028981
  mo_energy =
[-0.06859047]
E1 = -0.19516480488556337  E_coul = 0.02899192760028981
Extra cycle  E= -0.166172877285274  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:14:34 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  0.0022564063646      1
                                0.000147462034289      1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [0.0022564063646023473, 1.0], [0.00014746203428932803, 1.0]]]}
ecp = {}
CPU time:        15.18
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -0.00027941567592284854  E_coul = 5.9425880176616534e-08
init E= -0.000279356250042672
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.09754089]
E1 = -0.19516480488556337  E_coul = 0.02899192760028981
cycle= 1 E= -0.166172877285274  delta_E= -0.166  |g|=    0  |ddm|=    2
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.06859047]
E1 = -0.19516480488556337  E_coul = 0.02899192760028981
cycle= 2 E= -0.166172877285274  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -0.19516480488556337  E_coul = 0.02899192760028981
  mo_energy =
[-0.06859047]
E1 = -0.19516480488556337  E_coul = 0.02899192760028981
Extra cycle  E= -0.166172877285274  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -0.19516480488556337  E_coul = 0.02899192760028981
init E= -0.166172877285274
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.06859047]
E1 = -0.19516480488556337  E_coul = 0.02899192760028981
cycle= 1 E= -0.166172877285274  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -0.19516480488556337  E_coul = 0.02899192760028981
  mo_energy =
[-0.06859047]
E1 = -0.19516480488556337  E_coul = 0.02899192760028981
Extra cycle  E= -0.166172877285274  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.06 sec, wall time      0.06 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:14:36 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  0.00225640636776      1
                                0.000147462034498      1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [0.0022564063677624584, 1.0], [0.00014746203449838853, 1.0]]]}
ecp = {}
CPU time:        16.65
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -0.0002794156766943411  E_coul = 5.94258804644318e-08
init E= -0.000279356250813877
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.0975409]
E1 = -0.1951648050205329  E_coul = 0.028991927620706317
cycle= 1 E= -0.166172877399827  delta_E= -0.166  |g|=    0  |ddm|=    2
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.06859047]
E1 = -0.1951648050205329  E_coul = 0.028991927620706317
cycle= 2 E= -0.166172877399827  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -0.1951648050205329  E_coul = 0.028991927620706317
  mo_energy =
[-0.06859047]
E1 = -0.1951648050205329  E_coul = 0.028991927620706317
Extra cycle  E= -0.166172877399827  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:14:36 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  0.00225640636776      1
                                0.000147462034498      1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [0.0022564063677624584, 1.0], [0.00014746203449838853, 1.0]]]}
ecp = {}
CPU time:        16.81
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -0.0002794156766943411  E_coul = 5.94258804644318e-08
init E= -0.000279356250813877
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.0975409]
E1 = -0.1951648050205329  E_coul = 0.028991927620706317
cycle= 1 E= -0.166172877399827  delta_E= -0.166  |g|=    0  |ddm|=    2
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.06859047]
E1 = -0.1951648050205329  E_coul = 0.028991927620706317
cycle= 2 E= -0.166172877399827  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -0.1951648050205329  E_coul = 0.028991927620706317
  mo_energy =
[-0.06859047]
E1 = -0.1951648050205329  E_coul = 0.028991927620706317
Extra cycle  E= -0.166172877399827  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -0.1951648050205329  E_coul = 0.028991927620706317
init E= -0.166172877399827
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.06859047]
E1 = -0.1951648050205329  E_coul = 0.028991927620706317
cycle= 1 E= -0.166172877399827  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -0.1951648050205329  E_coul = 0.028991927620706317
  mo_energy =
[-0.06859047]
E1 = -0.1951648050205329  E_coul = 0.028991927620706317
Extra cycle  E= -0.166172877399827  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.06 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:14:38 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  0.00654331888923      1
                                0.000431067266716      1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [0.006543318889225569, 1.0], [0.00043106726671560575, 1.0]]]}
ecp = {}
CPU time:        18.30
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -0.002232125506477839  E_coul = 2.2748964844254384e-06
init E= -0.00222985060999341
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.1642314]
E1 = -0.32913367515082803  E_coul = 0.04946170211858217
cycle= 1 E= -0.279671973032246  delta_E= -0.277  |g|=    0  |ddm|= 1.99
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.11510514]
E1 = -0.32913367515082803  E_coul = 0.04946170211858217
cycle= 2 E= -0.279671973032246  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -0.32913367515082803  E_coul = 0.04946170211858217
  mo_energy =
[-0.11510514]
E1 = -0.32913367515082803  E_coul = 0.04946170211858217
Extra cycle  E= -0.279671973032246  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:14:38 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  0.00654331888923      1
                                0.000431067266716      1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [0.006543318889225569, 1.0], [0.00043106726671560575, 1.0]]]}
ecp = {}
CPU time:        18.47
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -0.002232125506477839  E_coul = 2.2748964844254384e-06
init E= -0.00222985060999341
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.1642314]
E1 = -0.32913367515082803  E_coul = 0.04946170211858217
cycle= 1 E= -0.279671973032246  delta_E= -0.277  |g|=    0  |ddm|= 1.99
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.11510514]
E1 = -0.32913367515082803  E_coul = 0.04946170211858217
cycle= 2 E= -0.279671973032246  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -0.32913367515082803  E_coul = 0.04946170211858217
  mo_energy =
[-0.11510514]
E1 = -0.32913367515082803  E_coul = 0.04946170211858217
Extra cycle  E= -0.279671973032246  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.03 sec, wall time      0.03 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -0.32913367515082803  E_coul = 0.04946170211858217
init E= -0.279671973032246
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.11510514]
E1 = -0.32913367515082803  E_coul = 0.04946170211858217
cycle= 1 E= -0.279671973032246  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -0.32913367515082803  E_coul = 0.04946170211858217
  mo_energy =
[-0.11510514]
E1 = -0.32913367515082803  E_coul = 0.04946170211858217
Extra cycle  E= -0.279671973032246  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.06 sec, wall time      0.06 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:14:39 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  0.0279778815123      1
                                0.00184909342885      1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [0.027977881512341686, 1.0], [0.001849093428846994, 1.0]]]}
ecp = {}
CPU time:        19.98
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -0.03293168874122726  E_coul = 0.0002531677136518584
init E= -0.0326785210275754
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.32598679]
E1 = -0.6621544204202733  E_coul = 0.10235260039688238
cycle= 1 E= -0.559801820023391  delta_E= -0.527  |g|=    0  |ddm|=  1.9
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
  mo_energy =
[-0.22872461]
E1 = -0.6621544204202733  E_coul = 0.10235260039688238
cycle= 2 E= -0.559801820023391  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -0.6621544204202733  E_coul = 0.10235260039688238
  mo_energy =
[-0.22872461]
E1 = -0.6621544204202733  E_coul = 0.10235260039688238
Extra cycle  E= -0.559801820023391  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:14:39 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  0.0279778815123      1
                                0.00184909342885      1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [0.027977881512341686, 1.0], [0.001849093428846994, 1.0]]]}
ecp = {}
CPU time:        20.16
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -0.03293168874122726  E_coul = 0.0002531677136518584
init E= -0.0326785210275754
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.32598679]
E1 = -0.6621544204202733  E_coul = 0.10235260039688238
cycle= 1 E= -0.559801820023391  delta_E= -0.527  |g|=    0  |ddm|=  1.9
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.22872461]
E1 = -0.6621544204202733  E_coul = 0.10235260039688238
cycle= 2 E= -0.559801820023391  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -0.6621544204202733  E_coul = 0.10235260039688238
  mo_energy =
[-0.22872461]
E1 = -0.6621544204202733  E_coul = 0.10235260039688238
Extra cycle  E= -0.559801820023391  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -0.6621544204202733  E_coul = 0.10235260039688238
init E= -0.559801820023391
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.22872461]
E1 = -0.6621544204202733  E_coul = 0.10235260039688238
cycle= 1 E= -0.559801820023391  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -0.6621544204202733  E_coul = 0.10235260039688238
  mo_energy =
[-0.22872461]
E1 = -0.6621544204202733  E_coul = 0.10235260039688238
Extra cycle  E= -0.559801820023391  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.06 sec, wall time      0.06 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:14:41 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  0.56384194709        1
                                0.0372997474821      1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [0.5638419470902445, 1.0], [0.037299747482131704, 1.0]]]}
ecp = {}
CPU time:        21.83
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -1.6205460109842489  E_coul = 0.20832584794848988
init E= -1.41222016303576
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.89406358]
E1 = -2.4069740136180124  E_coul = 0.45958223091839656
cycle= 1 E= -1.94739178269962  delta_E= -0.535  |g|=    0  |ddm|= 0.653
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74390478]
E1 = -2.4069740136180124  E_coul = 0.45958223091839656
cycle= 2 E= -1.94739178269962  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -2.4069740136180124  E_coul = 0.45958223091839656
  mo_energy =
[-0.74390478]
E1 = -2.4069740136180124  E_coul = 0.45958223091839656
Extra cycle  E= -1.94739178269962  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:14:41 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  0.56384194709        1
                                0.0372997474821      1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [0.5638419470902445, 1.0], [0.037299747482131704, 1.0]]]}
ecp = {}
CPU time:        22.04
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -1.6205460109842489  E_coul = 0.20832584794848988
init E= -1.41222016303576
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.89406358]
E1 = -2.4069740136180124  E_coul = 0.45958223091839656
cycle= 1 E= -1.94739178269962  delta_E= -0.535  |g|=    0  |ddm|= 0.653
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74390478]
E1 = -2.4069740136180124  E_coul = 0.45958223091839656
cycle= 2 E= -1.94739178269962  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -2.4069740136180124  E_coul = 0.45958223091839656
  mo_energy =
[-0.74390478]
E1 = -2.4069740136180124  E_coul = 0.45958223091839656
Extra cycle  E= -1.94739178269962  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -2.4069740136180124  E_coul = 0.45958223091839656
init E= -1.94739178269962
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.74390478]
E1 = -2.4069740136180124  E_coul = 0.45958223091839656
cycle= 1 E= -1.94739178269962  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -2.4069740136180124  E_coul = 0.45958223091839656
  mo_energy =
[-0.74390478]
E1 = -2.4069740136180124  E_coul = 0.45958223091839656
Extra cycle  E= -1.94739178269962  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.06 sec, wall time      0.06 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:14:43 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  0.563841947192       1
                                0.0372997708031      1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [0.563841947192415, 1.0], [0.03729977080312274, 1.0]]]}
ecp = {}
CPU time:        23.59
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -1.620546312080555  E_coul = 0.20832592152727175
init E= -1.41222039055328
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.8940636]
E1 = -2.4069742089707264  E_coul = 0.4595822970589323
cycle= 1 E= -1.94739191191179  delta_E= -0.535  |g|=    0  |ddm|= 0.653
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74390481]
E1 = -2.4069742089707264  E_coul = 0.4595822970589323
cycle= 2 E= -1.94739191191179  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -2.4069742089707264  E_coul = 0.4595822970589323
  mo_energy =
[-0.74390481]
E1 = -2.4069742089707264  E_coul = 0.4595822970589323
Extra cycle  E= -1.94739191191179  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:14:43 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  0.563841947192       1
                                0.0372997708031      1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [0.563841947192415, 1.0], [0.03729977080312274, 1.0]]]}
ecp = {}
CPU time:        23.81
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -1.620546312080555  E_coul = 0.20832592152727175
init E= -1.41222039055328
    CPU time for initialize scf      0.01 sec, wall time      0.02 sec
  mo_energy =
[-0.8940636]
E1 = -2.4069742089707264  E_coul = 0.4595822970589323
cycle= 1 E= -1.94739191191179  delta_E= -0.535  |g|=    0  |ddm|= 0.653
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
  mo_energy =
[-0.74390481]
E1 = -2.4069742089707264  E_coul = 0.4595822970589323
cycle= 2 E= -1.94739191191179  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -2.4069742089707264  E_coul = 0.4595822970589323
  mo_energy =
[-0.74390481]
E1 = -2.4069742089707264  E_coul = 0.4595822970589323
Extra cycle  E= -1.94739191191179  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.03 sec, wall time      0.03 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -2.4069742089707264  E_coul = 0.4595822970589323
init E= -1.94739191191179
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.74390481]
E1 = -2.4069742089707264  E_coul = 0.4595822970589323
cycle= 1 E= -1.94739191191179  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -2.4069742089707264  E_coul = 0.4595822970589323
  mo_energy =
[-0.74390481]
E1 = -2.4069742089707264  E_coul = 0.4595822970589323
Extra cycle  E= -1.94739191191179  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.06 sec, wall time      0.06 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:14:45 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  0.563963871799       1
                                0.0651297572726      1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [0.5639638717986244, 1.0], [0.06512975727258305, 1.0]]]}
ecp = {}
CPU time:        25.35
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -1.9045995136977463  E_coul = 0.2851136089551823
init E= -1.61948590474256
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.90296699]
E1 = -2.5776771423119578  E_coul = 0.5222370145856279
cycle= 1 E= -2.05544012772633  delta_E= -0.436  |g|=    0  |ddm|= 0.522
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
  mo_energy =
[-0.76660156]
E1 = -2.5776771423119578  E_coul = 0.5222370145856279
cycle= 2 E= -2.05544012772633  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -2.5776771423119578  E_coul = 0.5222370145856279
  mo_energy =
[-0.76660156]
E1 = -2.5776771423119578  E_coul = 0.5222370145856279
Extra cycle  E= -2.05544012772633  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:14:45 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  0.563963871799       1
                                0.0651297572726      1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [0.5639638717986244, 1.0], [0.06512975727258305, 1.0]]]}
ecp = {}
CPU time:        25.58
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -1.9045995136977463  E_coul = 0.2851136089551823
init E= -1.61948590474256
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.90296699]
E1 = -2.5776771423119578  E_coul = 0.5222370145856279
cycle= 1 E= -2.05544012772633  delta_E= -0.436  |g|=    0  |ddm|= 0.522
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.76660156]
E1 = -2.5776771423119578  E_coul = 0.5222370145856279
cycle= 2 E= -2.05544012772633  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -2.5776771423119578  E_coul = 0.5222370145856279
  mo_energy =
[-0.76660156]
E1 = -2.5776771423119578  E_coul = 0.5222370145856279
Extra cycle  E= -2.05544012772633  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -2.5776771423119578  E_coul = 0.5222370145856279
init E= -2.05544012772633
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.76660156]
E1 = -2.5776771423119578  E_coul = 0.5222370145856279
cycle= 1 E= -2.05544012772633  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -2.5776771423119578  E_coul = 0.5222370145856279
  mo_energy =
[-0.76660156]
E1 = -2.5776771423119578  E_coul = 0.5222370145856279
Extra cycle  E= -2.05544012772633  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.06 sec, wall time      0.06 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:14:46 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  0.564573495341       1
                                0.204279806225       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [0.5645734953405236, 1.0], [0.2042798062248398, 1.0]]]}
ecp = {}
CPU time:        27.14
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -2.4596565317857837  E_coul = 0.49804962810887365
init E= -1.96160690367691
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.84948109]
E1 = -2.8552783664956576  E_coul = 0.6711515500428041
cycle= 1 E= -2.18412681645285  delta_E= -0.223  |g|=    0  |ddm|= 0.277
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.75648763]
E1 = -2.8552783664956576  E_coul = 0.6711515500428041
cycle= 2 E= -2.18412681645285  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -2.8552783664956576  E_coul = 0.6711515500428041
  mo_energy =
[-0.75648763]
E1 = -2.8552783664956576  E_coul = 0.6711515500428041
Extra cycle  E= -2.18412681645285  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:14:47 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  0.564573495341       1
                                0.204279806225       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [0.5645734953405236, 1.0], [0.2042798062248398, 1.0]]]}
ecp = {}
CPU time:        27.39
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -2.4596565317857837  E_coul = 0.49804962810887365
init E= -1.96160690367691
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.84948109]
E1 = -2.8552783664956576  E_coul = 0.6711515500428041
cycle= 1 E= -2.18412681645285  delta_E= -0.223  |g|=    0  |ddm|= 0.277
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.75648763]
E1 = -2.8552783664956576  E_coul = 0.6711515500428041
cycle= 2 E= -2.18412681645285  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -2.8552783664956576  E_coul = 0.6711515500428041
  mo_energy =
[-0.75648763]
E1 = -2.8552783664956576  E_coul = 0.6711515500428041
Extra cycle  E= -2.18412681645285  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -2.8552783664956576  E_coul = 0.6711515500428041
init E= -2.18412681645285
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.75648763]
E1 = -2.8552783664956576  E_coul = 0.6711515500428041
cycle= 1 E= -2.18412681645285  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -2.8552783664956576  E_coul = 0.6711515500428041
  mo_energy =
[-0.75648763]
E1 = -2.8552783664956576  E_coul = 0.6711515500428041
Extra cycle  E= -2.18412681645285  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.06 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:14:48 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  0.56457349653        1
                                0.204279806483       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [0.564573496529925, 1.0], [0.20427980648308572, 1.0]]]}
ecp = {}
CPU time:        28.98
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -2.459656534713574  E_coul = 0.4980496291187906
init E= -1.96160690559478
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.84948109]
E1 = -2.855278368243009  E_coul = 0.6711515506274032
cycle= 1 E= -2.18412681761561  delta_E= -0.223  |g|=    0  |ddm|= 0.277
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.75648763]
E1 = -2.855278368243009  E_coul = 0.6711515506274032
cycle= 2 E= -2.18412681761561  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -2.855278368243009  E_coul = 0.6711515506274032
  mo_energy =
[-0.75648763]
E1 = -2.855278368243009  E_coul = 0.6711515506274032
Extra cycle  E= -2.18412681761561  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:14:48 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  0.56457349653        1
                                0.204279806483       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [0.564573496529925, 1.0], [0.20427980648308572, 1.0]]]}
ecp = {}
CPU time:        29.24
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -2.459656534713574  E_coul = 0.4980496291187906
init E= -1.96160690559478
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.84948109]
E1 = -2.855278368243009  E_coul = 0.6711515506274032
cycle= 1 E= -2.18412681761561  delta_E= -0.223  |g|=    0  |ddm|= 0.277
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.75648763]
E1 = -2.855278368243009  E_coul = 0.6711515506274032
cycle= 2 E= -2.18412681761561  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -2.855278368243009  E_coul = 0.6711515506274032
  mo_energy =
[-0.75648763]
E1 = -2.855278368243009  E_coul = 0.6711515506274032
Extra cycle  E= -2.18412681761561  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -2.855278368243009  E_coul = 0.6711515506274032
init E= -2.18412681761561
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.75648763]
E1 = -2.855278368243009  E_coul = 0.6711515506274032
cycle= 1 E= -2.18412681761561  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -2.855278368243009  E_coul = 0.6711515506274032
  mo_energy =
[-0.75648763]
E1 = -2.855278368243009  E_coul = 0.6711515506274032
Extra cycle  E= -2.18412681761561  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.06 sec, wall time      0.06 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:14:50 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.08299797092        1
                                0.316841471987       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.0829979709223183, 1.0], [0.3168414719874088, 1.0]]]}
ecp = {}
CPU time:        30.84
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.2841575673129233  E_coul = 0.8346883814861243
init E= -2.4494691858268
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83273005]
E1 = -3.3872296273678835  E_coul = 0.8879033121326662
cycle= 1 E= -2.49932631523522  delta_E= -0.0499  |g|=    0  |ddm|= 0.0609
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.8057115]
E1 = -3.3872296273678835  E_coul = 0.8879033121326662
cycle= 2 E= -2.49932631523522  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.3872296273678835  E_coul = 0.8879033121326662
  mo_energy =
[-0.8057115]
E1 = -3.3872296273678835  E_coul = 0.8879033121326662
Extra cycle  E= -2.49932631523522  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:14:50 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.08299797092        1
                                0.316841471987       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.0829979709223183, 1.0], [0.3168414719874088, 1.0]]]}
ecp = {}
CPU time:        31.16
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.2841575673129233  E_coul = 0.8346883814861243
init E= -2.4494691858268
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83273005]
E1 = -3.3872296273678835  E_coul = 0.8879033121326662
cycle= 1 E= -2.49932631523522  delta_E= -0.0499  |g|=    0  |ddm|= 0.0609
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.8057115]
E1 = -3.3872296273678835  E_coul = 0.8879033121326662
cycle= 2 E= -2.49932631523522  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.3872296273678835  E_coul = 0.8879033121326662
  mo_energy =
[-0.8057115]
E1 = -3.3872296273678835  E_coul = 0.8879033121326662
Extra cycle  E= -2.49932631523522  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.3872296273678835  E_coul = 0.8879033121326662
init E= -2.49932631523522
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.8057115]
E1 = -3.3872296273678835  E_coul = 0.8879033121326662
cycle= 1 E= -2.49932631523522  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.3872296273678835  E_coul = 0.8879033121326662
  mo_energy =
[-0.8057115]
E1 = -3.3872296273678835  E_coul = 0.8879033121326662
Extra cycle  E= -2.49932631523522  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.06 sec, wall time      0.06 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:14:52 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  3.67512034883        1
                                0.8796498008         1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [3.6751203488312902, 1.0], [0.879649800800254, 1.0]]]}
ecp = {}
CPU time:        32.78
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.017692912922456  E_coul = 1.1283825903267228
init E= -1.88931032259573
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.44825572]
E1 = -3.5553917925692673  E_coul = 1.5663226281434346
cycle= 1 E= -1.98906916442583  delta_E= -0.0998  |g|=    0  |ddm|= 0.302
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.21137327]
E1 = -3.5553917925692673  E_coul = 1.5663226281434346
cycle= 2 E= -1.98906916442583  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.5553917925692673  E_coul = 1.5663226281434346
  mo_energy =
[-0.21137327]
E1 = -3.5553917925692673  E_coul = 1.5663226281434346
Extra cycle  E= -1.98906916442583  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:14:52 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  3.67512034883        1
                                0.8796498008         1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [3.6751203488312902, 1.0], [0.879649800800254, 1.0]]]}
ecp = {}
CPU time:        33.07
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.017692912922456  E_coul = 1.1283825903267228
init E= -1.88931032259573
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.44825572]
E1 = -3.5553917925692673  E_coul = 1.5663226281434346
cycle= 1 E= -1.98906916442583  delta_E= -0.0998  |g|=    0  |ddm|= 0.302
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.21137327]
E1 = -3.5553917925692673  E_coul = 1.5663226281434346
cycle= 2 E= -1.98906916442583  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.5553917925692673  E_coul = 1.5663226281434346
  mo_energy =
[-0.21137327]
E1 = -3.5553917925692673  E_coul = 1.5663226281434346
Extra cycle  E= -1.98906916442583  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.5553917925692673  E_coul = 1.5663226281434346
init E= -1.98906916442583
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.21137327]
E1 = -3.5553917925692673  E_coul = 1.5663226281434346
cycle= 1 E= -1.98906916442583  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.5553917925692673  E_coul = 1.5663226281434346
  mo_energy =
[-0.21137327]
E1 = -3.5553917925692673  E_coul = 1.5663226281434346
Extra cycle  E= -1.98906916442583  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.06 sec, wall time      0.06 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:14:54 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.37905915988        1
                                0.598245636394       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.379059159876804, 1.0], [0.5982456363938314, 1.0]]]}
ecp = {}
CPU time:        34.71
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.533945737882539  E_coul = 1.1261185544682248
init E= -2.40782718341431
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.68156573]
E1 = -3.7584459475000402  E_coul = 1.2737405591181747
cycle= 1 E= -2.48470538838187  delta_E= -0.0769  |g|=    0  |ddm|= 0.119
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.60548241]
E1 = -3.7584459475000402  E_coul = 1.2737405591181747
cycle= 2 E= -2.48470538838187  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.7584459475000402  E_coul = 1.2737405591181747
  mo_energy =
[-0.60548241]
E1 = -3.7584459475000402  E_coul = 1.2737405591181747
Extra cycle  E= -2.48470538838187  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:14:54 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.37905915988        1
                                0.598245636394       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.379059159876804, 1.0], [0.5982456363938314, 1.0]]]}
ecp = {}
CPU time:        35.02
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.533945737882539  E_coul = 1.1261185544682248
init E= -2.40782718341431
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.68156573]
E1 = -3.7584459475000402  E_coul = 1.2737405591181747
cycle= 1 E= -2.48470538838187  delta_E= -0.0769  |g|=    0  |ddm|= 0.119
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.60548241]
E1 = -3.7584459475000402  E_coul = 1.2737405591181747
cycle= 2 E= -2.48470538838187  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.7584459475000402  E_coul = 1.2737405591181747
  mo_energy =
[-0.60548241]
E1 = -3.7584459475000402  E_coul = 1.2737405591181747
Extra cycle  E= -2.48470538838187  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.7584459475000402  E_coul = 1.2737405591181747
init E= -2.48470538838187
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.60548241]
E1 = -3.7584459475000402  E_coul = 1.2737405591181747
cycle= 1 E= -2.48470538838187  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.7584459475000402  E_coul = 1.2737405591181747
  mo_energy =
[-0.60548241]
E1 = -3.7584459475000402  E_coul = 1.2737405591181747
Extra cycle  E= -2.48470538838187  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:14:56 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.7310285654         1
                                0.457543554191       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7310285653995612, 1.0], [0.4575435541906201, 1.0]]]}
ecp = {}
CPU time:        36.79
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.5878970291228405  E_coul = 1.0437257390797352
init E= -2.54417129004311
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.76957111]
E1 = -3.6804292959788008  E_coul = 1.0982555600446975
cycle= 1 E= -2.5821737359341  delta_E= -0.038  |g|=    0  |ddm|= 0.0503
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74195909]
E1 = -3.6804292959788008  E_coul = 1.0982555600446975
cycle= 2 E= -2.5821737359341  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6804292959788008  E_coul = 1.0982555600446975
  mo_energy =
[-0.74195909]
E1 = -3.6804292959788008  E_coul = 1.0982555600446975
Extra cycle  E= -2.5821737359341  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:14:56 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.7310285654         1
                                0.457543554191       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7310285653995612, 1.0], [0.4575435541906201, 1.0]]]}
ecp = {}
CPU time:        37.12
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.5878970291228405  E_coul = 1.0437257390797352
init E= -2.54417129004311
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.76957111]
E1 = -3.6804292959788008  E_coul = 1.0982555600446975
cycle= 1 E= -2.5821737359341  delta_E= -0.038  |g|=    0  |ddm|= 0.0503
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74195909]
E1 = -3.6804292959788008  E_coul = 1.0982555600446975
cycle= 2 E= -2.5821737359341  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6804292959788008  E_coul = 1.0982555600446975
  mo_energy =
[-0.74195909]
E1 = -3.6804292959788008  E_coul = 1.0982555600446975
Extra cycle  E= -2.5821737359341  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6804292959788008  E_coul = 1.0982555600446975
init E= -2.5821737359341
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.74195909]
E1 = -3.6804292959788008  E_coul = 1.0982555600446975
cycle= 1 E= -2.5821737359341  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.6804292959788008  E_coul = 1.0982555600446975
  mo_energy =
[-0.74195909]
E1 = -3.6804292959788008  E_coul = 1.0982555600446975
Extra cycle  E= -2.5821737359341  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.06 sec, wall time      0.06 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:14:58 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73102856544        1
                                0.4575435534         1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7310285654383832, 1.0], [0.45754355340015396, 1.0]]]}
ecp = {}
CPU time:        38.79
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.5878970297336066  E_coul = 1.0437257389955814
init E= -2.54417129073803
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.76957111]
E1 = -3.6804292960797724  E_coul = 1.0982555596424968
cycle= 1 E= -2.58217373643728  delta_E= -0.038  |g|=    0  |ddm|= 0.0503
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
  mo_energy =
[-0.74195909]
E1 = -3.6804292960797724  E_coul = 1.0982555596424968
cycle= 2 E= -2.58217373643728  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6804292960797724  E_coul = 1.0982555596424968
  mo_energy =
[-0.74195909]
E1 = -3.6804292960797724  E_coul = 1.0982555596424968
Extra cycle  E= -2.58217373643728  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:14:58 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73102856544        1
                                0.4575435534         1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7310285654383832, 1.0], [0.45754355340015396, 1.0]]]}
ecp = {}
CPU time:        39.13
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.5878970297336066  E_coul = 1.0437257389955814
init E= -2.54417129073803
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.76957111]
E1 = -3.6804292960797724  E_coul = 1.0982555596424968
cycle= 1 E= -2.58217373643728  delta_E= -0.038  |g|=    0  |ddm|= 0.0503
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74195909]
E1 = -3.6804292960797724  E_coul = 1.0982555596424968
cycle= 2 E= -2.58217373643728  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6804292960797724  E_coul = 1.0982555596424968
  mo_energy =
[-0.74195909]
E1 = -3.6804292960797724  E_coul = 1.0982555596424968
Extra cycle  E= -2.58217373643728  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6804292960797724  E_coul = 1.0982555596424968
init E= -2.58217373643728
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.74195909]
E1 = -3.6804292960797724  E_coul = 1.0982555596424968
cycle= 1 E= -2.58217373643728  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.6804292960797724  E_coul = 1.0982555596424968
  mo_energy =
[-0.74195909]
E1 = -3.6804292960797724  E_coul = 1.0982555596424968
Extra cycle  E= -2.58217373643728  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.06 sec, wall time      0.06 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:15:00 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.7534997182         1
                                1e-06                1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7534997182049108, 1.0], [1e-06, 1.0]]]}
ecp = {}
CPU time:        40.79
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -0.6309764512137542  E_coul = 0.05830855488850614
init E= -0.572667896325248
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.65190967]
E1 = -1.599425203865302  E_coul = 0.37465699588509704
cycle= 1 E= -1.22476820798021  delta_E= -0.652  |g|=    0  |ddm|= 1.21
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.42505561]
E1 = -1.599425203865302  E_coul = 0.37465699588509704
cycle= 2 E= -1.22476820798021  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -1.599425203865302  E_coul = 0.37465699588509704
  mo_energy =
[-0.42505561]
E1 = -1.599425203865302  E_coul = 0.37465699588509704
Extra cycle  E= -1.22476820798021  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:15:00 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.7534997182         1
                                1e-06                1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7534997182049108, 1.0], [1e-06, 1.0]]]}
ecp = {}
CPU time:        41.16
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -0.6309764512137542  E_coul = 0.05830855488850614
init E= -0.572667896325248
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.65190967]
E1 = -1.599425203865302  E_coul = 0.37465699588509704
cycle= 1 E= -1.22476820798021  delta_E= -0.652  |g|=    0  |ddm|= 1.21
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.42505561]
E1 = -1.599425203865302  E_coul = 0.37465699588509704
cycle= 2 E= -1.22476820798021  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -1.599425203865302  E_coul = 0.37465699588509704
  mo_energy =
[-0.42505561]
E1 = -1.599425203865302  E_coul = 0.37465699588509704
Extra cycle  E= -1.22476820798021  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -1.599425203865302  E_coul = 0.37465699588509704
init E= -1.22476820798021
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.42505561]
E1 = -1.599425203865302  E_coul = 0.37465699588509704
cycle= 1 E= -1.22476820798021  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -1.599425203865302  E_coul = 0.37465699588509704
  mo_energy =
[-0.42505561]
E1 = -1.599425203865302  E_coul = 0.37465699588509704
Extra cycle  E= -1.22476820798021  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:15:02 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.7422641418         1
                                0.228772277095       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.742264141802236, 1.0], [0.22877227709531006, 1.0]]]}
ecp = {}
CPU time:        42.89
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.525316550107193  E_coul = 0.9183014688218548
init E= -2.60701508128534
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.8564989]
E1 = -3.576011615429677  E_coul = 0.9449022449959387
cycle= 1 E= -2.63110937043374  delta_E= -0.0241  |g|=    0  |ddm|= 0.0284
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.84310356]
E1 = -3.576011615429677  E_coul = 0.9449022449959387
cycle= 2 E= -2.63110937043374  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.576011615429677  E_coul = 0.9449022449959387
  mo_energy =
[-0.84310356]
E1 = -3.576011615429677  E_coul = 0.9449022449959387
Extra cycle  E= -2.63110937043374  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:15:03 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.7422641418         1
                                0.228772277095       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.742264141802236, 1.0], [0.22877227709531006, 1.0]]]}
ecp = {}
CPU time:        43.27
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.525316550107193  E_coul = 0.9183014688218548
init E= -2.60701508128534
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.8564989]
E1 = -3.576011615429677  E_coul = 0.9449022449959387
cycle= 1 E= -2.63110937043374  delta_E= -0.0241  |g|=    0  |ddm|= 0.0284
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.84310356]
E1 = -3.576011615429677  E_coul = 0.9449022449959387
cycle= 2 E= -2.63110937043374  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.576011615429677  E_coul = 0.9449022449959387
  mo_energy =
[-0.84310356]
E1 = -3.576011615429677  E_coul = 0.9449022449959387
Extra cycle  E= -2.63110937043374  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.576011615429677  E_coul = 0.9449022449959387
init E= -2.63110937043374
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.84310356]
E1 = -3.576011615429677  E_coul = 0.9449022449959387
cycle= 1 E= -2.63110937043374  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.576011615429677  E_coul = 0.9449022449959387
  mo_energy =
[-0.84310356]
E1 = -3.576011615429677  E_coul = 0.9449022449959387
Extra cycle  E= -2.63110937043374  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:15:04 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.7366463536         1
                                0.343157915643       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7366463536008985, 1.0], [0.34315791564296505, 1.0]]]}
ecp = {}
CPU time:        45.03
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6376031830638738  E_coul = 1.0139274354251742
init E= -2.6236757476387
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81232401]
E1 = -3.6712725473234027  E_coul = 1.032783963243969
cycle= 1 E= -2.63848858407943  delta_E= -0.0148  |g|=    0  |ddm|= 0.0183
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80285231]
E1 = -3.6712725473234027  E_coul = 1.032783963243969
cycle= 2 E= -2.63848858407943  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6712725473234027  E_coul = 1.032783963243969
  mo_energy =
[-0.80285231]
E1 = -3.6712725473234027  E_coul = 1.032783963243969
Extra cycle  E= -2.63848858407943  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:15:05 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.7366463536         1
                                0.343157915643       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7366463536008985, 1.0], [0.34315791564296505, 1.0]]]}
ecp = {}
CPU time:        45.43
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6376031830638738  E_coul = 1.0139274354251742
init E= -2.6236757476387
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81232401]
E1 = -3.6712725473234027  E_coul = 1.032783963243969
cycle= 1 E= -2.63848858407943  delta_E= -0.0148  |g|=    0  |ddm|= 0.0183
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80285231]
E1 = -3.6712725473234027  E_coul = 1.032783963243969
cycle= 2 E= -2.63848858407943  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6712725473234027  E_coul = 1.032783963243969
  mo_energy =
[-0.80285231]
E1 = -3.6712725473234027  E_coul = 1.032783963243969
Extra cycle  E= -2.63848858407943  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6712725473234027  E_coul = 1.032783963243969
init E= -2.63848858407943
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.80285231]
E1 = -3.6712725473234027  E_coul = 1.032783963243969
cycle= 1 E= -2.63848858407943  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.6712725473234027  E_coul = 1.032783963243969
  mo_energy =
[-0.80285231]
E1 = -3.6712725473234027  E_coul = 1.032783963243969
Extra cycle  E= -2.63848858407943  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.06 sec, wall time      0.06 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:15:06 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.7394552477         1
                                0.285965096369       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394552477015675, 1.0], [0.2859650963691376, 1.0]]]}
ecp = {}
CPU time:        47.16
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.613068502503675  E_coul = 0.9783117931847556
init E= -2.63475670931892
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427658]
E1 = -3.6394792335223562  E_coul = 0.9926665525132642
cycle= 1 E= -2.64681268100909  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707306]
E1 = -3.6394792335223562  E_coul = 0.9926665525132642
cycle= 2 E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6394792335223562  E_coul = 0.9926665525132642
  mo_energy =
[-0.82707306]
E1 = -3.6394792335223562  E_coul = 0.9926665525132642
Extra cycle  E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:15:07 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.7394552477         1
                                0.285965096369       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394552477015675, 1.0], [0.2859650963691376, 1.0]]]}
ecp = {}
CPU time:        47.58
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.613068502503675  E_coul = 0.9783117931847556
init E= -2.63475670931892
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427658]
E1 = -3.6394792335223562  E_coul = 0.9926665525132642
cycle= 1 E= -2.64681268100909  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707306]
E1 = -3.6394792335223562  E_coul = 0.9926665525132642
cycle= 2 E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6394792335223562  E_coul = 0.9926665525132642
  mo_energy =
[-0.82707306]
E1 = -3.6394792335223562  E_coul = 0.9926665525132642
Extra cycle  E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6394792335223562  E_coul = 0.9926665525132642
init E= -2.64681268100909
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82707306]
E1 = -3.6394792335223562  E_coul = 0.9926665525132642
cycle= 1 E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.6394792335223562  E_coul = 0.9926665525132642
  mo_energy =
[-0.82707306]
E1 = -3.6394792335223562  E_coul = 0.9926665525132642
Extra cycle  E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:15:09 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.74085969475        1
                                0.257368686732       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7408596947519015, 1.0], [0.25736868673222385, 1.0]]]}
ecp = {}
CPU time:        49.48
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.579249748152886  E_coul = 0.9520739585973944
init E= -2.62717578955549
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.84536875]
E1 = -3.6126590529778606  E_coul = 0.9699305388849132
cycle= 1 E= -2.64272851409295  delta_E= -0.0156  |g|=    0  |ddm|= 0.0185
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.83639899]
E1 = -3.6126590529778606  E_coul = 0.9699305388849132
cycle= 2 E= -2.64272851409295  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6126590529778606  E_coul = 0.9699305388849132
  mo_energy =
[-0.83639899]
E1 = -3.6126590529778606  E_coul = 0.9699305388849132
Extra cycle  E= -2.64272851409295  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:15:09 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.74085969475        1
                                0.257368686732       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7408596947519015, 1.0], [0.25736868673222385, 1.0]]]}
ecp = {}
CPU time:        49.93
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.579249748152886  E_coul = 0.9520739585973944
init E= -2.62717578955549
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.84536875]
E1 = -3.6126590529778606  E_coul = 0.9699305388849132
cycle= 1 E= -2.64272851409295  delta_E= -0.0156  |g|=    0  |ddm|= 0.0185
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.83639899]
E1 = -3.6126590529778606  E_coul = 0.9699305388849132
cycle= 2 E= -2.64272851409295  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6126590529778606  E_coul = 0.9699305388849132
  mo_energy =
[-0.83639899]
E1 = -3.6126590529778606  E_coul = 0.9699305388849132
Extra cycle  E= -2.64272851409295  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6126590529778606  E_coul = 0.9699305388849132
init E= -2.64272851409295
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.83639899]
E1 = -3.6126590529778606  E_coul = 0.9699305388849132
cycle= 1 E= -2.64272851409295  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -3.6126590529778606  E_coul = 0.9699305388849132
  mo_energy =
[-0.83639899]
E1 = -3.6126590529778606  E_coul = 0.9699305388849132
Extra cycle  E= -2.64272851409295  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.08 sec, wall time      0.08 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:15:11 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.74015747123        1
                                0.271666891551       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7401574712267343, 1.0], [0.2716668915506807, 1.0]]]}
ecp = {}
CPU time:        51.88
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.5983575301342863  E_coul = 0.9660318368178463
init E= -2.63232569331644
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83981512]
E1 = -3.627157408130125  E_coul = 0.9815572177883019
cycle= 1 E= -2.64560019034182  delta_E= -0.0133  |g|=    0  |ddm|= 0.0159
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.83202149]
E1 = -3.627157408130125  E_coul = 0.9815572177883019
cycle= 2 E= -2.64560019034182  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.627157408130125  E_coul = 0.9815572177883019
  mo_energy =
[-0.83202149]
E1 = -3.627157408130125  E_coul = 0.9815572177883019
Extra cycle  E= -2.64560019034182  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:15:12 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.74015747123        1
                                0.271666891551       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7401574712267343, 1.0], [0.2716668915506807, 1.0]]]}
ecp = {}
CPU time:        52.35
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.5983575301342863  E_coul = 0.9660318368178463
init E= -2.63232569331644
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83981512]
E1 = -3.627157408130125  E_coul = 0.9815572177883019
cycle= 1 E= -2.64560019034182  delta_E= -0.0133  |g|=    0  |ddm|= 0.0159
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.83202149]
E1 = -3.627157408130125  E_coul = 0.9815572177883019
cycle= 2 E= -2.64560019034182  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.627157408130125  E_coul = 0.9815572177883019
  mo_energy =
[-0.83202149]
E1 = -3.627157408130125  E_coul = 0.9815572177883019
Extra cycle  E= -2.64560019034182  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.627157408130125  E_coul = 0.9815572177883019
init E= -2.64560019034182
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.83202149]
E1 = -3.627157408130125  E_coul = 0.9815572177883019
cycle= 1 E= -2.64560019034182  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.627157408130125  E_coul = 0.9815572177883019
  mo_energy =
[-0.83202149]
E1 = -3.627157408130125  E_coul = 0.9815572177883019
Extra cycle  E= -2.64560019034182  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:15:14 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73980635946        1
                                0.27881599396        1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.739806359464151, 1.0], [0.27881599395990914, 1.0]]]}
ecp = {}
CPU time:        54.32
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6062277721981557  E_coul = 0.9723699640835453
init E= -2.63385780811461
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83704373]
E1 = -3.6335749825012345  E_coul = 0.9871734840104412
cycle= 1 E= -2.64640149849079  delta_E= -0.0125  |g|=    0  |ddm|= 0.0151
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82961401]
E1 = -3.6335749825012345  E_coul = 0.9871734840104412
cycle= 2 E= -2.64640149849079  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6335749825012345  E_coul = 0.9871734840104412
  mo_energy =
[-0.82961401]
E1 = -3.6335749825012345  E_coul = 0.9871734840104412
Extra cycle  E= -2.64640149849079  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:15:14 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73980635946        1
                                0.27881599396        1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.739806359464151, 1.0], [0.27881599395990914, 1.0]]]}
ecp = {}
CPU time:        54.79
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6062277721981557  E_coul = 0.9723699640835453
init E= -2.63385780811461
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83704373]
E1 = -3.6335749825012345  E_coul = 0.9871734840104412
cycle= 1 E= -2.64640149849079  delta_E= -0.0125  |g|=    0  |ddm|= 0.0151
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82961401]
E1 = -3.6335749825012345  E_coul = 0.9871734840104412
cycle= 2 E= -2.64640149849079  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6335749825012345  E_coul = 0.9871734840104412
  mo_energy =
[-0.82961401]
E1 = -3.6335749825012345  E_coul = 0.9871734840104412
Extra cycle  E= -2.64640149849079  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6335749825012345  E_coul = 0.9871734840104412
init E= -2.64640149849079
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82961401]
E1 = -3.6335749825012345  E_coul = 0.9871734840104412
cycle= 1 E= -2.64640149849079  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.6335749825012345  E_coul = 0.9871734840104412
  mo_energy =
[-0.82961401]
E1 = -3.6335749825012345  E_coul = 0.9871734840104412
Extra cycle  E= -2.64640149849079  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.06 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:15:16 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73963080358        1
                                0.282390545165       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7396308035828592, 1.0], [0.2823905451645233, 1.0]]]}
ecp = {}
CPU time:        56.58
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.609772727222028  E_coul = 0.9753890396068128
init E= -2.63438368761522
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.8356596]
E1 = -3.6365894625613144  E_coul = 0.9899350567630812
cycle= 1 E= -2.64665440579823  delta_E= -0.0123  |g|=    0  |ddm|= 0.0147
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82835967]
E1 = -3.6365894625613144  E_coul = 0.9899350567630812
cycle= 2 E= -2.64665440579823  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6365894625613144  E_coul = 0.9899350567630812
  mo_energy =
[-0.82835967]
E1 = -3.6365894625613144  E_coul = 0.9899350567630812
Extra cycle  E= -2.64665440579823  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:15:16 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73963080358        1
                                0.282390545165       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7396308035828592, 1.0], [0.2823905451645233, 1.0]]]}
ecp = {}
CPU time:        57.04
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.609772727222028  E_coul = 0.9753890396068128
init E= -2.63438368761522
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.8356596]
E1 = -3.6365894625613144  E_coul = 0.9899350567630812
cycle= 1 E= -2.64665440579823  delta_E= -0.0123  |g|=    0  |ddm|= 0.0147
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82835967]
E1 = -3.6365894625613144  E_coul = 0.9899350567630812
cycle= 2 E= -2.64665440579823  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6365894625613144  E_coul = 0.9899350567630812
  mo_energy =
[-0.82835967]
E1 = -3.6365894625613144  E_coul = 0.9899350567630812
Extra cycle  E= -2.64665440579823  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6365894625613144  E_coul = 0.9899350567630812
init E= -2.64665440579823
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82835967]
E1 = -3.6365894625613144  E_coul = 0.9899350567630812
cycle= 1 E= -2.64665440579823  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.6365894625613144  E_coul = 0.9899350567630812
  mo_energy =
[-0.82835967]
E1 = -3.6365894625613144  E_coul = 0.9899350567630812
Extra cycle  E= -2.64665440579823  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.06 sec, wall time      0.06 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:15:18 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73954302564        1
                                0.284177820767       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.739543025642213, 1.0], [0.2841778207668304, 1.0]]]}
ecp = {}
CPU time:        58.82
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.611451265050425  E_coul = 0.9768622889429488
init E= -2.63458897610748
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83496795]
E1 = -3.6380497170229913  E_coul = 0.991304520422
cycle= 1 E= -2.64674519660099  delta_E= -0.0122  |g|=    0  |ddm|= 0.0146
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82772034]
E1 = -3.6380497170229913  E_coul = 0.991304520422
cycle= 2 E= -2.64674519660099  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6380497170229913  E_coul = 0.991304520422
  mo_energy =
[-0.82772034]
E1 = -3.6380497170229913  E_coul = 0.991304520422
Extra cycle  E= -2.64674519660099  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:15:19 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73954302564        1
                                0.284177820767       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.739543025642213, 1.0], [0.2841778207668304, 1.0]]]}
ecp = {}
CPU time:        59.32
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.611451265050425  E_coul = 0.9768622889429488
init E= -2.63458897610748
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83496795]
E1 = -3.6380497170229913  E_coul = 0.991304520422
cycle= 1 E= -2.64674519660099  delta_E= -0.0122  |g|=    0  |ddm|= 0.0146
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82772034]
E1 = -3.6380497170229913  E_coul = 0.991304520422
cycle= 2 E= -2.64674519660099  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6380497170229913  E_coul = 0.991304520422
  mo_energy =
[-0.82772034]
E1 = -3.6380497170229913  E_coul = 0.991304520422
Extra cycle  E= -2.64674519660099  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6380497170229913  E_coul = 0.991304520422
init E= -2.64674519660099
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82772034]
E1 = -3.6380497170229913  E_coul = 0.991304520422
cycle= 1 E= -2.64674519660099  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -3.6380497170229913  E_coul = 0.991304520422
  mo_energy =
[-0.82772034]
E1 = -3.6380497170229913  E_coul = 0.991304520422
Extra cycle  E= -2.64674519660099  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:15:21 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73949913667        1
                                0.285071458568       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394991366718902, 1.0], [0.285071458567984, 1.0]]]}
ecp = {}
CPU time:        61.15
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.612267485080776  E_coul = 0.9775899885040322
init E= -2.63467749657674
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83462223]
E1 = -3.6387682904662872  E_coul = 0.991986460012629
cycle= 1 E= -2.64678183045366  delta_E= -0.0121  |g|=    0  |ddm|= 0.0146
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
  mo_energy =
[-0.82739769]
E1 = -3.6387682904662872  E_coul = 0.991986460012629
cycle= 2 E= -2.64678183045366  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6387682904662872  E_coul = 0.991986460012629
  mo_energy =
[-0.82739769]
E1 = -3.6387682904662872  E_coul = 0.991986460012629
Extra cycle  E= -2.64678183045366  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:15:21 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73949913667        1
                                0.285071458568       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394991366718902, 1.0], [0.285071458567984, 1.0]]]}
ecp = {}
CPU time:        61.65
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.612267485080776  E_coul = 0.9775899885040322
init E= -2.63467749657674
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83462223]
E1 = -3.6387682904662872  E_coul = 0.991986460012629
cycle= 1 E= -2.64678183045366  delta_E= -0.0121  |g|=    0  |ddm|= 0.0146
    CPU time for cycle= 1      0.00 sec, wall time      0.01 sec
  mo_energy =
[-0.82739769]
E1 = -3.6387682904662872  E_coul = 0.991986460012629
cycle= 2 E= -2.64678183045366  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6387682904662872  E_coul = 0.991986460012629
  mo_energy =
[-0.82739769]
E1 = -3.6387682904662872  E_coul = 0.991986460012629
Extra cycle  E= -2.64678183045366  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.03 sec, wall time      0.03 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6387682904662872  E_coul = 0.991986460012629
init E= -2.64678183045366
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82739769]
E1 = -3.6387682904662872  E_coul = 0.991986460012629
cycle= 1 E= -2.64678183045366  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.6387682904662872  E_coul = 0.991986460012629
  mo_energy =
[-0.82739769]
E1 = -3.6387682904662872  E_coul = 0.991986460012629
Extra cycle  E= -2.64678183045366  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:15:23 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73947719219        1
                                0.285518277469       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.739477192186729, 1.0], [0.2855182774685608, 1.0]]]}
ecp = {}
CPU time:        63.53
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6126698865192344  E_coul = 0.9779516251337663
init E= -2.63471826138547
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.8344494]
E1 = -3.6391247124361907  E_coul = 0.9923267364789465
cycle= 1 E= -2.64679797595724  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82723562]
E1 = -3.6391247124361907  E_coul = 0.9923267364789465
cycle= 2 E= -2.64679797595724  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6391247124361907  E_coul = 0.9923267364789465
  mo_energy =
[-0.82723562]
E1 = -3.6391247124361907  E_coul = 0.9923267364789465
Extra cycle  E= -2.64679797595724  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:15:23 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73947719219        1
                                0.285518277469       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.739477192186729, 1.0], [0.2855182774685608, 1.0]]]}
ecp = {}
CPU time:        64.05
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6126698865192344  E_coul = 0.9779516251337663
init E= -2.63471826138547
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.8344494]
E1 = -3.6391247124361907  E_coul = 0.9923267364789465
cycle= 1 E= -2.64679797595724  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82723562]
E1 = -3.6391247124361907  E_coul = 0.9923267364789465
cycle= 2 E= -2.64679797595724  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6391247124361907  E_coul = 0.9923267364789465
  mo_energy =
[-0.82723562]
E1 = -3.6391247124361907  E_coul = 0.9923267364789465
Extra cycle  E= -2.64679797595724  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6391247124361907  E_coul = 0.9923267364789465
init E= -2.64679797595724
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82723562]
E1 = -3.6391247124361907  E_coul = 0.9923267364789465
cycle= 1 E= -2.64679797595724  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.6391247124361907  E_coul = 0.9923267364789465
  mo_energy =
[-0.82723562]
E1 = -3.6391247124361907  E_coul = 0.9923267364789465
Extra cycle  E= -2.64679797595724  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:15:25 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73946621994        1
                                0.285741686919       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394662199441482, 1.0], [0.28574168691884916, 1.0]]]}
ecp = {}
CPU time:        66.01
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.612869666746847  E_coul = 0.9781318924112894
init E= -2.63473777433556
    CPU time for initialize scf      0.03 sec, wall time      0.04 sec
  mo_energy =
[-0.83436299]
E1 = -3.639302210171721  E_coul = 0.9924967019666264
cycle= 1 E= -2.64680550820509  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.8271544]
E1 = -3.639302210171721  E_coul = 0.9924967019666264
cycle= 2 E= -2.64680550820509  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.639302210171721  E_coul = 0.9924967019666264
  mo_energy =
[-0.8271544]
E1 = -3.639302210171721  E_coul = 0.9924967019666264
Extra cycle  E= -2.64680550820509  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.05 sec, wall time      0.06 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:15:26 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73946621994        1
                                0.285741686919       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394662199441482, 1.0], [0.28574168691884916, 1.0]]]}
ecp = {}
CPU time:        66.57
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.612869666746847  E_coul = 0.9781318924112894
init E= -2.63473777433556
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83436299]
E1 = -3.639302210171721  E_coul = 0.9924967019666264
cycle= 1 E= -2.64680550820509  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.8271544]
E1 = -3.639302210171721  E_coul = 0.9924967019666264
cycle= 2 E= -2.64680550820509  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.639302210171721  E_coul = 0.9924967019666264
  mo_energy =
[-0.8271544]
E1 = -3.639302210171721  E_coul = 0.9924967019666264
Extra cycle  E= -2.64680550820509  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.639302210171721  E_coul = 0.9924967019666264
init E= -2.64680550820509
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.8271544]
E1 = -3.639302210171721  E_coul = 0.9924967019666264
cycle= 1 E= -2.64680550820509  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.01 sec
E1 = -3.639302210171721  E_coul = 0.9924967019666264
  mo_energy =
[-0.8271544]
E1 = -3.639302210171721  E_coul = 0.9924967019666264
Extra cycle  E= -2.64680550820509  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:15:28 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73946073382        1
                                0.285853391644       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394607338228576, 1.0], [0.2858533916439933, 1.0]]]}
ecp = {}
CPU time:        68.54
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6129692025660347  E_coul = 0.9782218885710556
init E= -2.63474731399498
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83431978]
E1 = -3.639390781092995  E_coul = 0.99258164159716
cycle= 1 E= -2.64680913949583  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82711375]
E1 = -3.639390781092995  E_coul = 0.99258164159716
cycle= 2 E= -2.64680913949583  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.639390781092995  E_coul = 0.99258164159716
  mo_energy =
[-0.82711375]
E1 = -3.639390781092995  E_coul = 0.99258164159716
Extra cycle  E= -2.64680913949583  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:15:29 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73946073382        1
                                0.285853391644       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394607338228576, 1.0], [0.2858533916439933, 1.0]]]}
ecp = {}
CPU time:        69.15
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6129692025660347  E_coul = 0.9782218885710556
init E= -2.63474731399498
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83431978]
E1 = -3.639390781092995  E_coul = 0.99258164159716
cycle= 1 E= -2.64680913949583  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82711375]
E1 = -3.639390781092995  E_coul = 0.99258164159716
cycle= 2 E= -2.64680913949583  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.639390781092995  E_coul = 0.99258164159716
  mo_energy =
[-0.82711375]
E1 = -3.639390781092995  E_coul = 0.99258164159716
Extra cycle  E= -2.64680913949583  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.639390781092995  E_coul = 0.99258164159716
init E= -2.64680913949583
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82711375]
E1 = -3.639390781092995  E_coul = 0.99258164159716
cycle= 1 E= -2.64680913949583  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -3.639390781092995  E_coul = 0.99258164159716
  mo_energy =
[-0.82711375]
E1 = -3.639390781092995  E_coul = 0.99258164159716
Extra cycle  E= -2.64680913949583  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.08 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:15:31 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945799076        1
                                0.285909244007       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394579907622125, 1.0], [0.2859092440065655, 1.0]]]}
ecp = {}
CPU time:        71.27
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.613018882005305  E_coul = 0.9782668523161724
init E= -2.63475202968913
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83429818]
E1 = -3.6394350221126515  E_coul = 0.992624100643215
cycle= 1 E= -2.64681092146944  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82709341]
E1 = -3.6394350221126515  E_coul = 0.992624100643215
cycle= 2 E= -2.64681092146944  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6394350221126515  E_coul = 0.992624100643215
  mo_energy =
[-0.82709341]
E1 = -3.6394350221126515  E_coul = 0.992624100643215
Extra cycle  E= -2.64681092146944  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:15:31 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945799076        1
                                0.285909244007       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394579907622125, 1.0], [0.2859092440065655, 1.0]]]}
ecp = {}
CPU time:        71.86
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.613018882005305  E_coul = 0.9782668523161724
init E= -2.63475202968913
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83429818]
E1 = -3.6394350221126515  E_coul = 0.992624100643215
cycle= 1 E= -2.64681092146944  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82709341]
E1 = -3.6394350221126515  E_coul = 0.992624100643215
cycle= 2 E= -2.64681092146944  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6394350221126515  E_coul = 0.992624100643215
  mo_energy =
[-0.82709341]
E1 = -3.6394350221126515  E_coul = 0.992624100643215
Extra cycle  E= -2.64681092146944  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6394350221126515  E_coul = 0.992624100643215
init E= -2.64681092146944
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82709341]
E1 = -3.6394350221126515  E_coul = 0.992624100643215
cycle= 1 E= -2.64681092146944  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -3.6394350221126515  E_coul = 0.992624100643215
  mo_energy =
[-0.82709341]
E1 = -3.6394350221126515  E_coul = 0.992624100643215
Extra cycle  E= -2.64681092146944  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:15:33 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945661923        1
                                0.285937170188       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394566192318899, 1.0], [0.2859371701878515, 1.0]]]}
ecp = {}
CPU time:        73.82
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130436996202593  E_coul = 0.9782893256094067
init E= -2.63475437401085
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83428738]
E1 = -3.6394571315179345  E_coul = 0.9926453274750784
cycle= 1 E= -2.64681180404286  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82708324]
E1 = -3.6394571315179345  E_coul = 0.9926453274750784
cycle= 2 E= -2.64681180404286  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6394571315179345  E_coul = 0.9926453274750784
  mo_energy =
[-0.82708324]
E1 = -3.6394571315179345  E_coul = 0.9926453274750784
Extra cycle  E= -2.64681180404286  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:15:34 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945661923        1
                                0.285937170188       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394566192318899, 1.0], [0.2859371701878515, 1.0]]]}
ecp = {}
CPU time:        74.38
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130436996202593  E_coul = 0.9782893256094067
init E= -2.63475437401085
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83428738]
E1 = -3.6394571315179345  E_coul = 0.9926453274750784
cycle= 1 E= -2.64681180404286  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82708324]
E1 = -3.6394571315179345  E_coul = 0.9926453274750784
cycle= 2 E= -2.64681180404286  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6394571315179345  E_coul = 0.9926453274750784
  mo_energy =
[-0.82708324]
E1 = -3.6394571315179345  E_coul = 0.9926453274750784
Extra cycle  E= -2.64681180404286  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6394571315179345  E_coul = 0.9926453274750784
init E= -2.64681180404286
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82708324]
E1 = -3.6394571315179345  E_coul = 0.9926453274750784
cycle= 1 E= -2.64681180404286  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.6394571315179345  E_coul = 0.9926453274750784
  mo_energy =
[-0.82708324]
E1 = -3.6394571315179345  E_coul = 0.9926453274750784
Extra cycle  E= -2.64681180404286  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.08 sec, wall time      0.08 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:15:36 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945593347        1
                                0.285951133278       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394559334667286, 1.0], [0.28595113327849453, 1.0]]]}
ecp = {}
CPU time:        76.39
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.613056102903179  E_coul = 0.9783005601117389
init E= -2.63475554279144
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83428198]
E1 = -3.639468183445151  E_coul = 0.9926559402183605
cycle= 1 E= -2.64681224322679  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707815]
E1 = -3.639468183445151  E_coul = 0.9926559402183605
cycle= 2 E= -2.64681224322679  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.639468183445151  E_coul = 0.9926559402183605
  mo_energy =
[-0.82707815]
E1 = -3.639468183445151  E_coul = 0.9926559402183605
Extra cycle  E= -2.64681224322679  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:15:36 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945593347        1
                                0.285951133278       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394559334667286, 1.0], [0.28595113327849453, 1.0]]]}
ecp = {}
CPU time:        76.93
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.613056102903179  E_coul = 0.9783005601117389
init E= -2.63475554279144
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83428198]
E1 = -3.639468183445151  E_coul = 0.9926559402183605
cycle= 1 E= -2.64681224322679  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707815]
E1 = -3.639468183445151  E_coul = 0.9926559402183605
cycle= 2 E= -2.64681224322679  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.639468183445151  E_coul = 0.9926559402183605
  mo_energy =
[-0.82707815]
E1 = -3.639468183445151  E_coul = 0.9926559402183605
Extra cycle  E= -2.64681224322679  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.639468183445151  E_coul = 0.9926559402183605
init E= -2.64681224322679
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82707815]
E1 = -3.639468183445151  E_coul = 0.9926559402183605
cycle= 1 E= -2.64681224322679  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.639468183445151  E_coul = 0.9926559402183605
  mo_energy =
[-0.82707815]
E1 = -3.639468183445151  E_coul = 0.9926559402183605
Extra cycle  E= -2.64681224322679  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.06 sec, wall time      0.06 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:15:38 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945559058        1
                                0.285958114824       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.739455590584148, 1.0], [0.285958114823816, 1.0]]]}
ecp = {}
CPU time:        78.82
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130623031637006  E_coul = 0.9783061768269016
init E= -2.6347561263368
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427928]
E1 = -3.639473708714992  E_coul = 0.9926612464218569
cycle= 1 E= -2.64681246229314  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707561]
E1 = -3.639473708714992  E_coul = 0.9926612464218569
cycle= 2 E= -2.64681246229314  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.639473708714992  E_coul = 0.9926612464218569
  mo_energy =
[-0.82707561]
E1 = -3.639473708714992  E_coul = 0.9926612464218569
Extra cycle  E= -2.64681246229314  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:15:39 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945559058        1
                                0.285958114824       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.739455590584148, 1.0], [0.285958114823816, 1.0]]]}
ecp = {}
CPU time:        79.38
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130623031637006  E_coul = 0.9783061768269016
init E= -2.6347561263368
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427928]
E1 = -3.639473708714992  E_coul = 0.9926612464218569
cycle= 1 E= -2.64681246229314  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707561]
E1 = -3.639473708714992  E_coul = 0.9926612464218569
cycle= 2 E= -2.64681246229314  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.639473708714992  E_coul = 0.9926612464218569
  mo_energy =
[-0.82707561]
E1 = -3.639473708714992  E_coul = 0.9926612464218569
Extra cycle  E= -2.64681246229314  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.639473708714992  E_coul = 0.9926612464218569
init E= -2.64681246229314
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82707561]
E1 = -3.639473708714992  E_coul = 0.9926612464218569
cycle= 1 E= -2.64681246229314  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.639473708714992  E_coul = 0.9926612464218569
  mo_energy =
[-0.82707561]
E1 = -3.639473708714992  E_coul = 0.9926612464218569
Extra cycle  E= -2.64681246229314  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.06 sec, wall time      0.06 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:15:41 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945541914        1
                                0.285961605596       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394554191428577, 1.0], [0.28596160559647676, 1.0]]]}
ecp = {}
CPU time:        81.30
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130654029487537  E_coul = 0.9783089850504915
init E= -2.63475641789826
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427793]
E1 = -3.6394764711764824  E_coul = 0.9926638994815713
cycle= 1 E= -2.64681257169491  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707434]
E1 = -3.6394764711764824  E_coul = 0.9926638994815713
cycle= 2 E= -2.64681257169491  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6394764711764824  E_coul = 0.9926638994815713
  mo_energy =
[-0.82707434]
E1 = -3.6394764711764824  E_coul = 0.9926638994815713
Extra cycle  E= -2.64681257169491  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:15:41 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945541914        1
                                0.285961605596       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394554191428577, 1.0], [0.28596160559647676, 1.0]]]}
ecp = {}
CPU time:        81.87
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130654029487537  E_coul = 0.9783089850504915
init E= -2.63475641789826
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427793]
E1 = -3.6394764711764824  E_coul = 0.9926638994815713
cycle= 1 E= -2.64681257169491  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707434]
E1 = -3.6394764711764824  E_coul = 0.9926638994815713
cycle= 2 E= -2.64681257169491  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6394764711764824  E_coul = 0.9926638994815713
  mo_energy =
[-0.82707434]
E1 = -3.6394764711764824  E_coul = 0.9926638994815713
Extra cycle  E= -2.64681257169491  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6394764711764824  E_coul = 0.9926638994815713
init E= -2.64681257169491
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82707434]
E1 = -3.6394764711764824  E_coul = 0.9926638994815713
cycle= 1 E= -2.64681257169491  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.6394764711764824  E_coul = 0.9926638994815713
  mo_energy =
[-0.82707434]
E1 = -3.6394764711764824  E_coul = 0.9926638994815713
Extra cycle  E= -2.64681257169491  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:15:43 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945533342        1
                                0.285963350983       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394553334222125, 1.0], [0.2859633509828071, 1.0]]]}
ecp = {}
CPU time:        83.82
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130669527549797  E_coul = 0.978310389128789
init E= -2.63475656362619
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427726]
E1 = -3.6394778523638713  E_coul = 0.9926652260009207
cycle= 1 E= -2.64681262636295  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.8270737]
E1 = -3.6394778523638713  E_coul = 0.9926652260009207
cycle= 2 E= -2.64681262636295  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6394778523638713  E_coul = 0.9926652260009207
  mo_energy =
[-0.8270737]
E1 = -3.6394778523638713  E_coul = 0.9926652260009207
Extra cycle  E= -2.64681262636295  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:15:44 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945533342        1
                                0.285963350983       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394553334222125, 1.0], [0.2859633509828071, 1.0]]]}
ecp = {}
CPU time:        84.41
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130669527549797  E_coul = 0.978310389128789
init E= -2.63475656362619
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427726]
E1 = -3.6394778523638713  E_coul = 0.9926652260009207
cycle= 1 E= -2.64681262636295  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.8270737]
E1 = -3.6394778523638713  E_coul = 0.9926652260009207
cycle= 2 E= -2.64681262636295  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6394778523638713  E_coul = 0.9926652260009207
  mo_energy =
[-0.8270737]
E1 = -3.6394778523638713  E_coul = 0.9926652260009207
Extra cycle  E= -2.64681262636295  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6394778523638713  E_coul = 0.9926652260009207
init E= -2.64681262636295
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.8270737]
E1 = -3.6394778523638713  E_coul = 0.9926652260009207
cycle= 1 E= -2.64681262636295  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.6394778523638713  E_coul = 0.9926652260009207
  mo_energy =
[-0.8270737]
E1 = -3.6394778523638713  E_coul = 0.9926652260009207
Extra cycle  E= -2.64681262636295  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:15:46 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945529056        1
                                0.285964223676       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394552905618899, 1.0], [0.28596422367597235, 1.0]]]}
ecp = {}
CPU time:        86.34
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130677276365186  E_coul = 0.9783110911595633
init E= -2.63475663647696
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427692]
E1 = -3.6394785429467262  E_coul = 0.9926658892579675
cycle= 1 E= -2.64681265368876  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707338]
E1 = -3.6394785429467262  E_coul = 0.9926658892579675
cycle= 2 E= -2.64681265368876  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6394785429467262  E_coul = 0.9926658892579675
  mo_energy =
[-0.82707338]
E1 = -3.6394785429467262  E_coul = 0.9926658892579675
Extra cycle  E= -2.64681265368876  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:15:46 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945529056        1
                                0.285964223676       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394552905618899, 1.0], [0.28596422367597235, 1.0]]]}
ecp = {}
CPU time:        86.94
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130677276365186  E_coul = 0.9783110911595633
init E= -2.63475663647696
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427692]
E1 = -3.6394785429467262  E_coul = 0.9926658892579675
cycle= 1 E= -2.64681265368876  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707338]
E1 = -3.6394785429467262  E_coul = 0.9926658892579675
cycle= 2 E= -2.64681265368876  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6394785429467262  E_coul = 0.9926658892579675
  mo_energy =
[-0.82707338]
E1 = -3.6394785429467262  E_coul = 0.9926658892579675
Extra cycle  E= -2.64681265368876  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.03 sec, wall time      0.03 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6394785429467262  E_coul = 0.9926658892579675
init E= -2.64681265368876
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82707338]
E1 = -3.6394785429467262  E_coul = 0.9926658892579675
cycle= 1 E= -2.64681265368876  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.6394785429467262  E_coul = 0.9926658892579675
  mo_energy =
[-0.82707338]
E1 = -3.6394785429467262  E_coul = 0.9926658892579675
Extra cycle  E= -2.64681265368876  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.06 sec, wall time      0.06 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:15:49 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945526913        1
                                0.285964660023       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394552691317287, 1.0], [0.28596466002255494, 1.0]]]}
ecp = {}
CPU time:        88.98
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130681150718966  E_coul = 0.9783114421728589
init E= -2.63475667289904
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427675]
E1 = -3.6394788882354447  E_coul = 0.9926662208858353
cycle= 1 E= -2.64681266734961  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
  mo_energy =
[-0.82707322]
E1 = -3.6394788882354447  E_coul = 0.9926662208858353
cycle= 2 E= -2.64681266734961  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6394788882354447  E_coul = 0.9926662208858353
  mo_energy =
[-0.82707322]
E1 = -3.6394788882354447  E_coul = 0.9926662208858353
Extra cycle  E= -2.64681266734961  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:15:49 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945526913        1
                                0.285964660023       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394552691317287, 1.0], [0.28596466002255494, 1.0]]]}
ecp = {}
CPU time:        89.61
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130681150718966  E_coul = 0.9783114421728589
init E= -2.63475667289904
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427675]
E1 = -3.6394788882354447  E_coul = 0.9926662208858353
cycle= 1 E= -2.64681266734961  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707322]
E1 = -3.6394788882354447  E_coul = 0.9926662208858353
cycle= 2 E= -2.64681266734961  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6394788882354447  E_coul = 0.9926662208858353
  mo_energy =
[-0.82707322]
E1 = -3.6394788882354447  E_coul = 0.9926662208858353
Extra cycle  E= -2.64681266734961  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6394788882354447  E_coul = 0.9926662208858353
init E= -2.64681266734961
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82707322]
E1 = -3.6394788882354447  E_coul = 0.9926662208858353
cycle= 1 E= -2.64681266734961  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.6394788882354447  E_coul = 0.9926662208858353
  mo_energy =
[-0.82707322]
E1 = -3.6394788882354447  E_coul = 0.9926662208858353
Extra cycle  E= -2.64681266734961  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:15:51 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945525842        1
                                0.285964878196       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394552584166478, 1.0], [0.28596487819584626, 1.0]]]}
ecp = {}
CPU time:        91.68
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.613068308788234  E_coul = 0.9783116176789818
init E= -2.63475669110925
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427667]
E1 = -3.639479060879126  E_coul = 0.9926663866996049
cycle= 1 E= -2.64681267417952  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707314]
E1 = -3.639479060879126  E_coul = 0.9926663866996049
cycle= 2 E= -2.64681267417952  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.639479060879126  E_coul = 0.9926663866996049
  mo_energy =
[-0.82707314]
E1 = -3.639479060879126  E_coul = 0.9926663866996049
Extra cycle  E= -2.64681267417952  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:15:52 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945525842        1
                                0.285964878196       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394552584166478, 1.0], [0.28596487819584626, 1.0]]]}
ecp = {}
CPU time:        92.30
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.613068308788234  E_coul = 0.9783116176789818
init E= -2.63475669110925
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427667]
E1 = -3.639479060879126  E_coul = 0.9926663866996049
cycle= 1 E= -2.64681267417952  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707314]
E1 = -3.639479060879126  E_coul = 0.9926663866996049
cycle= 2 E= -2.64681267417952  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.639479060879126  E_coul = 0.9926663866996049
  mo_energy =
[-0.82707314]
E1 = -3.639479060879126  E_coul = 0.9926663866996049
Extra cycle  E= -2.64681267417952  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.639479060879126  E_coul = 0.9926663866996049
init E= -2.64681267417952
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82707314]
E1 = -3.639479060879126  E_coul = 0.9926663866996049
cycle= 1 E= -2.64681267417952  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.639479060879126  E_coul = 0.9926663866996049
  mo_energy =
[-0.82707314]
E1 = -3.639479060879126  E_coul = 0.9926663866996049
Extra cycle  E= -2.64681267417952  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.06 sec, wall time      0.06 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:15:54 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945525306        1
                                0.285964987282       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394552530591076, 1.0], [0.28596498728249187, 1.0]]]}
ecp = {}
CPU time:        94.22
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.613068405646069  E_coul = 0.9783117054319129
init E= -2.63475670021416
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427662]
E1 = -3.639479147200798  E_coul = 0.9926664696064481
cycle= 1 E= -2.64681267759435  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.8270731]
E1 = -3.639479147200798  E_coul = 0.9926664696064481
cycle= 2 E= -2.64681267759435  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.639479147200798  E_coul = 0.9926664696064481
  mo_energy =
[-0.8270731]
E1 = -3.639479147200798  E_coul = 0.9926664696064481
Extra cycle  E= -2.64681267759435  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:15:54 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945525306        1
                                0.285964987282       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394552530591076, 1.0], [0.28596498728249187, 1.0]]]}
ecp = {}
CPU time:        94.83
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.613068405646069  E_coul = 0.9783117054319129
init E= -2.63475670021416
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427662]
E1 = -3.639479147200798  E_coul = 0.9926664696064481
cycle= 1 E= -2.64681267759435  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.8270731]
E1 = -3.639479147200798  E_coul = 0.9926664696064481
cycle= 2 E= -2.64681267759435  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.639479147200798  E_coul = 0.9926664696064481
  mo_energy =
[-0.8270731]
E1 = -3.639479147200798  E_coul = 0.9926664696064481
Extra cycle  E= -2.64681267759435  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.639479147200798  E_coul = 0.9926664696064481
init E= -2.64681267759435
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.8270731]
E1 = -3.639479147200798  E_coul = 0.9926664696064481
cycle= 1 E= -2.64681267759435  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.639479147200798  E_coul = 0.9926664696064481
  mo_energy =
[-0.8270731]
E1 = -3.639479147200798  E_coul = 0.9926664696064481
Extra cycle  E= -2.64681267759435  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.06 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:15:56 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945525038        1
                                0.285965041826       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394552503803373, 1.0], [0.2859650418258147, 1.0]]]}
ecp = {}
CPU time:        96.80
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130684540749014  E_coul = 0.9783117493083459
init E= -2.63475670476656
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.8342766]
E1 = -3.6394791903615924  E_coul = 0.99266651105986
cycle= 1 E= -2.64681267930173  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707308]
E1 = -3.6394791903615924  E_coul = 0.99266651105986
cycle= 2 E= -2.64681267930173  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6394791903615924  E_coul = 0.99266651105986
  mo_energy =
[-0.82707308]
E1 = -3.6394791903615924  E_coul = 0.99266651105986
Extra cycle  E= -2.64681267930173  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:15:57 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945525038        1
                                0.285965041826       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394552503803373, 1.0], [0.2859650418258147, 1.0]]]}
ecp = {}
CPU time:        97.46
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130684540749014  E_coul = 0.9783117493083459
init E= -2.63475670476656
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.8342766]
E1 = -3.6394791903615924  E_coul = 0.99266651105986
cycle= 1 E= -2.64681267930173  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707308]
E1 = -3.6394791903615924  E_coul = 0.99266651105986
cycle= 2 E= -2.64681267930173  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6394791903615924  E_coul = 0.99266651105986
  mo_energy =
[-0.82707308]
E1 = -3.6394791903615924  E_coul = 0.99266651105986
Extra cycle  E= -2.64681267930173  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6394791903615924  E_coul = 0.99266651105986
init E= -2.64681267930173
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82707308]
E1 = -3.6394791903615924  E_coul = 0.99266651105986
cycle= 1 E= -2.64681267930173  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.6394791903615924  E_coul = 0.99266651105986
  mo_energy =
[-0.82707308]
E1 = -3.6394791903615924  E_coul = 0.99266651105986
Extra cycle  E= -2.64681267930173  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:15:59 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945524904        1
                                0.285965069097       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394552490409523, 1.0], [0.28596506909747615, 1.0]]]}
ecp = {}
CPU time:        99.54
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.613068478289296  E_coul = 0.9783117712465544
init E= -2.63475670704274
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427659]
E1 = -3.6394792119419765  E_coul = 0.9926665317865627
cycle= 1 E= -2.64681268015541  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707307]
E1 = -3.6394792119419765  E_coul = 0.9926665317865627
cycle= 2 E= -2.64681268015541  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6394792119419765  E_coul = 0.9926665317865627
  mo_energy =
[-0.82707307]
E1 = -3.6394792119419765  E_coul = 0.9926665317865627
Extra cycle  E= -2.64681268015541  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:16:00 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945524904        1
                                0.285965069097       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394552490409523, 1.0], [0.28596506909747615, 1.0]]]}
ecp = {}
CPU time:       100.20
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.613068478289296  E_coul = 0.9783117712465544
init E= -2.63475670704274
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427659]
E1 = -3.6394792119419765  E_coul = 0.9926665317865627
cycle= 1 E= -2.64681268015541  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707307]
E1 = -3.6394792119419765  E_coul = 0.9926665317865627
cycle= 2 E= -2.64681268015541  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6394792119419765  E_coul = 0.9926665317865627
  mo_energy =
[-0.82707307]
E1 = -3.6394792119419765  E_coul = 0.9926665317865627
Extra cycle  E= -2.64681268015541  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6394792119419765  E_coul = 0.9926665317865627
init E= -2.64681268015541
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82707307]
E1 = -3.6394792119419765  E_coul = 0.9926665317865627
cycle= 1 E= -2.64681268015541  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.6394792119419765  E_coul = 0.9926665317865627
  mo_energy =
[-0.82707307]
E1 = -3.6394792119419765  E_coul = 0.9926665317865627
Extra cycle  E= -2.64681268015541  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:16:02 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945524837        1
                                0.285965082733       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394552483712598, 1.0], [0.28596508273330684, 1.0]]]}
ecp = {}
CPU time:       102.30
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130684903964863  E_coul = 0.978311782215655
init E= -2.63475670818083
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427659]
E1 = -3.639479222732168  E_coul = 0.9926665421499139
cycle= 1 E= -2.64681268058225  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707307]
E1 = -3.639479222732168  E_coul = 0.9926665421499139
cycle= 2 E= -2.64681268058225  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.639479222732168  E_coul = 0.9926665421499139
  mo_energy =
[-0.82707307]
E1 = -3.639479222732168  E_coul = 0.9926665421499139
Extra cycle  E= -2.64681268058225  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:16:03 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945524837        1
                                0.285965082733       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394552483712598, 1.0], [0.28596508273330684, 1.0]]]}
ecp = {}
CPU time:       102.95
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130684903964863  E_coul = 0.978311782215655
init E= -2.63475670818083
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427659]
E1 = -3.639479222732168  E_coul = 0.9926665421499139
cycle= 1 E= -2.64681268058225  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
  mo_energy =
[-0.82707307]
E1 = -3.639479222732168  E_coul = 0.9926665421499139
cycle= 2 E= -2.64681268058225  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.639479222732168  E_coul = 0.9926665421499139
  mo_energy =
[-0.82707307]
E1 = -3.639479222732168  E_coul = 0.9926665421499139
Extra cycle  E= -2.64681268058225  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.639479222732168  E_coul = 0.9926665421499139
init E= -2.64681268058225
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82707307]
E1 = -3.639479222732168  E_coul = 0.9926665421499139
cycle= 1 E= -2.64681268058225  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.639479222732168  E_coul = 0.9926665421499139
  mo_energy =
[-0.82707307]
E1 = -3.639479222732168  E_coul = 0.9926665421499139
Extra cycle  E= -2.64681268058225  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:16:05 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945526333        1
                                0.285965058283       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394552633323073, 1.0], [0.28596505828317137, 1.0]]]}
ecp = {}
CPU time:       105.05
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.613068471821387  E_coul = 0.978311764875207
init E= -2.63475670694618
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427659]
E1 = -3.639479206224668  E_coul = 0.9926665257569712
cycle= 1 E= -2.6468126804677  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707308]
E1 = -3.639479206224668  E_coul = 0.9926665257569712
cycle= 2 E= -2.6468126804677  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.639479206224668  E_coul = 0.9926665257569712
  mo_energy =
[-0.82707308]
E1 = -3.639479206224668  E_coul = 0.9926665257569712
Extra cycle  E= -2.6468126804677  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:16:05 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945526333        1
                                0.285965058283       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394552633323073, 1.0], [0.28596505828317137, 1.0]]]}
ecp = {}
CPU time:       105.70
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.613068471821387  E_coul = 0.978311764875207
init E= -2.63475670694618
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427659]
E1 = -3.639479206224668  E_coul = 0.9926665257569712
cycle= 1 E= -2.6468126804677  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707308]
E1 = -3.639479206224668  E_coul = 0.9926665257569712
cycle= 2 E= -2.6468126804677  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.639479206224668  E_coul = 0.9926665257569712
  mo_energy =
[-0.82707308]
E1 = -3.639479206224668  E_coul = 0.9926665257569712
Extra cycle  E= -2.6468126804677  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.639479206224668  E_coul = 0.9926665257569712
init E= -2.6468126804677
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82707308]
E1 = -3.639479206224668  E_coul = 0.9926665257569712
cycle= 1 E= -2.6468126804677  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.639479206224668  E_coul = 0.9926665257569712
  mo_energy =
[-0.82707308]
E1 = -3.639479206224668  E_coul = 0.9926665257569712
Extra cycle  E= -2.6468126804677  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:16:07 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.75266105958        1
                                0.253787725793       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7526610595750645, 1.0], [0.2537877257932023, 1.0]]]}
ecp = {}
CPU time:       107.70
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.5758861144585414  E_coul = 0.9501291673385586
init E= -2.62575694711998
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.84596838]
E1 = -3.610690416973555  E_coul = 0.9687144975768528
cycle= 1 E= -2.6419759193967  delta_E= -0.0162  |g|=    0  |ddm|= 0.0193
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.83663071]
E1 = -3.610690416973555  E_coul = 0.9687144975768528
cycle= 2 E= -2.6419759193967  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.610690416973555  E_coul = 0.9687144975768528
  mo_energy =
[-0.83663071]
E1 = -3.610690416973555  E_coul = 0.9687144975768528
Extra cycle  E= -2.6419759193967  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:16:08 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.75266105958        1
                                0.253787725793       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7526610595750645, 1.0], [0.2537877257932023, 1.0]]]}
ecp = {}
CPU time:       108.36
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.5758861144585414  E_coul = 0.9501291673385586
init E= -2.62575694711998
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.84596838]
E1 = -3.610690416973555  E_coul = 0.9687144975768528
cycle= 1 E= -2.6419759193967  delta_E= -0.0162  |g|=    0  |ddm|= 0.0193
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.83663071]
E1 = -3.610690416973555  E_coul = 0.9687144975768528
cycle= 2 E= -2.6419759193967  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.610690416973555  E_coul = 0.9687144975768528
  mo_energy =
[-0.83663071]
E1 = -3.610690416973555  E_coul = 0.9687144975768528
Extra cycle  E= -2.6419759193967  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.610690416973555  E_coul = 0.9687144975768528
init E= -2.6419759193967
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.83663071]
E1 = -3.610690416973555  E_coul = 0.9687144975768528
cycle= 1 E= -2.6419759193967  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.610690416973555  E_coul = 0.9687144975768528
  mo_energy =
[-0.83663071]
E1 = -3.610690416973555  E_coul = 0.9687144975768528
Extra cycle  E= -2.6419759193967  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:16:10 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.74605815364        1
                                0.269876411081       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7460581536383157, 1.0], [0.26987641108116994, 1.0]]]}
ecp = {}
CPU time:       110.39
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.5974320190784868  E_coul = 0.9653333006055203
init E= -2.63209871847297
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.84013487]
E1 = -3.626578841686206  E_coul = 0.9810391599772731
cycle= 1 E= -2.64553968170893  delta_E= -0.0134  |g|=    0  |ddm|= 0.0161
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.83225026]
E1 = -3.626578841686206  E_coul = 0.9810391599772731
cycle= 2 E= -2.64553968170893  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.626578841686206  E_coul = 0.9810391599772731
  mo_energy =
[-0.83225026]
E1 = -3.626578841686206  E_coul = 0.9810391599772731
Extra cycle  E= -2.64553968170893  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:16:11 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.74605815364        1
                                0.269876411081       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7460581536383157, 1.0], [0.26987641108116994, 1.0]]]}
ecp = {}
CPU time:       111.06
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.5974320190784868  E_coul = 0.9653333006055203
init E= -2.63209871847297
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.84013487]
E1 = -3.626578841686206  E_coul = 0.9810391599772731
cycle= 1 E= -2.64553968170893  delta_E= -0.0134  |g|=    0  |ddm|= 0.0161
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.83225026]
E1 = -3.626578841686206  E_coul = 0.9810391599772731
cycle= 2 E= -2.64553968170893  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.626578841686206  E_coul = 0.9810391599772731
  mo_energy =
[-0.83225026]
E1 = -3.626578841686206  E_coul = 0.9810391599772731
Extra cycle  E= -2.64553968170893  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.626578841686206  E_coul = 0.9810391599772731
init E= -2.64553968170893
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.83225026]
E1 = -3.626578841686206  E_coul = 0.9810391599772731
cycle= 1 E= -2.64553968170893  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.626578841686206  E_coul = 0.9810391599772731
  mo_energy =
[-0.83225026]
E1 = -3.626578841686206  E_coul = 0.9810391599772731
Extra cycle  E= -2.64553968170893  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.06 sec, wall time      0.06 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:16:13 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.74275670067        1
                                0.277920753725       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7427567006699416, 1.0], [0.27792075372515374, 1.0]]]}
ecp = {}
CPU time:       113.13
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.605935581619671  E_coul = 0.9720830068143957
init E= -2.63385257480528
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83720826]
E1 = -3.633378666219856  E_coul = 0.9869354457942958
cycle= 1 E= -2.64644322042556  delta_E= -0.0126  |g|=    0  |ddm|= 0.0151
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82975389]
E1 = -3.633378666219856  E_coul = 0.9869354457942958
cycle= 2 E= -2.64644322042556  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.633378666219856  E_coul = 0.9869354457942958
  mo_energy =
[-0.82975389]
E1 = -3.633378666219856  E_coul = 0.9869354457942958
Extra cycle  E= -2.64644322042556  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:16:14 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.74275670067        1
                                0.277920753725       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7427567006699416, 1.0], [0.27792075372515374, 1.0]]]}
ecp = {}
CPU time:       113.82
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.605935581619671  E_coul = 0.9720830068143957
init E= -2.63385257480528
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83720826]
E1 = -3.633378666219856  E_coul = 0.9869354457942958
cycle= 1 E= -2.64644322042556  delta_E= -0.0126  |g|=    0  |ddm|= 0.0151
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82975389]
E1 = -3.633378666219856  E_coul = 0.9869354457942958
cycle= 2 E= -2.64644322042556  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.633378666219856  E_coul = 0.9869354457942958
  mo_energy =
[-0.82975389]
E1 = -3.633378666219856  E_coul = 0.9869354457942958
Extra cycle  E= -2.64644322042556  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.633378666219856  E_coul = 0.9869354457942958
init E= -2.64644322042556
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82975389]
E1 = -3.633378666219856  E_coul = 0.9869354457942958
cycle= 1 E= -2.64644322042556  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -3.633378666219856  E_coul = 0.9869354457942958
  mo_energy =
[-0.82975389]
E1 = -3.633378666219856  E_coul = 0.9869354457942958
Extra cycle  E= -2.64644322042556  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:16:16 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.74110597419        1
                                0.281942925047       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7411059741857544, 1.0], [0.28194292504714563, 1.0]]]}
ecp = {}
CPU time:       115.95
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6096671331594963  E_coul = 0.9752604197724248
init E= -2.63440671338707
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83574299]
E1 = -3.636513565541211  E_coul = 0.9898211122359516
cycle= 1 E= -2.64669245330526  delta_E= -0.0123  |g|=    0  |ddm|= 0.0148
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82843567]
E1 = -3.636513565541211  E_coul = 0.9898211122359516
cycle= 2 E= -2.64669245330526  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.636513565541211  E_coul = 0.9898211122359516
  mo_energy =
[-0.82843567]
E1 = -3.636513565541211  E_coul = 0.9898211122359516
Extra cycle  E= -2.64669245330526  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:16:16 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.74110597419        1
                                0.281942925047       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7411059741857544, 1.0], [0.28194292504714563, 1.0]]]}
ecp = {}
CPU time:       116.63
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6096671331594963  E_coul = 0.9752604197724248
init E= -2.63440671338707
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83574299]
E1 = -3.636513565541211  E_coul = 0.9898211122359516
cycle= 1 E= -2.64669245330526  delta_E= -0.0123  |g|=    0  |ddm|= 0.0148
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82843567]
E1 = -3.636513565541211  E_coul = 0.9898211122359516
cycle= 2 E= -2.64669245330526  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.636513565541211  E_coul = 0.9898211122359516
  mo_energy =
[-0.82843567]
E1 = -3.636513565541211  E_coul = 0.9898211122359516
Extra cycle  E= -2.64669245330526  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.636513565541211  E_coul = 0.9898211122359516
init E= -2.64669245330526
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82843567]
E1 = -3.636513565541211  E_coul = 0.9898211122359516
cycle= 1 E= -2.64669245330526  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.636513565541211  E_coul = 0.9898211122359516
  mo_energy =
[-0.82843567]
E1 = -3.636513565541211  E_coul = 0.9898211122359516
Extra cycle  E= -2.64669245330526  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.06 sec, wall time      0.06 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:16:18 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.74028061094        1
                                0.283954010708       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.740280610943661, 1.0], [0.2839540107081416, 1.0]]]}
ecp = {}
CPU time:       118.64
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6114083359272433  E_coul = 0.9768016068489578
init E= -2.63460672907829
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83500992]
E1 = -3.6380172157083073  E_coul = 0.9912487959923306
cycle= 1 E= -2.64676841971598  delta_E= -0.0122  |g|=    0  |ddm|= 0.0146
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82775981]
E1 = -3.6380172157083073  E_coul = 0.9912487959923306
cycle= 2 E= -2.64676841971598  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6380172157083073  E_coul = 0.9912487959923306
  mo_energy =
[-0.82775981]
E1 = -3.6380172157083073  E_coul = 0.9912487959923306
Extra cycle  E= -2.64676841971598  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:16:19 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.74028061094        1
                                0.283954010708       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.740280610943661, 1.0], [0.2839540107081416, 1.0]]]}
ecp = {}
CPU time:       119.33
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6114083359272433  E_coul = 0.9768016068489578
init E= -2.63460672907829
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83500992]
E1 = -3.6380172157083073  E_coul = 0.9912487959923306
cycle= 1 E= -2.64676841971598  delta_E= -0.0122  |g|=    0  |ddm|= 0.0146
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
  mo_energy =
[-0.82775981]
E1 = -3.6380172157083073  E_coul = 0.9912487959923306
cycle= 2 E= -2.64676841971598  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6380172157083073  E_coul = 0.9912487959923306
  mo_energy =
[-0.82775981]
E1 = -3.6380172157083073  E_coul = 0.9912487959923306
Extra cycle  E= -2.64676841971598  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6380172157083073  E_coul = 0.9912487959923306
init E= -2.64676841971598
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82775981]
E1 = -3.6380172157083073  E_coul = 0.9912487959923306
cycle= 1 E= -2.64676841971598  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.6380172157083073  E_coul = 0.9912487959923306
  mo_energy =
[-0.82775981]
E1 = -3.6380172157083073  E_coul = 0.9912487959923306
Extra cycle  E= -2.64676841971598  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.06 sec, wall time      0.06 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:16:21 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73986792932        1
                                0.284959553539       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7398679293226142, 1.0], [0.28495955353863955, 1.0]]]}
ecp = {}
CPU time:       121.40
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6122484559304606  E_coul = 0.9775605437350561
init E= -2.6346879121954
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83464328]
E1 = -3.638753387116572  E_coul = 0.9919589072042669
cycle= 1 E= -2.64679447991231  delta_E= -0.0121  |g|=    0  |ddm|= 0.0146
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82741779]
E1 = -3.638753387116572  E_coul = 0.9919589072042669
cycle= 2 E= -2.64679447991231  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.638753387116572  E_coul = 0.9919589072042669
  mo_energy =
[-0.82741779]
E1 = -3.638753387116572  E_coul = 0.9919589072042669
Extra cycle  E= -2.64679447991231  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:16:22 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73986792932        1
                                0.284959553539       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7398679293226142, 1.0], [0.28495955353863955, 1.0]]]}
ecp = {}
CPU time:       122.10
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6122484559304606  E_coul = 0.9775605437350561
init E= -2.6346879121954
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83464328]
E1 = -3.638753387116572  E_coul = 0.9919589072042669
cycle= 1 E= -2.64679447991231  delta_E= -0.0121  |g|=    0  |ddm|= 0.0146
    CPU time for cycle= 1      0.00 sec, wall time      0.01 sec
  mo_energy =
[-0.82741779]
E1 = -3.638753387116572  E_coul = 0.9919589072042669
cycle= 2 E= -2.64679447991231  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.638753387116572  E_coul = 0.9919589072042669
  mo_energy =
[-0.82741779]
E1 = -3.638753387116572  E_coul = 0.9919589072042669
Extra cycle  E= -2.64679447991231  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.638753387116572  E_coul = 0.9919589072042669
init E= -2.64679447991231
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82741779]
E1 = -3.638753387116572  E_coul = 0.9919589072042669
cycle= 1 E= -2.64679447991231  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.638753387116572  E_coul = 0.9919589072042669
  mo_energy =
[-0.82741779]
E1 = -3.638753387116572  E_coul = 0.9919589072042669
Extra cycle  E= -2.64679447991231  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:16:24 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73966158851        1
                                0.285462324954       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7396615885120907, 1.0], [0.28546232495388857, 1.0]]]}
ecp = {}
CPU time:       124.15
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.612660976888567  E_coul = 0.9779371254952736
init E= -2.63472385139329
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83445994]
E1 = -3.639117595793332  E_coul = 0.9923130371104072
cycle= 1 E= -2.64680455868293  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82724576]
E1 = -3.639117595793332  E_coul = 0.9923130371104072
cycle= 2 E= -2.64680455868293  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.639117595793332  E_coul = 0.9923130371104072
  mo_energy =
[-0.82724576]
E1 = -3.639117595793332  E_coul = 0.9923130371104072
Extra cycle  E= -2.64680455868293  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:16:25 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73966158851        1
                                0.285462324954       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7396615885120907, 1.0], [0.28546232495388857, 1.0]]]}
ecp = {}
CPU time:       124.84
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.612660976888567  E_coul = 0.9779371254952736
init E= -2.63472385139329
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83445994]
E1 = -3.639117595793332  E_coul = 0.9923130371104072
cycle= 1 E= -2.64680455868293  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82724576]
E1 = -3.639117595793332  E_coul = 0.9923130371104072
cycle= 2 E= -2.64680455868293  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.639117595793332  E_coul = 0.9923130371104072
  mo_energy =
[-0.82724576]
E1 = -3.639117595793332  E_coul = 0.9923130371104072
Extra cycle  E= -2.64680455868293  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.639117595793332  E_coul = 0.9923130371104072
init E= -2.64680455868293
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82724576]
E1 = -3.639117595793332  E_coul = 0.9923130371104072
cycle= 1 E= -2.64680455868293  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.639117595793332  E_coul = 0.9923130371104072
  mo_energy =
[-0.82724576]
E1 = -3.639117595793332  E_coul = 0.9923130371104072
Extra cycle  E= -2.64680455868293  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:16:27 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73955841811        1
                                0.285713710662       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.739558418106829, 1.0], [0.2857137106615131, 1.0]]]}
ecp = {}
CPU time:       126.89
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.612865362681411  E_coul = 0.9781246981138003
init E= -2.63474066456761
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83436826]
E1 = -3.6392987353849477  E_coul = 0.9924898715019573
cycle= 1 E= -2.64680886388299  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.8271595]
E1 = -3.6392987353849477  E_coul = 0.9924898715019573
cycle= 2 E= -2.64680886388299  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6392987353849477  E_coul = 0.9924898715019573
  mo_energy =
[-0.8271595]
E1 = -3.6392987353849477  E_coul = 0.9924898715019573
Extra cycle  E= -2.64680886388299  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:16:28 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73955841811        1
                                0.285713710662       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.739558418106829, 1.0], [0.2857137106615131, 1.0]]]}
ecp = {}
CPU time:       127.60
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.612865362681411  E_coul = 0.9781246981138003
init E= -2.63474066456761
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83436826]
E1 = -3.6392987353849477  E_coul = 0.9924898715019573
cycle= 1 E= -2.64680886388299  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.8271595]
E1 = -3.6392987353849477  E_coul = 0.9924898715019573
cycle= 2 E= -2.64680886388299  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6392987353849477  E_coul = 0.9924898715019573
  mo_energy =
[-0.8271595]
E1 = -3.6392987353849477  E_coul = 0.9924898715019573
Extra cycle  E= -2.64680886388299  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6392987353849477  E_coul = 0.9924898715019573
init E= -2.64680886388299
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.8271595]
E1 = -3.6392987353849477  E_coul = 0.9924898715019573
cycle= 1 E= -2.64680886388299  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.6392987353849477  E_coul = 0.9924898715019573
  mo_energy =
[-0.8271595]
E1 = -3.6392987353849477  E_coul = 0.9924898715019573
Extra cycle  E= -2.64680886388299  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:16:30 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.7395068329         1
                                0.285839403515       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.739506832904198, 1.0], [0.28583940351532533, 1.0]]]}
ecp = {}
CPU time:       129.74
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.612967088160158  E_coul = 0.9782183052822007
init E= -2.63474878287796
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83432242]
E1 = -3.639389064555419  E_coul = 0.9925782311648236
cycle= 1 E= -2.6468108333906  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.8271163]
E1 = -3.639389064555419  E_coul = 0.9925782311648236
cycle= 2 E= -2.6468108333906  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.639389064555419  E_coul = 0.9925782311648236
  mo_energy =
[-0.8271163]
E1 = -3.639389064555419  E_coul = 0.9925782311648236
Extra cycle  E= -2.6468108333906  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:16:30 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.7395068329         1
                                0.285839403515       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.739506832904198, 1.0], [0.28583940351532533, 1.0]]]}
ecp = {}
CPU time:       130.49
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.612967088160158  E_coul = 0.9782183052822007
init E= -2.63474878287796
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83432242]
E1 = -3.639389064555419  E_coul = 0.9925782311648236
cycle= 1 E= -2.6468108333906  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.8271163]
E1 = -3.639389064555419  E_coul = 0.9925782311648236
cycle= 2 E= -2.6468108333906  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.639389064555419  E_coul = 0.9925782311648236
  mo_energy =
[-0.8271163]
E1 = -3.639389064555419  E_coul = 0.9925782311648236
Extra cycle  E= -2.6468108333906  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.639389064555419  E_coul = 0.9925782311648236
init E= -2.6468108333906
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.8271163]
E1 = -3.639389064555419  E_coul = 0.9925782311648236
cycle= 1 E= -2.6468108333906  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.639389064555419  E_coul = 0.9925782311648236
  mo_energy =
[-0.8271163]
E1 = -3.639389064555419  E_coul = 0.9925782311648236
Extra cycle  E= -2.6468108333906  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:16:33 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.7394810403         1
                                0.285902249942       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394810403028829, 1.0], [0.28590224994223146, 1.0]]]}
ecp = {}
CPU time:       132.71
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.613017834201502  E_coul = 0.9782650641341495
init E= -2.63475277006735
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.8342995]
E1 = -3.6394341690543364  E_coul = 0.9926223966264339
cycle= 1 E= -2.6468117724279  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82709469]
E1 = -3.6394341690543364  E_coul = 0.9926223966264339
cycle= 2 E= -2.6468117724279  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6394341690543364  E_coul = 0.9926223966264339
  mo_energy =
[-0.82709469]
E1 = -3.6394341690543364  E_coul = 0.9926223966264339
Extra cycle  E= -2.6468117724279  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:16:33 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.7394810403         1
                                0.285902249942       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394810403028829, 1.0], [0.28590224994223146, 1.0]]]}
ecp = {}
CPU time:       133.46
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.613017834201502  E_coul = 0.9782650641341495
init E= -2.63475277006735
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.8342995]
E1 = -3.6394341690543364  E_coul = 0.9926223966264339
cycle= 1 E= -2.6468117724279  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82709469]
E1 = -3.6394341690543364  E_coul = 0.9926223966264339
cycle= 2 E= -2.6468117724279  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6394341690543364  E_coul = 0.9926223966264339
  mo_energy =
[-0.82709469]
E1 = -3.6394341690543364  E_coul = 0.9926223966264339
Extra cycle  E= -2.6468117724279  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6394341690543364  E_coul = 0.9926223966264339
init E= -2.6468117724279
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82709469]
E1 = -3.6394341690543364  E_coul = 0.9926223966264339
cycle= 1 E= -2.6468117724279  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -3.6394341690543364  E_coul = 0.9926223966264339
  mo_energy =
[-0.82709469]
E1 = -3.6394341690543364  E_coul = 0.9926223966264339
Extra cycle  E= -2.6468117724279  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:16:36 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.739468144          1
                                0.285933673156       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394681440022253, 1.0], [0.2859336731556845, 1.0]]]}
ecp = {}
CPU time:       135.69
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130431780671994  E_coul = 0.9782884323836767
init E= -2.63475474568352
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83428804]
E1 = -3.6394567062909617  E_coul = 0.9926444757664578
cycle= 1 E= -2.6468122305245  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82708388]
E1 = -3.6394567062909617  E_coul = 0.9926444757664578
cycle= 2 E= -2.6468122305245  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6394567062909617  E_coul = 0.9926444757664578
  mo_energy =
[-0.82708388]
E1 = -3.6394567062909617  E_coul = 0.9926444757664578
Extra cycle  E= -2.6468122305245  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:16:36 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.739468144          1
                                0.285933673156       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394681440022253, 1.0], [0.2859336731556845, 1.0]]]}
ecp = {}
CPU time:       136.45
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130431780671994  E_coul = 0.9782884323836767
init E= -2.63475474568352
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83428804]
E1 = -3.6394567062909617  E_coul = 0.9926444757664578
cycle= 1 E= -2.6468122305245  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82708388]
E1 = -3.6394567062909617  E_coul = 0.9926444757664578
cycle= 2 E= -2.6468122305245  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6394567062909617  E_coul = 0.9926444757664578
  mo_energy =
[-0.82708388]
E1 = -3.6394567062909617  E_coul = 0.9926444757664578
Extra cycle  E= -2.6468122305245  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6394567062909617  E_coul = 0.9926444757664578
init E= -2.6468122305245
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82708388]
E1 = -3.6394567062909617  E_coul = 0.9926444757664578
cycle= 1 E= -2.6468122305245  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.6394567062909617  E_coul = 0.9926444757664578
  mo_energy =
[-0.82708388]
E1 = -3.6394567062909617  E_coul = 0.9926444757664578
Extra cycle  E= -2.6468122305245  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:16:39 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73946169585        1
                                0.285949384762       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394616958518963, 1.0], [0.28594938476241105, 1.0]]]}
ecp = {}
CPU time:       138.57
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.613055842713739  E_coul = 0.9783001137151531
init E= -2.63475572899859
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83428231]
E1 = -3.6394679711571554  E_coul = 0.9926555144389828
cycle= 1 E= -2.64681245671817  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707847]
E1 = -3.6394679711571554  E_coul = 0.9926555144389828
cycle= 2 E= -2.64681245671817  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6394679711571554  E_coul = 0.9926555144389828
  mo_energy =
[-0.82707847]
E1 = -3.6394679711571554  E_coul = 0.9926555144389828
Extra cycle  E= -2.64681245671817  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:16:39 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73946169585        1
                                0.285949384762       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394616958518963, 1.0], [0.28594938476241105, 1.0]]]}
ecp = {}
CPU time:       139.34
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.613055842713739  E_coul = 0.9783001137151531
init E= -2.63475572899859
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83428231]
E1 = -3.6394679711571554  E_coul = 0.9926555144389828
cycle= 1 E= -2.64681245671817  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707847]
E1 = -3.6394679711571554  E_coul = 0.9926555144389828
cycle= 2 E= -2.64681245671817  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6394679711571554  E_coul = 0.9926555144389828
  mo_energy =
[-0.82707847]
E1 = -3.6394679711571554  E_coul = 0.9926555144389828
Extra cycle  E= -2.64681245671817  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6394679711571554  E_coul = 0.9926555144389828
init E= -2.64681245671817
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82707847]
E1 = -3.6394679711571554  E_coul = 0.9926555144389828
cycle= 1 E= -2.64681245671817  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.01 sec
E1 = -3.6394679711571554  E_coul = 0.9926555144389828
  mo_energy =
[-0.82707847]
E1 = -3.6394679711571554  E_coul = 0.9926555144389828
Extra cycle  E= -2.64681245671817  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:16:42 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945847178        1
                                0.285957240566       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394584717767319, 1.0], [0.28595724056577426, 1.0]]]}
ecp = {}
CPU time:       141.53
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130621732157424  E_coul = 0.9783059536826753
init E= -2.63475621953307
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427945]
E1 = -3.639473602652362  E_coul = 0.9926610335509005
cycle= 1 E= -2.64681256910146  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707577]
E1 = -3.639473602652362  E_coul = 0.9926610335509005
cycle= 2 E= -2.64681256910146  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.639473602652362  E_coul = 0.9926610335509005
  mo_energy =
[-0.82707577]
E1 = -3.639473602652362  E_coul = 0.9926610335509005
Extra cycle  E= -2.64681256910146  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:16:42 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945847178        1
                                0.285957240566       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394584717767319, 1.0], [0.28595724056577426, 1.0]]]}
ecp = {}
CPU time:       142.27
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130621732157424  E_coul = 0.9783059536826753
init E= -2.63475621953307
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427945]
E1 = -3.639473602652362  E_coul = 0.9926610335509005
cycle= 1 E= -2.64681256910146  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707577]
E1 = -3.639473602652362  E_coul = 0.9926610335509005
cycle= 2 E= -2.64681256910146  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.639473602652362  E_coul = 0.9926610335509005
  mo_energy =
[-0.82707577]
E1 = -3.639473602652362  E_coul = 0.9926610335509005
Extra cycle  E= -2.64681256910146  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.639473602652362  E_coul = 0.9926610335509005
init E= -2.64681256910146
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82707577]
E1 = -3.639473602652362  E_coul = 0.9926610335509005
cycle= 1 E= -2.64681256910146  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.639473602652362  E_coul = 0.9926610335509005
  mo_energy =
[-0.82707577]
E1 = -3.639473602652362  E_coul = 0.9926610335509005
Extra cycle  E= -2.64681256910146  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:16:45 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945685974        1
                                0.285961168467       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394568597391498, 1.0], [0.28596116846745595, 1.0]]]}
ecp = {}
CPU time:       144.59
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.613065338011461  E_coul = 0.9783088734918934
init E= -2.63475646451957
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427801]
E1 = -3.6394764181655077  E_coul = 0.9926637930507761
cycle= 1 E= -2.64681262511473  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707442]
E1 = -3.6394764181655077  E_coul = 0.9926637930507761
cycle= 2 E= -2.64681262511473  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6394764181655077  E_coul = 0.9926637930507761
  mo_energy =
[-0.82707442]
E1 = -3.6394764181655077  E_coul = 0.9926637930507761
Extra cycle  E= -2.64681262511473  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:16:45 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945685974        1
                                0.285961168467       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394568597391498, 1.0], [0.28596116846745595, 1.0]]]}
ecp = {}
CPU time:       145.35
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.613065338011461  E_coul = 0.9783088734918934
init E= -2.63475646451957
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427801]
E1 = -3.6394764181655077  E_coul = 0.9926637930507761
cycle= 1 E= -2.64681262511473  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707442]
E1 = -3.6394764181655077  E_coul = 0.9926637930507761
cycle= 2 E= -2.64681262511473  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6394764181655077  E_coul = 0.9926637930507761
  mo_energy =
[-0.82707442]
E1 = -3.6394764181655077  E_coul = 0.9926637930507761
Extra cycle  E= -2.64681262511473  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.03 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6394764181655077  E_coul = 0.9926637930507761
init E= -2.64681262511473
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82707442]
E1 = -3.6394764181655077  E_coul = 0.9926637930507761
cycle= 1 E= -2.64681262511473  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.6394764181655077  E_coul = 0.9926637930507761
  mo_energy =
[-0.82707442]
E1 = -3.6394764181655077  E_coul = 0.9926637930507761
Extra cycle  E= -2.64681262511473  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:16:48 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945605372        1
                                0.285963132418       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394560537203585, 1.0], [0.28596313241829674, 1.0]]]}
ecp = {}
CPU time:       147.44
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130669202955064  E_coul = 0.9783103333528695
init E= -2.63475658694264
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.8342773]
E1 = -3.639477825863469  E_coul = 0.9926651727866936
cycle= 1 E= -2.64681265307678  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707374]
E1 = -3.639477825863469  E_coul = 0.9926651727866936
cycle= 2 E= -2.64681265307678  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.639477825863469  E_coul = 0.9926651727866936
  mo_energy =
[-0.82707374]
E1 = -3.639477825863469  E_coul = 0.9926651727866936
Extra cycle  E= -2.64681265307678  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:16:48 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945605372        1
                                0.285963132418       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394560537203585, 1.0], [0.28596313241829674, 1.0]]]}
ecp = {}
CPU time:       148.20
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130669202955064  E_coul = 0.9783103333528695
init E= -2.63475658694264
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.8342773]
E1 = -3.639477825863469  E_coul = 0.9926651727866936
cycle= 1 E= -2.64681265307678  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707374]
E1 = -3.639477825863469  E_coul = 0.9926651727866936
cycle= 2 E= -2.64681265307678  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.639477825863469  E_coul = 0.9926651727866936
  mo_energy =
[-0.82707374]
E1 = -3.639477825863469  E_coul = 0.9926651727866936
Extra cycle  E= -2.64681265307678  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.639477825863469  E_coul = 0.9926651727866936
init E= -2.64681265307678
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82707374]
E1 = -3.639477825863469  E_coul = 0.9926651727866936
cycle= 1 E= -2.64681265307678  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.639477825863469  E_coul = 0.9926651727866936
  mo_energy =
[-0.82707374]
E1 = -3.639477825863469  E_coul = 0.9926651727866936
Extra cycle  E= -2.64681265307678  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:16:51 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945565071        1
                                0.285964114394       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394556507109629, 1.0], [0.28596411439371716, 1.0]]]}
ecp = {}
CPU time:       150.38
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.613067711409075  E_coul = 0.978311063272449
init E= -2.63475664813663
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427694]
E1 = -3.639478529697796  E_coul = 0.9926658626511471
cycle= 1 E= -2.64681266704665  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.8270734]
E1 = -3.639478529697796  E_coul = 0.9926658626511471
cycle= 2 E= -2.64681266704665  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.639478529697796  E_coul = 0.9926658626511471
  mo_energy =
[-0.8270734]
E1 = -3.639478529697796  E_coul = 0.9926658626511471
Extra cycle  E= -2.64681266704665  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.05 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:16:51 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945565071        1
                                0.285964114394       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394556507109629, 1.0], [0.28596411439371716, 1.0]]]}
ecp = {}
CPU time:       151.22
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.613067711409075  E_coul = 0.978311063272449
init E= -2.63475664813663
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427694]
E1 = -3.639478529697796  E_coul = 0.9926658626511471
cycle= 1 E= -2.64681266704665  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.8270734]
E1 = -3.639478529697796  E_coul = 0.9926658626511471
cycle= 2 E= -2.64681266704665  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.639478529697796  E_coul = 0.9926658626511471
  mo_energy =
[-0.8270734]
E1 = -3.639478529697796  E_coul = 0.9926658626511471
Extra cycle  E= -2.64681266704665  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.639478529697796  E_coul = 0.9926658626511471
init E= -2.64681266704665
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.8270734]
E1 = -3.639478529697796  E_coul = 0.9926658626511471
cycle= 1 E= -2.64681266704665  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.639478529697796  E_coul = 0.9926658626511471
  mo_energy =
[-0.8270734]
E1 = -3.639478529697796  E_coul = 0.9926658626511471
Extra cycle  E= -2.64681266704665  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:16:54 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945544921        1
                                0.285964605381       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394554492062653, 1.0], [0.2859646053814274, 1.0]]]}
ecp = {}
CPU time:       153.41
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130681069587487  E_coul = 0.978311428229512
init E= -2.63475667872924
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427676]
E1 = -3.6394788816112995  E_coul = 0.9926662075824981
cycle= 1 E= -2.6468126740288  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.00 sec, wall time      0.01 sec
  mo_energy =
[-0.82707323]
E1 = -3.6394788816112995  E_coul = 0.9926662075824981
cycle= 2 E= -2.6468126740288  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6394788816112995  E_coul = 0.9926662075824981
  mo_energy =
[-0.82707323]
E1 = -3.6394788816112995  E_coul = 0.9926662075824981
Extra cycle  E= -2.6468126740288  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:16:54 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945544921        1
                                0.285964605381       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394554492062653, 1.0], [0.2859646053814274, 1.0]]]}
ecp = {}
CPU time:       154.20
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130681069587487  E_coul = 0.978311428229512
init E= -2.63475667872924
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427676]
E1 = -3.6394788816112995  E_coul = 0.9926662075824981
cycle= 1 E= -2.6468126740288  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707323]
E1 = -3.6394788816112995  E_coul = 0.9926662075824981
cycle= 2 E= -2.6468126740288  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6394788816112995  E_coul = 0.9926662075824981
  mo_energy =
[-0.82707323]
E1 = -3.6394788816112995  E_coul = 0.9926662075824981
Extra cycle  E= -2.6468126740288  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6394788816112995  E_coul = 0.9926662075824981
init E= -2.6468126740288
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82707323]
E1 = -3.6394788816112995  E_coul = 0.9926662075824981
cycle= 1 E= -2.6468126740288  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.6394788816112995  E_coul = 0.9926662075824981
  mo_energy =
[-0.82707323]
E1 = -3.6394788816112995  E_coul = 0.9926662075824981
Extra cycle  E= -2.6468126740288  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:16:57 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945534845        1
                                0.285964850875       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394553484539161, 1.0], [0.28596485087528245, 1.0]]]}
ecp = {}
CPU time:       156.42
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130683047318017  E_coul = 0.9783116107073597
init E= -2.63475669402444
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427667]
E1 = -3.639479057567131  E_coul = 0.9926663800479534
cycle= 1 E= -2.64681267751918  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707315]
E1 = -3.639479057567131  E_coul = 0.9926663800479534
cycle= 2 E= -2.64681267751918  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.639479057567131  E_coul = 0.9926663800479534
  mo_energy =
[-0.82707315]
E1 = -3.639479057567131  E_coul = 0.9926663800479534
Extra cycle  E= -2.64681267751918  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:16:57 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945534845        1
                                0.285964850875       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394553484539161, 1.0], [0.28596485087528245, 1.0]]]}
ecp = {}
CPU time:       157.25
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130683047318017  E_coul = 0.9783116107073597
init E= -2.63475669402444
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427667]
E1 = -3.639479057567131  E_coul = 0.9926663800479534
cycle= 1 E= -2.64681267751918  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707315]
E1 = -3.639479057567131  E_coul = 0.9926663800479534
cycle= 2 E= -2.64681267751918  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.639479057567131  E_coul = 0.9926663800479534
  mo_energy =
[-0.82707315]
E1 = -3.639479057567131  E_coul = 0.9926663800479534
Extra cycle  E= -2.64681267751918  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.639479057567131  E_coul = 0.9926663800479534
init E= -2.64681267751918
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82707315]
E1 = -3.639479057567131  E_coul = 0.9926663800479534
cycle= 1 E= -2.64681267751918  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.639479057567131  E_coul = 0.9926663800479534
  mo_energy =
[-0.82707315]
E1 = -3.639479057567131  E_coul = 0.9926663800479534
Extra cycle  E= -2.64681267751918  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:17:00 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945529808        1
                                0.285964973622       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394552980777418, 1.0], [0.28596497362220996, 1.0]]]}
ecp = {}
CPU time:       159.49
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130684036178886  E_coul = 0.9783117019461158
init E= -2.63475670167177
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427663]
E1 = -3.639479145544821  E_coul = 0.9926664662806277
cycle= 1 E= -2.64681267926419  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707311]
E1 = -3.639479145544821  E_coul = 0.9926664662806277
cycle= 2 E= -2.64681267926419  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.639479145544821  E_coul = 0.9926664662806277
  mo_energy =
[-0.82707311]
E1 = -3.639479145544821  E_coul = 0.9926664662806277
Extra cycle  E= -2.64681267926419  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:17:01 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945529808        1
                                0.285964973622       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394552980777418, 1.0], [0.28596497362220996, 1.0]]]}
ecp = {}
CPU time:       160.32
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130684036178886  E_coul = 0.9783117019461158
init E= -2.63475670167177
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427663]
E1 = -3.639479145544821  E_coul = 0.9926664662806277
cycle= 1 E= -2.64681267926419  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707311]
E1 = -3.639479145544821  E_coul = 0.9926664662806277
cycle= 2 E= -2.64681267926419  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.639479145544821  E_coul = 0.9926664662806277
  mo_energy =
[-0.82707311]
E1 = -3.639479145544821  E_coul = 0.9926664662806277
Extra cycle  E= -2.64681267926419  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.639479145544821  E_coul = 0.9926664662806277
init E= -2.64681267926419
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82707311]
E1 = -3.639479145544821  E_coul = 0.9926664662806277
cycle= 1 E= -2.64681267926419  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.639479145544821  E_coul = 0.9926664662806277
  mo_energy =
[-0.82707311]
E1 = -3.639479145544821  E_coul = 0.9926664662806277
Extra cycle  E= -2.64681267926419  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:17:03 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945527289        1
                                0.285965034996       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394552728896546, 1.0], [0.2859650349956738, 1.0]]]}
ecp = {}
CPU time:       162.62
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.613068453060818  E_coul = 0.9783117475654495
init E= -2.63475670549537
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.8342766]
E1 = -3.6394791895336076  E_coul = 0.9926665093969503
cycle= 1 E= -2.64681268013666  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
  mo_energy =
[-0.82707309]
E1 = -3.6394791895336076  E_coul = 0.9926665093969503
cycle= 2 E= -2.64681268013666  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6394791895336076  E_coul = 0.9926665093969503
  mo_energy =
[-0.82707309]
E1 = -3.6394791895336076  E_coul = 0.9926665093969503
Extra cycle  E= -2.64681268013666  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:17:04 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945527289        1
                                0.285965034996       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394552728896546, 1.0], [0.2859650349956738, 1.0]]]}
ecp = {}
CPU time:       163.44
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.613068453060818  E_coul = 0.9783117475654495
init E= -2.63475670549537
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.8342766]
E1 = -3.6394791895336076  E_coul = 0.9926665093969503
cycle= 1 E= -2.64681268013666  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707309]
E1 = -3.6394791895336076  E_coul = 0.9926665093969503
cycle= 2 E= -2.64681268013666  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6394791895336076  E_coul = 0.9926665093969503
  mo_energy =
[-0.82707309]
E1 = -3.6394791895336076  E_coul = 0.9926665093969503
Extra cycle  E= -2.64681268013666  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6394791895336076  E_coul = 0.9926665093969503
init E= -2.64681268013666
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82707309]
E1 = -3.6394791895336076  E_coul = 0.9926665093969503
cycle= 1 E= -2.64681268013666  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.6394791895336076  E_coul = 0.9926665093969503
  mo_energy =
[-0.82707309]
E1 = -3.6394791895336076  E_coul = 0.9926665093969503
Extra cycle  E= -2.64681268013666  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:17:06 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.7394552603         1
                                0.285965065682       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.739455260295611, 1.0], [0.2859650656824057, 1.0]]]}
ecp = {}
CPU time:       165.64
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130684777822544  E_coul = 0.9783117703751059
init E= -2.63475670740715
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427659]
E1 = -3.639479211527986  E_coul = 0.9926665309551084
cycle= 1 E= -2.64681268057288  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707307]
E1 = -3.639479211527986  E_coul = 0.9926665309551084
cycle= 2 E= -2.64681268057288  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.639479211527986  E_coul = 0.9926665309551084
  mo_energy =
[-0.82707307]
E1 = -3.639479211527986  E_coul = 0.9926665309551084
Extra cycle  E= -2.64681268057288  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:17:07 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.7394552603         1
                                0.285965065682       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.739455260295611, 1.0], [0.2859650656824057, 1.0]]]}
ecp = {}
CPU time:       166.47
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130684777822544  E_coul = 0.9783117703751059
init E= -2.63475670740715
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427659]
E1 = -3.639479211527986  E_coul = 0.9926665309551084
cycle= 1 E= -2.64681268057288  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707307]
E1 = -3.639479211527986  E_coul = 0.9926665309551084
cycle= 2 E= -2.64681268057288  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.639479211527986  E_coul = 0.9926665309551084
  mo_energy =
[-0.82707307]
E1 = -3.639479211527986  E_coul = 0.9926665309551084
Extra cycle  E= -2.64681268057288  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.05 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.639479211527986  E_coul = 0.9926665309551084
init E= -2.64681268057288
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82707307]
E1 = -3.639479211527986  E_coul = 0.9926665309551084
cycle= 1 E= -2.64681268057288  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -3.639479211527986  E_coul = 0.9926665309551084
  mo_energy =
[-0.82707307]
E1 = -3.639479211527986  E_coul = 0.9926665309551084
Extra cycle  E= -2.64681268057288  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:17:09 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.739455254          1
                                0.285965081026       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.739455253998589, 1.0], [0.2859650810257716, 1.0]]]}
ecp = {}
CPU time:       168.66
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130684901429695  E_coul = 0.9783117817799324
init E= -2.63475670836304
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427659]
E1 = -3.639479222525174  E_coul = 0.9926665417341868
cycle= 1 E= -2.64681268079099  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707307]
E1 = -3.639479222525174  E_coul = 0.9926665417341868
cycle= 2 E= -2.64681268079099  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.639479222525174  E_coul = 0.9926665417341868
  mo_energy =
[-0.82707307]
E1 = -3.639479222525174  E_coul = 0.9926665417341868
Extra cycle  E= -2.64681268079099  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:17:10 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.739455254          1
                                0.285965081026       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.739455253998589, 1.0], [0.2859650810257716, 1.0]]]}
ecp = {}
CPU time:       169.49
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130684901429695  E_coul = 0.9783117817799324
init E= -2.63475670836304
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427659]
E1 = -3.639479222525174  E_coul = 0.9926665417341868
cycle= 1 E= -2.64681268079099  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707307]
E1 = -3.639479222525174  E_coul = 0.9926665417341868
cycle= 2 E= -2.64681268079099  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.639479222525174  E_coul = 0.9926665417341868
  mo_energy =
[-0.82707307]
E1 = -3.639479222525174  E_coul = 0.9926665417341868
Extra cycle  E= -2.64681268079099  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.639479222525174  E_coul = 0.9926665417341868
init E= -2.64681268079099
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82707307]
E1 = -3.639479222525174  E_coul = 0.9926665417341868
cycle= 1 E= -2.64681268079099  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.639479222525174  E_coul = 0.9926665417341868
  mo_energy =
[-0.82707307]
E1 = -3.639479222525174  E_coul = 0.9926665417341868
Extra cycle  E= -2.64681268079099  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:17:12 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945525085        1
                                0.285965088697       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394552508500782, 1.0], [0.2859650886974546, 1.0]]]}
ecp = {}
CPU time:       171.70
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.613068496323324  E_coul = 0.9783117874823445
init E= -2.63475670884098
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427658]
E1 = -3.6394792280237658  E_coul = 0.9926665471237253
cycle= 1 E= -2.64681268090004  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707307]
E1 = -3.6394792280237658  E_coul = 0.9926665471237253
cycle= 2 E= -2.64681268090004  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6394792280237658  E_coul = 0.9926665471237253
  mo_energy =
[-0.82707307]
E1 = -3.6394792280237658  E_coul = 0.9926665471237253
Extra cycle  E= -2.64681268090004  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:17:13 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945525085        1
                                0.285965088697       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394552508500782, 1.0], [0.2859650886974546, 1.0]]]}
ecp = {}
CPU time:       172.55
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.613068496323324  E_coul = 0.9783117874823445
init E= -2.63475670884098
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427658]
E1 = -3.6394792280237658  E_coul = 0.9926665471237253
cycle= 1 E= -2.64681268090004  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707307]
E1 = -3.6394792280237658  E_coul = 0.9926665471237253
cycle= 2 E= -2.64681268090004  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6394792280237658  E_coul = 0.9926665471237253
  mo_energy =
[-0.82707307]
E1 = -3.6394792280237658  E_coul = 0.9926665471237253
Extra cycle  E= -2.64681268090004  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6394792280237658  E_coul = 0.9926665471237253
init E= -2.64681268090004
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82707307]
E1 = -3.6394792280237658  E_coul = 0.9926665471237253
cycle= 1 E= -2.64681268090004  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.6394792280237658  E_coul = 0.9926665471237253
  mo_energy =
[-0.82707307]
E1 = -3.6394792280237658  E_coul = 0.9926665471237253
Extra cycle  E= -2.64681268090004  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:17:15 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945524928        1
                                0.285965092533       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394552492758228, 1.0], [0.28596509253329605, 1.0]]]}
ecp = {}
CPU time:       174.86
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130684994135  E_coul = 0.9783117903335509
init E= -2.63475670907995
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427658]
E1 = -3.639479230773061  E_coul = 0.9926665498184951
cycle= 1 E= -2.64681268095457  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
  mo_energy =
[-0.82707307]
E1 = -3.639479230773061  E_coul = 0.9926665498184951
cycle= 2 E= -2.64681268095457  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.639479230773061  E_coul = 0.9926665498184951
  mo_energy =
[-0.82707307]
E1 = -3.639479230773061  E_coul = 0.9926665498184951
Extra cycle  E= -2.64681268095457  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:17:16 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945524928        1
                                0.285965092533       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394552492758228, 1.0], [0.28596509253329605, 1.0]]]}
ecp = {}
CPU time:       175.71
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130684994135  E_coul = 0.9783117903335509
init E= -2.63475670907995
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427658]
E1 = -3.639479230773061  E_coul = 0.9926665498184951
cycle= 1 E= -2.64681268095457  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707307]
E1 = -3.639479230773061  E_coul = 0.9926665498184951
cycle= 2 E= -2.64681268095457  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.639479230773061  E_coul = 0.9926665498184951
  mo_energy =
[-0.82707307]
E1 = -3.639479230773061  E_coul = 0.9926665498184951
Extra cycle  E= -2.64681268095457  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.639479230773061  E_coul = 0.9926665498184951
init E= -2.64681268095457
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82707307]
E1 = -3.639479230773061  E_coul = 0.9926665498184951
cycle= 1 E= -2.64681268095457  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.639479230773061  E_coul = 0.9926665498184951
  mo_energy =
[-0.82707307]
E1 = -3.639479230773061  E_coul = 0.9926665498184951
Extra cycle  E= -2.64681268095457  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:17:18 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945524849        1
                                0.285965094451       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394552484886951, 1.0], [0.2859650944512168, 1.0]]]}
ecp = {}
CPU time:       178.01
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130685009585877  E_coul = 0.9783117917591536
init E= -2.63475670919943
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427658]
E1 = -3.6394792321477083  E_coul = 0.9926665511658798
cycle= 1 E= -2.64681268098183  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707306]
E1 = -3.6394792321477083  E_coul = 0.9926665511658798
cycle= 2 E= -2.64681268098183  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6394792321477083  E_coul = 0.9926665511658798
  mo_energy =
[-0.82707306]
E1 = -3.6394792321477083  E_coul = 0.9926665511658798
Extra cycle  E= -2.64681268098183  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:17:19 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945524849        1
                                0.285965094451       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394552484886951, 1.0], [0.2859650944512168, 1.0]]]}
ecp = {}
CPU time:       178.85
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130685009585877  E_coul = 0.9783117917591536
init E= -2.63475670919943
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427658]
E1 = -3.6394792321477083  E_coul = 0.9926665511658798
cycle= 1 E= -2.64681268098183  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707306]
E1 = -3.6394792321477083  E_coul = 0.9926665511658798
cycle= 2 E= -2.64681268098183  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6394792321477083  E_coul = 0.9926665511658798
  mo_energy =
[-0.82707306]
E1 = -3.6394792321477083  E_coul = 0.9926665511658798
Extra cycle  E= -2.64681268098183  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6394792321477083  E_coul = 0.9926665511658798
init E= -2.64681268098183
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82707306]
E1 = -3.6394792321477083  E_coul = 0.9926665511658798
cycle= 1 E= -2.64681268098183  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.6394792321477083  E_coul = 0.9926665511658798
  mo_energy =
[-0.82707306]
E1 = -3.6394792321477083  E_coul = 0.9926665511658798
Extra cycle  E= -2.64681268098183  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.06 sec, wall time      0.06 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:17:21 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.7394552481         1
                                0.28596509541        1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.739455248095131, 1.0], [0.2859650954101772, 1.0]]]}
ecp = {}
CPU time:       181.06
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130685017311284  E_coul = 0.9783117924719531
init E= -2.63475670925918
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427658]
E1 = -3.639479232835031  E_coul = 0.9926665518395712
cycle= 1 E= -2.64681268099546  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707306]
E1 = -3.639479232835031  E_coul = 0.9926665518395712
cycle= 2 E= -2.64681268099546  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.639479232835031  E_coul = 0.9926665518395712
  mo_energy =
[-0.82707306]
E1 = -3.639479232835031  E_coul = 0.9926665518395712
Extra cycle  E= -2.64681268099546  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:17:22 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.7394552481         1
                                0.28596509541        1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.739455248095131, 1.0], [0.2859650954101772, 1.0]]]}
ecp = {}
CPU time:       181.92
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130685017311284  E_coul = 0.9783117924719531
init E= -2.63475670925918
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427658]
E1 = -3.639479232835031  E_coul = 0.9926665518395712
cycle= 1 E= -2.64681268099546  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707306]
E1 = -3.639479232835031  E_coul = 0.9926665518395712
cycle= 2 E= -2.64681268099546  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.639479232835031  E_coul = 0.9926665518395712
  mo_energy =
[-0.82707306]
E1 = -3.639479232835031  E_coul = 0.9926665518395712
Extra cycle  E= -2.64681268099546  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.639479232835031  E_coul = 0.9926665518395712
init E= -2.64681268099546
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82707306]
E1 = -3.639479232835031  E_coul = 0.9926665518395712
cycle= 1 E= -2.64681268099546  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.639479232835031  E_coul = 0.9926665518395712
  mo_energy =
[-0.82707306]
E1 = -3.639479232835031  E_coul = 0.9926665518395712
Extra cycle  E= -2.64681268099546  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.06 sec, wall time      0.06 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:17:24 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.7394552479         1
                                0.28596509589        1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394552478983494, 1.0], [0.28596509588965735, 1.0]]]}
ecp = {}
CPU time:       184.10
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130685021174047  E_coul = 0.9783117928283556
init E= -2.63475670928905
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427658]
E1 = -3.639479233178695  E_coul = 0.9926665521764181
cycle= 1 E= -2.64681268100228  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707306]
E1 = -3.639479233178695  E_coul = 0.9926665521764181
cycle= 2 E= -2.64681268100228  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.639479233178695  E_coul = 0.9926665521764181
  mo_energy =
[-0.82707306]
E1 = -3.639479233178695  E_coul = 0.9926665521764181
Extra cycle  E= -2.64681268100228  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:17:25 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.7394552479         1
                                0.28596509589        1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394552478983494, 1.0], [0.28596509588965735, 1.0]]]}
ecp = {}
CPU time:       184.97
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130685021174047  E_coul = 0.9783117928283556
init E= -2.63475670928905
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427658]
E1 = -3.639479233178695  E_coul = 0.9926665521764181
cycle= 1 E= -2.64681268100228  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707306]
E1 = -3.639479233178695  E_coul = 0.9926665521764181
cycle= 2 E= -2.64681268100228  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.639479233178695  E_coul = 0.9926665521764181
  mo_energy =
[-0.82707306]
E1 = -3.639479233178695  E_coul = 0.9926665521764181
Extra cycle  E= -2.64681268100228  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.639479233178695  E_coul = 0.9926665521764181
init E= -2.64681268100228
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82707306]
E1 = -3.639479233178695  E_coul = 0.9926665521764181
cycle= 1 E= -2.64681268100228  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.639479233178695  E_coul = 0.9926665521764181
  mo_energy =
[-0.82707306]
E1 = -3.639479233178695  E_coul = 0.9926665521764181
Extra cycle  E= -2.64681268100228  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.06 sec, wall time      0.06 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:17:28 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.7394552478         1
                                0.285965096129       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394552477999583, 1.0], [0.28596509612939747, 1.0]]]}
ecp = {}
CPU time:       187.18
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130685023105404  E_coul = 0.9783117930065555
init E= -2.63475670930398
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427658]
E1 = -3.6394792333505257  E_coul = 0.9926665523448407
cycle= 1 E= -2.64681268100568  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707306]
E1 = -3.6394792333505257  E_coul = 0.9926665523448407
cycle= 2 E= -2.64681268100568  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6394792333505257  E_coul = 0.9926665523448407
  mo_energy =
[-0.82707306]
E1 = -3.6394792333505257  E_coul = 0.9926665523448407
Extra cycle  E= -2.64681268100568  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:17:28 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.7394552478         1
                                0.285965096129       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394552477999583, 1.0], [0.28596509612939747, 1.0]]]}
ecp = {}
CPU time:       188.06
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130685023105404  E_coul = 0.9783117930065555
init E= -2.63475670930398
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427658]
E1 = -3.6394792333505257  E_coul = 0.9926665523448407
cycle= 1 E= -2.64681268100568  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707306]
E1 = -3.6394792333505257  E_coul = 0.9926665523448407
cycle= 2 E= -2.64681268100568  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6394792333505257  E_coul = 0.9926665523448407
  mo_energy =
[-0.82707306]
E1 = -3.6394792333505257  E_coul = 0.9926665523448407
Extra cycle  E= -2.64681268100568  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.03 sec, wall time      0.03 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6394792333505257  E_coul = 0.9926665523448407
init E= -2.64681268100568
    CPU time for initialize scf      0.04 sec, wall time      0.04 sec
  mo_energy =
[-0.82707306]
E1 = -3.6394792333505257  E_coul = 0.9926665523448407
cycle= 1 E= -2.64681268100568  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.6394792333505257  E_coul = 0.9926665523448407
  mo_energy =
[-0.82707306]
E1 = -3.6394792333505257  E_coul = 0.9926665523448407
Extra cycle  E= -2.64681268100568  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.08 sec, wall time      0.08 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:17:31 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945524775        1
                                0.285965096249       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.739455247750763, 1.0], [0.28596509624926747, 1.0]]]}
ecp = {}
CPU time:       190.29
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130685024071085  E_coul = 0.9783117930956566
init E= -2.63475670931145
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427658]
E1 = -3.6394792334364405  E_coul = 0.9926665524290529
cycle= 1 E= -2.64681268100739  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707306]
E1 = -3.6394792334364405  E_coul = 0.9926665524290529
cycle= 2 E= -2.64681268100739  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6394792334364405  E_coul = 0.9926665524290529
  mo_energy =
[-0.82707306]
E1 = -3.6394792334364405  E_coul = 0.9926665524290529
Extra cycle  E= -2.64681268100739  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:17:32 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945524775        1
                                0.285965096249       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.739455247750763, 1.0], [0.28596509624926747, 1.0]]]}
ecp = {}
CPU time:       191.19
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130685024071085  E_coul = 0.9783117930956566
init E= -2.63475670931145
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427658]
E1 = -3.6394792334364405  E_coul = 0.9926665524290529
cycle= 1 E= -2.64681268100739  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
  mo_energy =
[-0.82707306]
E1 = -3.6394792334364405  E_coul = 0.9926665524290529
cycle= 2 E= -2.64681268100739  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6394792334364405  E_coul = 0.9926665524290529
  mo_energy =
[-0.82707306]
E1 = -3.6394792334364405  E_coul = 0.9926665524290529
Extra cycle  E= -2.64681268100739  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.03 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6394792334364405  E_coul = 0.9926665524290529
init E= -2.64681268100739
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82707306]
E1 = -3.6394792334364405  E_coul = 0.9926665524290529
cycle= 1 E= -2.64681268100739  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.6394792334364405  E_coul = 0.9926665524290529
  mo_energy =
[-0.82707306]
E1 = -3.6394792334364405  E_coul = 0.9926665524290529
Extra cycle  E= -2.64681268100739  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:17:34 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945524773        1
                                0.285965096309       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.739455247726165, 1.0], [0.2859650963092025, 1.0]]]}
ecp = {}
CPU time:       193.43
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.613068502455392  E_coul = 0.9783117931402066
init E= -2.63475670931519
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427658]
E1 = -3.639479233479398  E_coul = 0.9926665524711584
cycle= 1 E= -2.64681268100824  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707306]
E1 = -3.639479233479398  E_coul = 0.9926665524711584
cycle= 2 E= -2.64681268100824  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.639479233479398  E_coul = 0.9926665524711584
  mo_energy =
[-0.82707306]
E1 = -3.639479233479398  E_coul = 0.9926665524711584
Extra cycle  E= -2.64681268100824  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:17:35 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945524773        1
                                0.285965096309       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.739455247726165, 1.0], [0.2859650963092025, 1.0]]]}
ecp = {}
CPU time:       194.33
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.613068502455392  E_coul = 0.9783117931402066
init E= -2.63475670931519
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427658]
E1 = -3.639479233479398  E_coul = 0.9926665524711584
cycle= 1 E= -2.64681268100824  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
  mo_energy =
[-0.82707306]
E1 = -3.639479233479398  E_coul = 0.9926665524711584
cycle= 2 E= -2.64681268100824  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.639479233479398  E_coul = 0.9926665524711584
  mo_energy =
[-0.82707306]
E1 = -3.639479233479398  E_coul = 0.9926665524711584
Extra cycle  E= -2.64681268100824  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.03 sec, wall time      0.03 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.639479233479398  E_coul = 0.9926665524711584
init E= -2.64681268100824
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82707306]
E1 = -3.639479233479398  E_coul = 0.9926665524711584
cycle= 1 E= -2.64681268100824  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.639479233479398  E_coul = 0.9926665524711584
  mo_energy =
[-0.82707306]
E1 = -3.639479233479398  E_coul = 0.9926665524711584
Extra cycle  E= -2.64681268100824  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:17:37 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945524771        1
                                0.285965096339       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394552477138663, 1.0], [0.28596509633917006, 1.0]]]}
ecp = {}
CPU time:       196.57
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130685024795333  E_coul = 0.9783117931624812
init E= -2.63475670931705
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427658]
E1 = -3.639479233500877  E_coul = 0.9926665524922115
cycle= 1 E= -2.64681268100867  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707306]
E1 = -3.639479233500877  E_coul = 0.9926665524922115
cycle= 2 E= -2.64681268100867  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.639479233500877  E_coul = 0.9926665524922115
  mo_energy =
[-0.82707306]
E1 = -3.639479233500877  E_coul = 0.9926665524922115
Extra cycle  E= -2.64681268100867  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:17:38 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945524771        1
                                0.285965096339       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394552477138663, 1.0], [0.28596509633917006, 1.0]]]}
ecp = {}
CPU time:       197.47
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130685024795333  E_coul = 0.9783117931624812
init E= -2.63475670931705
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427658]
E1 = -3.639479233500877  E_coul = 0.9926665524922115
cycle= 1 E= -2.64681268100867  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707306]
E1 = -3.639479233500877  E_coul = 0.9926665524922115
cycle= 2 E= -2.64681268100867  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.639479233500877  E_coul = 0.9926665524922115
  mo_energy =
[-0.82707306]
E1 = -3.639479233500877  E_coul = 0.9926665524922115
Extra cycle  E= -2.64681268100867  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.639479233500877  E_coul = 0.9926665524922115
init E= -2.64681268100867
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82707306]
E1 = -3.639479233500877  E_coul = 0.9926665524922115
cycle= 1 E= -2.64681268100867  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.639479233500877  E_coul = 0.9926665524922115
  mo_energy =
[-0.82707306]
E1 = -3.639479233500877  E_coul = 0.9926665524922115
Extra cycle  E= -2.64681268100867  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.06 sec, wall time      0.06 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:17:40 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945524771        1
                                0.285965096354       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394552477077168, 1.0], [0.2859650963541538, 1.0]]]}
ecp = {}
CPU time:       199.70
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130685024916054  E_coul = 0.9783117931736186
init E= -2.63475670931799
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427658]
E1 = -3.639479233511618  E_coul = 0.9926665525027379
cycle= 1 E= -2.64681268100888  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707306]
E1 = -3.639479233511618  E_coul = 0.9926665525027379
cycle= 2 E= -2.64681268100888  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.639479233511618  E_coul = 0.9926665525027379
  mo_energy =
[-0.82707306]
E1 = -3.639479233511618  E_coul = 0.9926665525027379
Extra cycle  E= -2.64681268100888  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:17:41 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.73945524771        1
                                0.285965096354       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394552477077168, 1.0], [0.2859650963541538, 1.0]]]}
ecp = {}
CPU time:       200.61
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130685024916054  E_coul = 0.9783117931736186
init E= -2.63475670931799
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427658]
E1 = -3.639479233511618  E_coul = 0.9926665525027379
cycle= 1 E= -2.64681268100888  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707306]
E1 = -3.639479233511618  E_coul = 0.9926665525027379
cycle= 2 E= -2.64681268100888  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.639479233511618  E_coul = 0.9926665525027379
  mo_energy =
[-0.82707306]
E1 = -3.639479233511618  E_coul = 0.9926665525027379
Extra cycle  E= -2.64681268100888  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.639479233511618  E_coul = 0.9926665525027379
init E= -2.64681268100888
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82707306]
E1 = -3.639479233511618  E_coul = 0.9926665525027379
cycle= 1 E= -2.64681268100888  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.639479233511618  E_coul = 0.9926665525027379
  mo_energy =
[-0.82707306]
E1 = -3.639479233511618  E_coul = 0.9926665525027379
Extra cycle  E= -2.64681268100888  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:17:43 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.7394552477         1
                                0.285965096362       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.739455247704642, 1.0], [0.28596509636164563, 1.0]]]}
ecp = {}
CPU time:       202.88
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.613068502497641  E_coul = 0.9783117931791875
init E= -2.63475670931845
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427658]
E1 = -3.6394792335169868  E_coul = 0.9926665525080007
cycle= 1 E= -2.64681268100899  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707306]
E1 = -3.6394792335169868  E_coul = 0.9926665525080007
cycle= 2 E= -2.64681268100899  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6394792335169868  E_coul = 0.9926665525080007
  mo_energy =
[-0.82707306]
E1 = -3.6394792335169868  E_coul = 0.9926665525080007
Extra cycle  E= -2.64681268100899  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:17:44 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.7394552477         1
                                0.285965096362       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.739455247704642, 1.0], [0.28596509636164563, 1.0]]]}
ecp = {}
CPU time:       203.81
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.613068502497641  E_coul = 0.9783117931791875
init E= -2.63475670931845
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427658]
E1 = -3.6394792335169868  E_coul = 0.9926665525080007
cycle= 1 E= -2.64681268100899  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707306]
E1 = -3.6394792335169868  E_coul = 0.9926665525080007
cycle= 2 E= -2.64681268100899  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6394792335169868  E_coul = 0.9926665525080007
  mo_energy =
[-0.82707306]
E1 = -3.6394792335169868  E_coul = 0.9926665525080007
Extra cycle  E= -2.64681268100899  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.03 sec, wall time      0.03 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6394792335169868  E_coul = 0.9926665525080007
init E= -2.64681268100899
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82707306]
E1 = -3.6394792335169868  E_coul = 0.9926665525080007
cycle= 1 E= -2.64681268100899  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.6394792335169868  E_coul = 0.9926665525080007
  mo_energy =
[-0.82707306]
E1 = -3.6394792335169868  E_coul = 0.9926665525080007
Extra cycle  E= -2.64681268100899  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.06 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:17:46 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.7394552477         1
                                0.285965096365       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.739455247703105, 1.0], [0.2859650963653916, 1.0]]]}
ecp = {}
CPU time:       206.06
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130685025006577  E_coul = 0.9783117931819717
init E= -2.63475670931869
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427658]
E1 = -3.6394792335196717  E_coul = 0.9926665525106327
cycle= 1 E= -2.64681268100904  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707306]
E1 = -3.6394792335196717  E_coul = 0.9926665525106327
cycle= 2 E= -2.64681268100904  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6394792335196717  E_coul = 0.9926665525106327
  mo_energy =
[-0.82707306]
E1 = -3.6394792335196717  E_coul = 0.9926665525106327
Extra cycle  E= -2.64681268100904  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:17:47 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.7394552477         1
                                0.285965096365       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.739455247703105, 1.0], [0.2859650963653916, 1.0]]]}
ecp = {}
CPU time:       207.01
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130685025006577  E_coul = 0.9783117931819717
init E= -2.63475670931869
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427658]
E1 = -3.6394792335196717  E_coul = 0.9926665525106327
cycle= 1 E= -2.64681268100904  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707306]
E1 = -3.6394792335196717  E_coul = 0.9926665525106327
cycle= 2 E= -2.64681268100904  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6394792335196717  E_coul = 0.9926665525106327
  mo_energy =
[-0.82707306]
E1 = -3.6394792335196717  E_coul = 0.9926665525106327
Extra cycle  E= -2.64681268100904  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6394792335196717  E_coul = 0.9926665525106327
init E= -2.64681268100904
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82707306]
E1 = -3.6394792335196717  E_coul = 0.9926665525106327
cycle= 1 E= -2.64681268100904  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.6394792335196717  E_coul = 0.9926665525106327
  mo_energy =
[-0.82707306]
E1 = -3.6394792335196717  E_coul = 0.9926665525106327
Extra cycle  E= -2.64681268100904  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.06 sec, wall time      0.06 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:17:50 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.7394552477         1
                                0.285965096367       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394552477023362, 1.0], [0.2859650963672646, 1.0]]]}
ecp = {}
CPU time:       209.22
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.613068502502166  E_coul = 0.9783117931833635
init E= -2.6347567093188
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427658]
E1 = -3.639479233521013  E_coul = 0.9926665525119479
cycle= 1 E= -2.64681268100906  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.00 sec, wall time      0.01 sec
  mo_energy =
[-0.82707306]
E1 = -3.639479233521013  E_coul = 0.9926665525119479
cycle= 2 E= -2.64681268100906  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.639479233521013  E_coul = 0.9926665525119479
  mo_energy =
[-0.82707306]
E1 = -3.639479233521013  E_coul = 0.9926665525119479
Extra cycle  E= -2.64681268100906  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.03 sec, wall time      0.03 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:17:51 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.7394552477         1
                                0.285965096367       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394552477023362, 1.0], [0.2859650963672646, 1.0]]]}
ecp = {}
CPU time:       210.07
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.613068502502166  E_coul = 0.9783117931833635
init E= -2.6347567093188
    CPU time for initialize scf      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.83427658]
E1 = -3.639479233521013  E_coul = 0.9926665525119479
cycle= 1 E= -2.64681268100906  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.00 sec, wall time      0.01 sec
  mo_energy =
[-0.82707306]
E1 = -3.639479233521013  E_coul = 0.9926665525119479
cycle= 2 E= -2.64681268100906  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.639479233521013  E_coul = 0.9926665525119479
  mo_energy =
[-0.82707306]
E1 = -3.639479233521013  E_coul = 0.9926665525119479
Extra cycle  E= -2.64681268100906  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.03 sec, wall time      0.03 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.639479233521013  E_coul = 0.9926665525119479
init E= -2.64681268100906
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82707306]
E1 = -3.639479233521013  E_coul = 0.9926665525119479
cycle= 1 E= -2.64681268100906  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -3.639479233521013  E_coul = 0.9926665525119479
  mo_energy =
[-0.82707306]
E1 = -3.639479233521013  E_coul = 0.9926665525119479
Extra cycle  E= -2.64681268100906  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:17:53 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.7394552477         1
                                0.285965096368       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394552477019518, 1.0], [0.28596509636820105, 1.0]]]}
ecp = {}
CPU time:       212.39
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130685025029208  E_coul = 0.97831179318406
init E= -2.63475670931886
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427658]
E1 = -3.6394792335216852  E_coul = 0.9926665525126066
cycle= 1 E= -2.64681268100908  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707306]
E1 = -3.6394792335216852  E_coul = 0.9926665525126066
cycle= 2 E= -2.64681268100908  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6394792335216852  E_coul = 0.9926665525126066
  mo_energy =
[-0.82707306]
E1 = -3.6394792335216852  E_coul = 0.9926665525126066
Extra cycle  E= -2.64681268100908  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:17:54 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.7394552477         1
                                0.285965096368       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394552477019518, 1.0], [0.28596509636820105, 1.0]]]}
ecp = {}
CPU time:       213.44
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130685025029208  E_coul = 0.97831179318406
init E= -2.63475670931886
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427658]
E1 = -3.6394792335216852  E_coul = 0.9926665525126066
cycle= 1 E= -2.64681268100908  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707306]
E1 = -3.6394792335216852  E_coul = 0.9926665525126066
cycle= 2 E= -2.64681268100908  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6394792335216852  E_coul = 0.9926665525126066
  mo_energy =
[-0.82707306]
E1 = -3.6394792335216852  E_coul = 0.9926665525126066
Extra cycle  E= -2.64681268100908  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6394792335216852  E_coul = 0.9926665525126066
init E= -2.64681268100908
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82707306]
E1 = -3.6394792335216852  E_coul = 0.9926665525126066
cycle= 1 E= -2.64681268100908  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -3.6394792335216852  E_coul = 0.9926665525126066
  mo_energy =
[-0.82707306]
E1 = -3.6394792335216852  E_coul = 0.9926665525126066
Extra cycle  E= -2.64681268100908  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:17:56 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.7394552477         1
                                0.285965096369       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394552477017595, 1.0], [0.2859650963686693, 1.0]]]}
ecp = {}
CPU time:       215.86
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130685025032987  E_coul = 0.9783117931844085
init E= -2.63475670931889
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427658]
E1 = -3.6394792335220205  E_coul = 0.9926665525129355
cycle= 1 E= -2.64681268100909  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707306]
E1 = -3.6394792335220205  E_coul = 0.9926665525129355
cycle= 2 E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6394792335220205  E_coul = 0.9926665525129355
  mo_energy =
[-0.82707306]
E1 = -3.6394792335220205  E_coul = 0.9926665525129355
Extra cycle  E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:17:57 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.7394552477         1
                                0.285965096369       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394552477017595, 1.0], [0.2859650963686693, 1.0]]]}
ecp = {}
CPU time:       216.83
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130685025032987  E_coul = 0.9783117931844085
init E= -2.63475670931889
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427658]
E1 = -3.6394792335220205  E_coul = 0.9926665525129355
cycle= 1 E= -2.64681268100909  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707306]
E1 = -3.6394792335220205  E_coul = 0.9926665525129355
cycle= 2 E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6394792335220205  E_coul = 0.9926665525129355
  mo_energy =
[-0.82707306]
E1 = -3.6394792335220205  E_coul = 0.9926665525129355
Extra cycle  E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6394792335220205  E_coul = 0.9926665525129355
init E= -2.64681268100909
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82707306]
E1 = -3.6394792335220205  E_coul = 0.9926665525129355
cycle= 1 E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -3.6394792335220205  E_coul = 0.9926665525129355
  mo_energy =
[-0.82707306]
E1 = -3.6394792335220205  E_coul = 0.9926665525129355
Extra cycle  E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:18:00 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.7394552477         1
                                0.285965096369       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394552477016636, 1.0], [0.28596509636890344, 1.0]]]}
ecp = {}
CPU time:       219.26
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.613068502503485  E_coul = 0.9783117931845811
init E= -2.6347567093189
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427658]
E1 = -3.639479233522188  E_coul = 0.9926665525130994
cycle= 1 E= -2.64681268100909  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707306]
E1 = -3.639479233522188  E_coul = 0.9926665525130994
cycle= 2 E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.639479233522188  E_coul = 0.9926665525130994
  mo_energy =
[-0.82707306]
E1 = -3.639479233522188  E_coul = 0.9926665525130994
Extra cycle  E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:18:01 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.7394552477         1
                                0.285965096369       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394552477016636, 1.0], [0.28596509636890344, 1.0]]]}
ecp = {}
CPU time:       220.25
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.613068502503485  E_coul = 0.9783117931845811
init E= -2.6347567093189
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427658]
E1 = -3.639479233522188  E_coul = 0.9926665525130994
cycle= 1 E= -2.64681268100909  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
  mo_energy =
[-0.82707306]
E1 = -3.639479233522188  E_coul = 0.9926665525130994
cycle= 2 E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.639479233522188  E_coul = 0.9926665525130994
  mo_energy =
[-0.82707306]
E1 = -3.639479233522188  E_coul = 0.9926665525130994
Extra cycle  E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.639479233522188  E_coul = 0.9926665525130994
init E= -2.64681268100909
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82707306]
E1 = -3.639479233522188  E_coul = 0.9926665525130994
cycle= 1 E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.639479233522188  E_coul = 0.9926665525130994
  mo_energy =
[-0.82707306]
E1 = -3.639479233522188  E_coul = 0.9926665525130994
Extra cycle  E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:18:03 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.7394552477         1
                                0.285965096369       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394552477016154, 1.0], [0.2859650963690205, 1.0]]]}
ecp = {}
CPU time:       222.63
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130685025035816  E_coul = 0.9783117931846692
init E= -2.63475670931891
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427658]
E1 = -3.639479233522273  E_coul = 0.9926665525131823
cycle= 1 E= -2.64681268100909  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707306]
E1 = -3.639479233522273  E_coul = 0.9926665525131823
cycle= 2 E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.639479233522273  E_coul = 0.9926665525131823
  mo_energy =
[-0.82707306]
E1 = -3.639479233522273  E_coul = 0.9926665525131823
Extra cycle  E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:18:04 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.7394552477         1
                                0.285965096369       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394552477016154, 1.0], [0.2859650963690205, 1.0]]]}
ecp = {}
CPU time:       223.64
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130685025035816  E_coul = 0.9783117931846692
init E= -2.63475670931891
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427658]
E1 = -3.639479233522273  E_coul = 0.9926665525131823
cycle= 1 E= -2.64681268100909  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707306]
E1 = -3.639479233522273  E_coul = 0.9926665525131823
cycle= 2 E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.639479233522273  E_coul = 0.9926665525131823
  mo_energy =
[-0.82707306]
E1 = -3.639479233522273  E_coul = 0.9926665525131823
Extra cycle  E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.639479233522273  E_coul = 0.9926665525131823
init E= -2.64681268100909
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82707306]
E1 = -3.639479233522273  E_coul = 0.9926665525131823
cycle= 1 E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.639479233522273  E_coul = 0.9926665525131823
  mo_energy =
[-0.82707306]
E1 = -3.639479233522273  E_coul = 0.9926665525131823
Extra cycle  E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.06 sec, wall time      0.06 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:18:07 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.7394552477         1
                                0.285965096369       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394552477015914, 1.0], [0.2859650963690791, 1.0]]]}
ecp = {}
CPU time:       225.97
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.613068502503631  E_coul = 0.9783117931847133
init E= -2.63475670931892
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427658]
E1 = -3.6394792335223163  E_coul = 0.9926665525132234
cycle= 1 E= -2.64681268100909  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
  mo_energy =
[-0.82707306]
E1 = -3.6394792335223163  E_coul = 0.9926665525132234
cycle= 2 E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6394792335223163  E_coul = 0.9926665525132234
  mo_energy =
[-0.82707306]
E1 = -3.6394792335223163  E_coul = 0.9926665525132234
Extra cycle  E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:18:08 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.7394552477         1
                                0.285965096369       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394552477015914, 1.0], [0.2859650963690791, 1.0]]]}
ecp = {}
CPU time:       226.96
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.613068502503631  E_coul = 0.9783117931847133
init E= -2.63475670931892
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427658]
E1 = -3.6394792335223163  E_coul = 0.9926665525132234
cycle= 1 E= -2.64681268100909  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
  mo_energy =
[-0.82707306]
E1 = -3.6394792335223163  E_coul = 0.9926665525132234
cycle= 2 E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6394792335223163  E_coul = 0.9926665525132234
  mo_energy =
[-0.82707306]
E1 = -3.6394792335223163  E_coul = 0.9926665525132234
Extra cycle  E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6394792335223163  E_coul = 0.9926665525132234
init E= -2.64681268100909
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82707306]
E1 = -3.6394792335223163  E_coul = 0.9926665525132234
cycle= 1 E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.6394792335223163  E_coul = 0.9926665525132234
  mo_energy =
[-0.82707306]
E1 = -3.6394792335223163  E_coul = 0.9926665525132234
Extra cycle  E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:18:10 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.7394552477         1
                                0.285965096369       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394552477016034, 1.0], [0.28596509636904976, 1.0]]]}
ecp = {}
CPU time:       229.28
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.613068502503605  E_coul = 0.9783117931846909
init E= -2.63475670931891
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427658]
E1 = -3.6394792335222936  E_coul = 0.9926665525132025
cycle= 1 E= -2.64681268100909  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707306]
E1 = -3.6394792335222936  E_coul = 0.9926665525132025
cycle= 2 E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6394792335222936  E_coul = 0.9926665525132025
  mo_energy =
[-0.82707306]
E1 = -3.6394792335222936  E_coul = 0.9926665525132025
Extra cycle  E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:18:11 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.7394552477         1
                                0.285965096369       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394552477016034, 1.0], [0.28596509636904976, 1.0]]]}
ecp = {}
CPU time:       230.28
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.613068502503605  E_coul = 0.9783117931846909
init E= -2.63475670931891
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427658]
E1 = -3.6394792335222936  E_coul = 0.9926665525132025
cycle= 1 E= -2.64681268100909  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707306]
E1 = -3.6394792335222936  E_coul = 0.9926665525132025
cycle= 2 E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6394792335222936  E_coul = 0.9926665525132025
  mo_energy =
[-0.82707306]
E1 = -3.6394792335222936  E_coul = 0.9926665525132025
Extra cycle  E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6394792335222936  E_coul = 0.9926665525132025
init E= -2.64681268100909
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82707306]
E1 = -3.6394792335222936  E_coul = 0.9926665525132025
cycle= 1 E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.6394792335222936  E_coul = 0.9926665525132025
  mo_energy =
[-0.82707306]
E1 = -3.6394792335222936  E_coul = 0.9926665525132025
Extra cycle  E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:18:13 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.7394552477         1
                                0.285965096369       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394552477015974, 1.0], [0.2859650963690644, 1.0]]]}
ecp = {}
CPU time:       232.61
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130685025036158  E_coul = 0.9783117931847017
init E= -2.63475670931891
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427658]
E1 = -3.6394792335223034  E_coul = 0.992666552513213
cycle= 1 E= -2.64681268100909  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707306]
E1 = -3.6394792335223034  E_coul = 0.992666552513213
cycle= 2 E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6394792335223034  E_coul = 0.992666552513213
  mo_energy =
[-0.82707306]
E1 = -3.6394792335223034  E_coul = 0.992666552513213
Extra cycle  E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:18:14 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.7394552477         1
                                0.285965096369       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394552477015974, 1.0], [0.2859650963690644, 1.0]]]}
ecp = {}
CPU time:       233.63
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6130685025036158  E_coul = 0.9783117931847017
init E= -2.63475670931891
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427658]
E1 = -3.6394792335223034  E_coul = 0.992666552513213
cycle= 1 E= -2.64681268100909  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707306]
E1 = -3.6394792335223034  E_coul = 0.992666552513213
cycle= 2 E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6394792335223034  E_coul = 0.992666552513213
  mo_energy =
[-0.82707306]
E1 = -3.6394792335223034  E_coul = 0.992666552513213
Extra cycle  E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6394792335223034  E_coul = 0.992666552513213
init E= -2.64681268100909
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82707306]
E1 = -3.6394792335223034  E_coul = 0.992666552513213
cycle= 1 E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.6394792335223034  E_coul = 0.992666552513213
  mo_energy =
[-0.82707306]
E1 = -3.6394792335223034  E_coul = 0.992666552513213
Extra cycle  E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.06 sec, wall time      0.06 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:18:17 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.7394552477         1
                                0.285965096369       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394552477015945, 1.0], [0.28596509636907175, 1.0]]]}
ecp = {}
CPU time:       235.98
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.613068502503623  E_coul = 0.9783117931847083
init E= -2.63475670931891
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427658]
E1 = -3.639479233522309  E_coul = 0.9926665525132188
cycle= 1 E= -2.64681268100909  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707306]
E1 = -3.639479233522309  E_coul = 0.9926665525132188
cycle= 2 E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.639479233522309  E_coul = 0.9926665525132188
  mo_energy =
[-0.82707306]
E1 = -3.639479233522309  E_coul = 0.9926665525132188
Extra cycle  E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:18:18 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.7394552477         1
                                0.285965096369       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394552477015945, 1.0], [0.28596509636907175, 1.0]]]}
ecp = {}
CPU time:       237.02
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.613068502503623  E_coul = 0.9783117931847083
init E= -2.63475670931891
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427658]
E1 = -3.639479233522309  E_coul = 0.9926665525132188
cycle= 1 E= -2.64681268100909  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707306]
E1 = -3.639479233522309  E_coul = 0.9926665525132188
cycle= 2 E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.639479233522309  E_coul = 0.9926665525132188
  mo_energy =
[-0.82707306]
E1 = -3.639479233522309  E_coul = 0.9926665525132188
Extra cycle  E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.639479233522309  E_coul = 0.9926665525132188
init E= -2.64681268100909
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82707306]
E1 = -3.639479233522309  E_coul = 0.9926665525132188
cycle= 1 E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.639479233522309  E_coul = 0.9926665525132188
  mo_energy =
[-0.82707306]
E1 = -3.639479233522309  E_coul = 0.9926665525132188
Extra cycle  E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:18:20 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.7394552477         1
                                0.285965096369       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.739455247701593, 1.0], [0.2859650963690754, 1.0]]]}
ecp = {}
CPU time:       239.38
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.613068502503626  E_coul = 0.9783117931847105
init E= -2.63475670931892
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427658]
E1 = -3.6394792335223114  E_coul = 0.9926665525132207
cycle= 1 E= -2.64681268100909  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707306]
E1 = -3.6394792335223114  E_coul = 0.9926665525132207
cycle= 2 E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6394792335223114  E_coul = 0.9926665525132207
  mo_energy =
[-0.82707306]
E1 = -3.6394792335223114  E_coul = 0.9926665525132207
Extra cycle  E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:18:21 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.7394552477         1
                                0.285965096369       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.739455247701593, 1.0], [0.2859650963690754, 1.0]]]}
ecp = {}
CPU time:       240.42
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.613068502503626  E_coul = 0.9783117931847105
init E= -2.63475670931892
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427658]
E1 = -3.6394792335223114  E_coul = 0.9926665525132207
cycle= 1 E= -2.64681268100909  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
  mo_energy =
[-0.82707306]
E1 = -3.6394792335223114  E_coul = 0.9926665525132207
cycle= 2 E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6394792335223114  E_coul = 0.9926665525132207
  mo_energy =
[-0.82707306]
E1 = -3.6394792335223114  E_coul = 0.9926665525132207
Extra cycle  E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6394792335223114  E_coul = 0.9926665525132207
init E= -2.64681268100909
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82707306]
E1 = -3.6394792335223114  E_coul = 0.9926665525132207
cycle= 1 E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.6394792335223114  E_coul = 0.9926665525132207
  mo_energy =
[-0.82707306]
E1 = -3.6394792335223114  E_coul = 0.9926665525132207
Extra cycle  E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:18:23 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.7394552477         1
                                0.285965096369       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394552477015914, 1.0], [0.2859650963690791, 1.0]]]}
ecp = {}
CPU time:       242.80
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.613068502503631  E_coul = 0.9783117931847133
init E= -2.63475670931892
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427658]
E1 = -3.6394792335223163  E_coul = 0.9926665525132234
cycle= 1 E= -2.64681268100909  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707306]
E1 = -3.6394792335223163  E_coul = 0.9926665525132234
cycle= 2 E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6394792335223163  E_coul = 0.9926665525132234
  mo_energy =
[-0.82707306]
E1 = -3.6394792335223163  E_coul = 0.9926665525132234
Extra cycle  E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [1e-5, 1e-6]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-6,None),(1e-6,None)),
    method='TNC', tol=1e-8,
    # options={"ftol": 1e-8, "eps": 1e-8},
)

print(res.x)
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar  3 22:18:24 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.7394552477         1
                                0.285965096369       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7394552477015914, 1.0], [0.2859650963690791, 1.0]]]}
ecp = {}
CPU time:       243.86
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.613068502503631  E_coul = 0.9783117931847133
init E= -2.63475670931892
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83427658]
E1 = -3.6394792335223163  E_coul = 0.9926665525132234
cycle= 1 E= -2.64681268100909  delta_E= -0.0121  |g|=    0  |ddm|= 0.0145
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82707306]
E1 = -3.6394792335223163  E_coul = 0.9926665525132234
cycle= 2 E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6394792335223163  E_coul = 0.9926665525132234
  mo_energy =
[-0.82707306]
E1 = -3.6394792335223163  E_coul = 0.9926665525132234
Extra cycle  E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6394792335223163  E_coul = 0.9926665525132234
init E= -2.64681268100909
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82707306]
E1 = -3.6394792335223163  E_coul = 0.9926665525132234
cycle= 1 E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.6394792335223163  E_coul = 0.9926665525132234
  mo_energy =
[-0.82707306]
E1 = -3.6394792335223163  E_coul = 0.9926665525132234
Extra cycle  E= -2.64681268100909  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
[1.73945525 0.2859651 ]
dict_values([array([1.73945525, 0.2859651 ]), -2.646812681009093, array([-0.08812535,  0.21473069]), 93, 7, 1, 'Converged (|f_n-f_(n-1)| ~= 0)', True])
