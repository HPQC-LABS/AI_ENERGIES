#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:02:26 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.432879285          1
                                0.4330512863         1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.432879285, 1.0], [0.4330512863, 1.0]]]}
ecp = {}
CPU time:         1.17
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.686207066418597  E_coul = 1.1350978952846869
init E= -2.55110917113391
    CPU time for initialize scf      0.10 sec, wall time      0.10 sec
  mo_energy =
[-0.72636596]
E1 = -3.7817994562079207  E_coul = 1.194732984233136
cycle= 1 E= -2.58706647197478  delta_E= -0.036  |g|=    0  |ddm|= 0.0506
    CPU time for cycle= 1      0.15 sec, wall time      0.15 sec
  mo_energy =
[-0.69616674]
E1 = -3.7817994562079207  E_coul = 1.194732984233136
cycle= 2 E= -2.58706647197478  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.05 sec, wall time      0.05 sec
E1 = -3.7817994562079207  E_coul = 1.194732984233136
  mo_energy =
[-0.69616674]
E1 = -3.7817994562079207  E_coul = 1.194732984233136
Extra cycle  E= -2.58706647197478  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.31 sec, wall time      0.31 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:02:27 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.432879285          1
                                0.4330512863         1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.432879285, 1.0], [0.4330512863, 1.0]]]}
ecp = {}
CPU time:         1.54
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.686207066418597  E_coul = 1.1350978952846869
init E= -2.55110917113391
    CPU time for initialize scf      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.72636596]
E1 = -3.7817994562079207  E_coul = 1.194732984233136
cycle= 1 E= -2.58706647197478  delta_E= -0.036  |g|=    0  |ddm|= 0.0506
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.69616674]
E1 = -3.7817994562079207  E_coul = 1.194732984233136
cycle= 2 E= -2.58706647197478  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.7817994562079207  E_coul = 1.194732984233136
  mo_energy =
[-0.69616674]
E1 = -3.7817994562079207  E_coul = 1.194732984233136
Extra cycle  E= -2.58706647197478  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.03 sec, wall time      0.03 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.7817994562079207  E_coul = 1.194732984233136
init E= -2.58706647197478
    CPU time for initialize scf      0.27 sec, wall time      0.36 sec
  mo_energy =
[-0.69616674]
E1 = -3.7817994562079207  E_coul = 1.194732984233136
cycle= 1 E= -2.58706647197478  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.7817994562079207  E_coul = 1.194732984233136
  mo_energy =
[-0.69616674]
E1 = -3.7817994562079207  E_coul = 1.194732984233136
Extra cycle  E= -2.58706647197478  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.70 sec, wall time      0.81 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:02:31 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.4781553581         1
                                0.110694305488       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.4781553581000506, 1.0], [0.11069430548814974, 1.0]]]}
ecp = {}
CPU time:         5.07
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -2.704671048278709  E_coul = 0.6669372762455552
init E= -2.03773377203315
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.7876715]
E1 = -3.108254650175041  E_coul = 0.880824267302891
cycle= 1 E= -2.22743038287215  delta_E= -0.19  |g|=    0  |ddm|= 0.26
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.67330306]
E1 = -3.108254650175041  E_coul = 0.880824267302891
cycle= 2 E= -2.22743038287215  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.108254650175041  E_coul = 0.880824267302891
  mo_energy =
[-0.67330306]
E1 = -3.108254650175041  E_coul = 0.880824267302891
Extra cycle  E= -2.22743038287215  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.03 sec, wall time      0.03 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.108254650175041  E_coul = 0.880824267302891
init E= -2.22743038287215
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.67330306]
E1 = -3.108254650175041  E_coul = 0.880824267302891
cycle= 1 E= -2.22743038287215  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.108254650175041  E_coul = 0.880824267302891
  mo_energy =
[-0.67330306]
E1 = -3.108254650175041  E_coul = 0.880824267302891
Extra cycle  E= -2.22743038287215  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.06 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:02:32 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.4781553581         1
                                0.110694305488       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.4781553581000506, 1.0], [0.11069430548814974, 1.0]]]}
ecp = {}
CPU time:         6.69
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -2.704671048278709  E_coul = 0.6669372762455552
init E= -2.03773377203315
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.7876715]
E1 = -3.108254650175041  E_coul = 0.880824267302891
cycle= 1 E= -2.22743038287215  delta_E= -0.19  |g|=    0  |ddm|= 0.26
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.67330306]
E1 = -3.108254650175041  E_coul = 0.880824267302891
cycle= 2 E= -2.22743038287215  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.108254650175041  E_coul = 0.880824267302891
  mo_energy =
[-0.67330306]
E1 = -3.108254650175041  E_coul = 0.880824267302891
Extra cycle  E= -2.22743038287215  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:02:32 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44482470201        1
                                0.288695906781       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.444824702010577, 1.0], [0.28869590678144275, 1.0]]]}
ecp = {}
CPU time:         6.78
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.631268461173325  E_coul = 1.0636906759180205
init E= -2.5675777852553
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.7621757]
E1 = -3.680681305177495  E_coul = 1.0928361877804855
cycle= 1 E= -2.58784511739701  delta_E= -0.0203  |g|=    0  |ddm|= 0.0268
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74750446]
E1 = -3.680681305177495  E_coul = 1.0928361877804855
cycle= 2 E= -2.58784511739701  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.680681305177495  E_coul = 1.0928361877804855
  mo_energy =
[-0.74750446]
E1 = -3.680681305177495  E_coul = 1.0928361877804855
Extra cycle  E= -2.58784511739701  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.680681305177495  E_coul = 1.0928361877804855
init E= -2.58784511739701
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.74750446]
E1 = -3.680681305177495  E_coul = 1.0928361877804855
cycle= 1 E= -2.58784511739701  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.680681305177495  E_coul = 1.0928361877804855
  mo_energy =
[-0.74750446]
E1 = -3.680681305177495  E_coul = 1.0928361877804855
Extra cycle  E= -2.58784511739701  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:02:34 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44482470201        1
                                0.288695906781       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.444824702010577, 1.0], [0.28869590678144275, 1.0]]]}
ecp = {}
CPU time:         8.43
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.631268461173325  E_coul = 1.0636906759180205
init E= -2.5675777852553
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.7621757]
E1 = -3.680681305177495  E_coul = 1.0928361877804855
cycle= 1 E= -2.58784511739701  delta_E= -0.0203  |g|=    0  |ddm|= 0.0268
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74750446]
E1 = -3.680681305177495  E_coul = 1.0928361877804855
cycle= 2 E= -2.58784511739701  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.680681305177495  E_coul = 1.0928361877804855
  mo_energy =
[-0.74750446]
E1 = -3.680681305177495  E_coul = 1.0928361877804855
Extra cycle  E= -2.58784511739701  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:02:34 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44012075148        1
                                0.26583661537        1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.4401207514784424, 1.0], [0.26583661537042824, 1.0]]]}
ecp = {}
CPU time:         8.54
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.589338008754123  E_coul = 1.0385783698412887
init E= -2.55075963891283
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.76816231]
E1 = -3.646645079265299  E_coul = 1.0720068251743315
cycle= 1 E= -2.57463825409097  delta_E= -0.0239  |g|=    0  |ddm|= 0.0314
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.75131571]
E1 = -3.646645079265299  E_coul = 1.0720068251743315
cycle= 2 E= -2.57463825409097  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.646645079265299  E_coul = 1.0720068251743315
  mo_energy =
[-0.75131571]
E1 = -3.646645079265299  E_coul = 1.0720068251743315
Extra cycle  E= -2.57463825409097  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.646645079265299  E_coul = 1.0720068251743315
init E= -2.57463825409097
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.75131571]
E1 = -3.646645079265299  E_coul = 1.0720068251743315
cycle= 1 E= -2.57463825409097  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.646645079265299  E_coul = 1.0720068251743315
  mo_energy =
[-0.75131571]
E1 = -3.646645079265299  E_coul = 1.0720068251743315
Extra cycle  E= -2.57463825409097  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:02:36 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44012075148        1
                                0.26583661537        1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.4401207514784424, 1.0], [0.26583661537042824, 1.0]]]}
ecp = {}
CPU time:        10.17
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.589338008754123  E_coul = 1.0385783698412887
init E= -2.55075963891283
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.76816231]
E1 = -3.646645079265299  E_coul = 1.0720068251743315
cycle= 1 E= -2.57463825409097  delta_E= -0.0239  |g|=    0  |ddm|= 0.0314
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.75131571]
E1 = -3.646645079265299  E_coul = 1.0720068251743315
cycle= 2 E= -2.57463825409097  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.646645079265299  E_coul = 1.0720068251743315
  mo_energy =
[-0.75131571]
E1 = -3.646645079265299  E_coul = 1.0720068251743315
Extra cycle  E= -2.57463825409097  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:02:36 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.42388679381        1
                                0.237987858316       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.4238867938130717, 1.0], [0.23798785831588956, 1.0]]]}
ecp = {}
CPU time:        10.29
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.520758701320959  E_coul = 0.9998895952803276
init E= -2.52086910604063
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.77685871]
E1 = -3.5965403355925565  E_coul = 1.0433965520994664
cycle= 1 E= -2.55314378349309  delta_E= -0.0323  |g|=    0  |ddm|= 0.0421
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.75487362]
E1 = -3.5965403355925565  E_coul = 1.0433965520994664
cycle= 2 E= -2.55314378349309  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.5965403355925565  E_coul = 1.0433965520994664
  mo_energy =
[-0.75487362]
E1 = -3.5965403355925565  E_coul = 1.0433965520994664
Extra cycle  E= -2.55314378349309  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.5965403355925565  E_coul = 1.0433965520994664
init E= -2.55314378349309
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.75487362]
E1 = -3.5965403355925565  E_coul = 1.0433965520994664
cycle= 1 E= -2.55314378349309  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -3.5965403355925565  E_coul = 1.0433965520994664
  mo_energy =
[-0.75487362]
E1 = -3.5965403355925565  E_coul = 1.0433965520994664
Extra cycle  E= -2.55314378349309  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:02:37 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.42388679381        1
                                0.237987858316       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.4238867938130717, 1.0], [0.23798785831588956, 1.0]]]}
ecp = {}
CPU time:        11.92
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.520758701320959  E_coul = 0.9998895952803276
init E= -2.52086910604063
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.77685871]
E1 = -3.5965403355925565  E_coul = 1.0433965520994664
cycle= 1 E= -2.55314378349309  delta_E= -0.0323  |g|=    0  |ddm|= 0.0421
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.75487362]
E1 = -3.5965403355925565  E_coul = 1.0433965520994664
cycle= 2 E= -2.55314378349309  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.5965403355925565  E_coul = 1.0433965520994664
  mo_energy =
[-0.75487362]
E1 = -3.5965403355925565  E_coul = 1.0433965520994664
Extra cycle  E= -2.55314378349309  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:02:38 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.40692398881        1
                                0.24334839549        1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.4069239888100418, 1.0], [0.2433483954904387, 1.0]]]}
ecp = {}
CPU time:        12.08
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.539643389955433  E_coul = 1.0067053154967156
init E= -2.53293807445872
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.77813549]
E1 = -3.6093081216547422  E_coul = 1.0467217750296027
cycle= 1 E= -2.56258634662514  delta_E= -0.0296  |g|=    0  |ddm|= 0.0386
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.75793229]
E1 = -3.6093081216547422  E_coul = 1.0467217750296027
cycle= 2 E= -2.56258634662514  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6093081216547422  E_coul = 1.0467217750296027
  mo_energy =
[-0.75793229]
E1 = -3.6093081216547422  E_coul = 1.0467217750296027
Extra cycle  E= -2.56258634662514  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6093081216547422  E_coul = 1.0467217750296027
init E= -2.56258634662514
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.75793229]
E1 = -3.6093081216547422  E_coul = 1.0467217750296027
cycle= 1 E= -2.56258634662514  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.6093081216547422  E_coul = 1.0467217750296027
  mo_energy =
[-0.75793229]
E1 = -3.6093081216547422  E_coul = 1.0467217750296027
Extra cycle  E= -2.56258634662514  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:02:39 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.40692398881        1
                                0.24334839549        1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.4069239888100418, 1.0], [0.2433483954904387, 1.0]]]}
ecp = {}
CPU time:        13.70
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.539643389955433  E_coul = 1.0067053154967156
init E= -2.53293807445872
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.77813549]
E1 = -3.6093081216547422  E_coul = 1.0467217750296027
cycle= 1 E= -2.56258634662514  delta_E= -0.0296  |g|=    0  |ddm|= 0.0386
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.75793229]
E1 = -3.6093081216547422  E_coul = 1.0467217750296027
cycle= 2 E= -2.56258634662514  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6093081216547422  E_coul = 1.0467217750296027
  mo_energy =
[-0.75793229]
E1 = -3.6093081216547422  E_coul = 1.0467217750296027
Extra cycle  E= -2.56258634662514  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:02:39 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.42024672778        1
                                0.27480808989        1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.420246727777569, 1.0], [0.2748080898896773, 1.0]]]}
ecp = {}
CPU time:        13.86
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6107924234683013  E_coul = 1.0474133492312905
init E= -2.56337907423701
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.76886817]
E1 = -3.6626466008216  E_coul = 1.0777129293844139
cycle= 1 E= -2.58493367143719  delta_E= -0.0216  |g|=    0  |ddm|= 0.0283
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.75361037]
E1 = -3.6626466008216  E_coul = 1.0777129293844139
cycle= 2 E= -2.58493367143719  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6626466008216  E_coul = 1.0777129293844139
  mo_energy =
[-0.75361037]
E1 = -3.6626466008216  E_coul = 1.0777129293844139
Extra cycle  E= -2.58493367143719  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6626466008216  E_coul = 1.0777129293844139
init E= -2.58493367143719
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.75361037]
E1 = -3.6626466008216  E_coul = 1.0777129293844139
cycle= 1 E= -2.58493367143719  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -3.6626466008216  E_coul = 1.0777129293844139
  mo_energy =
[-0.75361037]
E1 = -3.6626466008216  E_coul = 1.0777129293844139
Extra cycle  E= -2.58493367143719  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.08 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:02:41 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.42024672778        1
                                0.27480808989        1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.420246727777569, 1.0], [0.2748080898896773, 1.0]]]}
ecp = {}
CPU time:        15.66
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6107924234683013  E_coul = 1.0474133492312905
init E= -2.56337907423701
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.76886817]
E1 = -3.6626466008216  E_coul = 1.0777129293844139
cycle= 1 E= -2.58493367143719  delta_E= -0.0216  |g|=    0  |ddm|= 0.0283
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.75361037]
E1 = -3.6626466008216  E_coul = 1.0777129293844139
cycle= 2 E= -2.58493367143719  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6626466008216  E_coul = 1.0777129293844139
  mo_energy =
[-0.75361037]
E1 = -3.6626466008216  E_coul = 1.0777129293844139
Extra cycle  E= -2.58493367143719  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.05 sec, wall time      0.06 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:02:41 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.43253571489        1
                                0.281751998336       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.432535714894073, 1.0], [0.28175199833556, 1.0]]]}
ecp = {}
CPU time:        15.84
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6215554664675595  E_coul = 1.0557614045325814
init E= -2.56579406193498
    CPU time for initialize scf      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.765516]
E1 = -3.6719188137224483  E_coul = 1.0853295810074801
cycle= 1 E= -2.58658923271497  delta_E= -0.0208  |g|=    0  |ddm|= 0.0274
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
  mo_energy =
[-0.75062983]
E1 = -3.6719188137224483  E_coul = 1.0853295810074801
cycle= 2 E= -2.58658923271497  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6719188137224483  E_coul = 1.0853295810074801
  mo_energy =
[-0.75062983]
E1 = -3.6719188137224483  E_coul = 1.0853295810074801
Extra cycle  E= -2.58658923271497  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.03 sec, wall time      0.03 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6719188137224483  E_coul = 1.0853295810074801
init E= -2.58658923271497
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.75062983]
E1 = -3.6719188137224483  E_coul = 1.0853295810074801
cycle= 1 E= -2.58658923271497  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.6719188137224483  E_coul = 1.0853295810074801
  mo_energy =
[-0.75062983]
E1 = -3.6719188137224483  E_coul = 1.0853295810074801
Extra cycle  E= -2.58658923271497  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:02:43 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.43253571489        1
                                0.281751998336       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.432535714894073, 1.0], [0.28175199833556, 1.0]]]}
ecp = {}
CPU time:        17.61
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6215554664675595  E_coul = 1.0557614045325814
init E= -2.56579406193498
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.765516]
E1 = -3.6719188137224483  E_coul = 1.0853295810074801
cycle= 1 E= -2.58658923271497  delta_E= -0.0208  |g|=    0  |ddm|= 0.0274
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.75062983]
E1 = -3.6719188137224483  E_coul = 1.0853295810074801
cycle= 2 E= -2.58658923271497  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6719188137224483  E_coul = 1.0853295810074801
  mo_energy =
[-0.75062983]
E1 = -3.6719188137224483  E_coul = 1.0853295810074801
Extra cycle  E= -2.58658923271497  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:02:44 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.43868020845        1
                                0.285223952559       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.438680208452325, 1.0], [0.2852239525585014, 1.0]]]}
ecp = {}
CPU time:        17.82
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.626539825778461  E_coul = 1.0597772311197413
init E= -2.56676259465872
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.7638444]
E1 = -3.6763623425552496  E_coul = 1.0890963441102997
cycle= 1 E= -2.58726599844495  delta_E= -0.0205  |g|=    0  |ddm|= 0.0271
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74908483]
E1 = -3.6763623425552496  E_coul = 1.0890963441102997
cycle= 2 E= -2.58726599844495  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6763623425552496  E_coul = 1.0890963441102997
  mo_energy =
[-0.74908483]
E1 = -3.6763623425552496  E_coul = 1.0890963441102997
Extra cycle  E= -2.58726599844495  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.06 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6763623425552496  E_coul = 1.0890963441102997
init E= -2.58726599844495
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.74908483]
E1 = -3.6763623425552496  E_coul = 1.0890963441102997
cycle= 1 E= -2.58726599844495  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.6763623425552496  E_coul = 1.0890963441102997
  mo_energy =
[-0.74908483]
E1 = -3.6763623425552496  E_coul = 1.0890963441102997
Extra cycle  E= -2.58726599844495  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:02:45 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.43868020845        1
                                0.285223952559       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.438680208452325, 1.0], [0.2852239525585014, 1.0]]]}
ecp = {}
CPU time:        19.56
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.626539825778461  E_coul = 1.0597772311197413
init E= -2.56676259465872
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.7638444]
E1 = -3.6763623425552496  E_coul = 1.0890963441102997
cycle= 1 E= -2.58726599844495  delta_E= -0.0205  |g|=    0  |ddm|= 0.0271
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74908483]
E1 = -3.6763623425552496  E_coul = 1.0890963441102997
cycle= 2 E= -2.58726599844495  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6763623425552496  E_coul = 1.0890963441102997
  mo_energy =
[-0.74908483]
E1 = -3.6763623425552496  E_coul = 1.0890963441102997
Extra cycle  E= -2.58726599844495  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:02:46 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44175245523        1
                                0.28695992967        1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.441752455231451, 1.0], [0.2869599296699721, 1.0]]]}
ecp = {}
CPU time:        19.78
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.62893569617927  E_coul = 1.0617466097403605
init E= -2.56718908643891
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.76300969]
E1 = -3.6785372208376708  E_coul = 1.0909695949396583
cycle= 1 E= -2.58756762589801  delta_E= -0.0204  |g|=    0  |ddm|= 0.027
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74829902]
E1 = -3.6785372208376708  E_coul = 1.0909695949396583
cycle= 2 E= -2.58756762589801  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6785372208376708  E_coul = 1.0909695949396583
  mo_energy =
[-0.74829902]
E1 = -3.6785372208376708  E_coul = 1.0909695949396583
Extra cycle  E= -2.58756762589801  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6785372208376708  E_coul = 1.0909695949396583
init E= -2.58756762589801
    CPU time for initialize scf      0.04 sec, wall time      0.04 sec
  mo_energy =
[-0.74829902]
E1 = -3.6785372208376708  E_coul = 1.0909695949396583
cycle= 1 E= -2.58756762589801  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -3.6785372208376708  E_coul = 1.0909695949396583
  mo_energy =
[-0.74829902]
E1 = -3.6785372208376708  E_coul = 1.0909695949396583
Extra cycle  E= -2.58756762589801  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.08 sec, wall time      0.08 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:02:47 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44175245523        1
                                0.28695992967        1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.441752455231451, 1.0], [0.2869599296699721, 1.0]]]}
ecp = {}
CPU time:        21.56
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.62893569617927  E_coul = 1.0617466097403605
init E= -2.56718908643891
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.76300969]
E1 = -3.6785372208376708  E_coul = 1.0909695949396583
cycle= 1 E= -2.58756762589801  delta_E= -0.0204  |g|=    0  |ddm|= 0.027
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74829902]
E1 = -3.6785372208376708  E_coul = 1.0909695949396583
cycle= 2 E= -2.58756762589801  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
E1 = -3.6785372208376708  E_coul = 1.0909695949396583
  mo_energy =
[-0.74829902]
E1 = -3.6785372208376708  E_coul = 1.0909695949396583
Extra cycle  E= -2.58756762589801  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:02:48 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44328857862        1
                                0.287827918226       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.4432885786210137, 1.0], [0.2878279182257074, 1.0]]]}
ecp = {}
CPU time:        21.85
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.630109915950965  E_coul = 1.0627217893889107
init E= -2.56738812656205
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.7625926]
E1 = -3.6796130908395424  E_coul = 1.0919037191803909
cycle= 1 E= -2.58770937165915  delta_E= -0.0203  |g|=    0  |ddm|= 0.0269
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74790283]
E1 = -3.6796130908395424  E_coul = 1.0919037191803909
cycle= 2 E= -2.58770937165915  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6796130908395424  E_coul = 1.0919037191803909
  mo_energy =
[-0.74790283]
E1 = -3.6796130908395424  E_coul = 1.0919037191803909
Extra cycle  E= -2.58770937165915  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.05 sec, wall time      0.05 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6796130908395424  E_coul = 1.0919037191803909
init E= -2.58770937165915
    CPU time for initialize scf      0.04 sec, wall time      0.04 sec
  mo_energy =
[-0.74790283]
E1 = -3.6796130908395424  E_coul = 1.0919037191803909
cycle= 1 E= -2.58770937165915  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -3.6796130908395424  E_coul = 1.0919037191803909
  mo_energy =
[-0.74790283]
E1 = -3.6796130908395424  E_coul = 1.0919037191803909
Extra cycle  E= -2.58770937165915  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:02:50 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44328857862        1
                                0.287827918226       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.4432885786210137, 1.0], [0.2878279182257074, 1.0]]]}
ecp = {}
CPU time:        23.64
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.630109915950965  E_coul = 1.0627217893889107
init E= -2.56738812656205
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.7625926]
E1 = -3.6796130908395424  E_coul = 1.0919037191803909
cycle= 1 E= -2.58770937165915  delta_E= -0.0203  |g|=    0  |ddm|= 0.0269
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74790283]
E1 = -3.6796130908395424  E_coul = 1.0919037191803909
cycle= 2 E= -2.58770937165915  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6796130908395424  E_coul = 1.0919037191803909
  mo_energy =
[-0.74790283]
E1 = -3.6796130908395424  E_coul = 1.0919037191803909
Extra cycle  E= -2.58770937165915  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:02:50 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44405664032        1
                                0.288261912504       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.4440566403157953, 1.0], [0.2882619125035751, 1.0]]]}
ecp = {}
CPU time:        23.88
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6306911415611247  E_coul = 1.0632070171183297
init E= -2.5674841244428
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.76238413]
E1 = -3.6801481523095045  E_coul = 1.092370159885898
cycle= 1 E= -2.58777799242361  delta_E= -0.0203  |g|=    0  |ddm|= 0.0269
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74770392]
E1 = -3.6801481523095045  E_coul = 1.092370159885898
cycle= 2 E= -2.58777799242361  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6801481523095045  E_coul = 1.092370159885898
  mo_energy =
[-0.74770392]
E1 = -3.6801481523095045  E_coul = 1.092370159885898
Extra cycle  E= -2.58777799242361  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6801481523095045  E_coul = 1.092370159885898
init E= -2.58777799242361
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.74770392]
E1 = -3.6801481523095045  E_coul = 1.092370159885898
cycle= 1 E= -2.58777799242361  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -3.6801481523095045  E_coul = 1.092370159885898
  mo_energy =
[-0.74770392]
E1 = -3.6801481523095045  E_coul = 1.092370159885898
Extra cycle  E= -2.58777799242361  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:02:51 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44405664032        1
                                0.288261912504       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.4440566403157953, 1.0], [0.2882619125035751, 1.0]]]}
ecp = {}
CPU time:        25.54
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6306911415611247  E_coul = 1.0632070171183297
init E= -2.5674841244428
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.76238413]
E1 = -3.6801481523095045  E_coul = 1.092370159885898
cycle= 1 E= -2.58777799242361  delta_E= -0.0203  |g|=    0  |ddm|= 0.0269
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74770392]
E1 = -3.6801481523095045  E_coul = 1.092370159885898
cycle= 2 E= -2.58777799242361  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6801481523095045  E_coul = 1.092370159885898
  mo_energy =
[-0.74770392]
E1 = -3.6801481523095045  E_coul = 1.092370159885898
Extra cycle  E= -2.58777799242361  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:02:52 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44444067116        1
                                0.288478909643       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.444440671163186, 1.0], [0.2884789096425089, 1.0]]]}
ecp = {}
CPU time:        25.79
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6309802888296745  E_coul = 1.0634490423632468
init E= -2.56753124646643
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.76227991]
E1 = -3.6804149669878212  E_coul = 1.092603225366097
cycle= 1 E= -2.58781174162172  delta_E= -0.0203  |g|=    0  |ddm|= 0.0269
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74760426]
E1 = -3.6804149669878212  E_coul = 1.092603225366097
cycle= 2 E= -2.58781174162172  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6804149669878212  E_coul = 1.092603225366097
  mo_energy =
[-0.74760426]
E1 = -3.6804149669878212  E_coul = 1.092603225366097
Extra cycle  E= -2.58781174162172  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6804149669878212  E_coul = 1.092603225366097
init E= -2.58781174162172
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.74760426]
E1 = -3.6804149669878212  E_coul = 1.092603225366097
cycle= 1 E= -2.58781174162172  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -3.6804149669878212  E_coul = 1.092603225366097
  mo_energy =
[-0.74760426]
E1 = -3.6804149669878212  E_coul = 1.092603225366097
Extra cycle  E= -2.58781174162172  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:02:54 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44444067116        1
                                0.288478909643       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.444440671163186, 1.0], [0.2884789096425089, 1.0]]]}
ecp = {}
CPU time:        27.61
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6309802888296745  E_coul = 1.0634490423632468
init E= -2.56753124646643
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.76227991]
E1 = -3.6804149669878212  E_coul = 1.092603225366097
cycle= 1 E= -2.58781174162172  delta_E= -0.0203  |g|=    0  |ddm|= 0.0269
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74760426]
E1 = -3.6804149669878212  E_coul = 1.092603225366097
cycle= 2 E= -2.58781174162172  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6804149669878212  E_coul = 1.092603225366097
  mo_energy =
[-0.74760426]
E1 = -3.6804149669878212  E_coul = 1.092603225366097
Extra cycle  E= -2.58781174162172  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:02:54 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44463268659        1
                                0.288587408212       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.4446326865868815, 1.0], [0.2885874082119758, 1.0]]]}
ecp = {}
CPU time:        27.86
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.631124496768869  E_coul = 1.0635699080680563
init E= -2.56755458870081
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.7622278]
E1 = -3.6805481956024484  E_coul = 1.0927197194479756
cycle= 1 E= -2.58782847615447  delta_E= -0.0203  |g|=    0  |ddm|= 0.0269
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74755438]
E1 = -3.6805481956024484  E_coul = 1.0927197194479756
cycle= 2 E= -2.58782847615447  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6805481956024484  E_coul = 1.0927197194479756
  mo_energy =
[-0.74755438]
E1 = -3.6805481956024484  E_coul = 1.0927197194479756
Extra cycle  E= -2.58782847615447  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6805481956024484  E_coul = 1.0927197194479756
init E= -2.58782847615447
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.74755438]
E1 = -3.6805481956024484  E_coul = 1.0927197194479756
cycle= 1 E= -2.58782847615447  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -3.6805481956024484  E_coul = 1.0927197194479756
  mo_energy =
[-0.74755438]
E1 = -3.6805481956024484  E_coul = 1.0927197194479756
Extra cycle  E= -2.58782847615447  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:02:56 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44463268659        1
                                0.288587408212       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.4446326865868815, 1.0], [0.2885874082119758, 1.0]]]}
ecp = {}
CPU time:        29.61
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.631124496768869  E_coul = 1.0635699080680563
init E= -2.56755458870081
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.7622278]
E1 = -3.6805481956024484  E_coul = 1.0927197194479756
cycle= 1 E= -2.58782847615447  delta_E= -0.0203  |g|=    0  |ddm|= 0.0269
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74755438]
E1 = -3.6805481956024484  E_coul = 1.0927197194479756
cycle= 2 E= -2.58782847615447  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6805481956024484  E_coul = 1.0927197194479756
  mo_energy =
[-0.74755438]
E1 = -3.6805481956024484  E_coul = 1.0927197194479756
Extra cycle  E= -2.58782847615447  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:02:56 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.4447286943         1
                                0.288641657497       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.444728694298729, 1.0], [0.2886416574967093, 1.0]]]}
ecp = {}
CPU time:        29.89
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.631196509400669  E_coul = 1.0636303042206656
init E= -2.56756620518
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.76220175]
E1 = -3.6806147652647634  E_coul = 1.0927779568318348
cycle= 1 E= -2.58783680843293  delta_E= -0.0203  |g|=    0  |ddm|= 0.0269
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74752943]
E1 = -3.6806147652647634  E_coul = 1.0927779568318348
cycle= 2 E= -2.58783680843293  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6806147652647634  E_coul = 1.0927779568318348
  mo_energy =
[-0.74752943]
E1 = -3.6806147652647634  E_coul = 1.0927779568318348
Extra cycle  E= -2.58783680843293  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6806147652647634  E_coul = 1.0927779568318348
init E= -2.58783680843293
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.74752943]
E1 = -3.6806147652647634  E_coul = 1.0927779568318348
cycle= 1 E= -2.58783680843293  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.6806147652647634  E_coul = 1.0927779568318348
  mo_energy =
[-0.74752943]
E1 = -3.6806147652647634  E_coul = 1.0927779568318348
Extra cycle  E= -2.58783680843293  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:02:58 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.4447286943         1
                                0.288641657497       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.444728694298729, 1.0], [0.2886416574967093, 1.0]]]}
ecp = {}
CPU time:        31.69
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.631196509400669  E_coul = 1.0636303042206656
init E= -2.56756620518
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.76220175]
E1 = -3.6806147652647634  E_coul = 1.0927779568318348
cycle= 1 E= -2.58783680843293  delta_E= -0.0203  |g|=    0  |ddm|= 0.0269
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74752943]
E1 = -3.6806147652647634  E_coul = 1.0927779568318348
cycle= 2 E= -2.58783680843293  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6806147652647634  E_coul = 1.0927779568318348
  mo_energy =
[-0.74752943]
E1 = -3.6806147652647634  E_coul = 1.0927779568318348
Extra cycle  E= -2.58783680843293  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:02:58 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44477669815        1
                                0.288668782139       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.4447766981546533, 1.0], [0.28866878213907604, 1.0]]]}
ecp = {}
CPU time:        32.01
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6312324928928597  E_coul = 1.063660493125723
init E= -2.56757199976714
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.76218873]
E1 = -3.680648038939184  E_coul = 1.0928070731104282
cycle= 1 E= -2.58784096582876  delta_E= -0.0203  |g|=    0  |ddm|= 0.0269
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74751695]
E1 = -3.680648038939184  E_coul = 1.0928070731104282
cycle= 2 E= -2.58784096582876  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.680648038939184  E_coul = 1.0928070731104282
  mo_energy =
[-0.74751695]
E1 = -3.680648038939184  E_coul = 1.0928070731104282
Extra cycle  E= -2.58784096582876  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.680648038939184  E_coul = 1.0928070731104282
init E= -2.58784096582876
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  mo_energy =
[-0.74751695]
E1 = -3.680648038939184  E_coul = 1.0928070731104282
cycle= 1 E= -2.58784096582876  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -3.680648038939184  E_coul = 1.0928070731104282
  mo_energy =
[-0.74751695]
E1 = -3.680648038939184  E_coul = 1.0928070731104282
Extra cycle  E= -2.58784096582876  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.13 sec, wall time      0.17 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:03:00 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44477669815        1
                                0.288668782139       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.4447766981546533, 1.0], [0.28866878213907604, 1.0]]]}
ecp = {}
CPU time:        34.02
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6312324928928597  E_coul = 1.063660493125723
init E= -2.56757199976714
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.76218873]
E1 = -3.680648038939184  E_coul = 1.0928070731104282
cycle= 1 E= -2.58784096582876  delta_E= -0.0203  |g|=    0  |ddm|= 0.0269
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74751695]
E1 = -3.680648038939184  E_coul = 1.0928070731104282
cycle= 2 E= -2.58784096582876  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.680648038939184  E_coul = 1.0928070731104282
  mo_energy =
[-0.74751695]
E1 = -3.680648038939184  E_coul = 1.0928070731104282
Extra cycle  E= -2.58784096582876  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:03:01 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44480070008        1
                                0.28868234446        1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.444800700082615, 1.0], [0.28868234446025937, 1.0]]]}
ecp = {}
CPU time:        34.32
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6312504789343656  E_coul = 1.0636755852859
init E= -2.56757489364847
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.76218221]
E1 = -3.6806646729877723  E_coul = 1.0928216306465068
cycle= 1 E= -2.58784304234127  delta_E= -0.0203  |g|=    0  |ddm|= 0.0269
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74751071]
E1 = -3.6806646729877723  E_coul = 1.0928216306465068
cycle= 2 E= -2.58784304234127  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6806646729877723  E_coul = 1.0928216306465068
  mo_energy =
[-0.74751071]
E1 = -3.6806646729877723  E_coul = 1.0928216306465068
Extra cycle  E= -2.58784304234127  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6806646729877723  E_coul = 1.0928216306465068
init E= -2.58784304234127
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.74751071]
E1 = -3.6806646729877723  E_coul = 1.0928216306465068
cycle= 1 E= -2.58784304234127  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -3.6806646729877723  E_coul = 1.0928216306465068
  mo_energy =
[-0.74751071]
E1 = -3.6806646729877723  E_coul = 1.0928216306465068
Extra cycle  E= -2.58784304234127  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.08 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:03:02 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44480070008        1
                                0.28868234446        1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.444800700082615, 1.0], [0.28868234446025937, 1.0]]]}
ecp = {}
CPU time:        36.15
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6312504789343656  E_coul = 1.0636755852859
init E= -2.56757489364847
    CPU time for initialize scf      0.03 sec, wall time      0.04 sec
  mo_energy =
[-0.76218221]
E1 = -3.6806646729877723  E_coul = 1.0928216306465068
cycle= 1 E= -2.58784304234127  delta_E= -0.0203  |g|=    0  |ddm|= 0.0269
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74751071]
E1 = -3.6806646729877723  E_coul = 1.0928216306465068
cycle= 2 E= -2.58784304234127  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6806646729877723  E_coul = 1.0928216306465068
  mo_energy =
[-0.74751071]
E1 = -3.6806646729877723  E_coul = 1.0928216306465068
Extra cycle  E= -2.58784304234127  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.06 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:03:03 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44481270105        1
                                0.288689125621       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.444812701046596, 1.0], [0.2886891256208511, 1.0]]]}
ecp = {}
CPU time:        36.52
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.631259470529141  E_coul = 1.0636831307929593
init E= -2.56757633973618
    CPU time for initialize scf      0.03 sec, wall time      0.05 sec
  mo_energy =
[-0.76217896]
E1 = -3.680672989314984  E_coul = 1.092828909263757
cycle= 1 E= -2.58784408005123  delta_E= -0.0203  |g|=    0  |ddm|= 0.0269
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74750759]
E1 = -3.680672989314984  E_coul = 1.092828909263757
cycle= 2 E= -2.58784408005123  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.680672989314984  E_coul = 1.092828909263757
  mo_energy =
[-0.74750759]
E1 = -3.680672989314984  E_coul = 1.092828909263757
Extra cycle  E= -2.58784408005123  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.05 sec, wall time      0.08 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.680672989314984  E_coul = 1.092828909263757
init E= -2.58784408005123
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.74750759]
E1 = -3.680672989314984  E_coul = 1.092828909263757
cycle= 1 E= -2.58784408005123  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -3.680672989314984  E_coul = 1.092828909263757
  mo_energy =
[-0.74750759]
E1 = -3.680672989314984  E_coul = 1.092828909263757
Extra cycle  E= -2.58784408005123  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:03:05 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44481270105        1
                                0.288689125621       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.444812701046596, 1.0], [0.2886891256208511, 1.0]]]}
ecp = {}
CPU time:        38.26
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.631259470529141  E_coul = 1.0636831307929593
init E= -2.56757633973618
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.76217896]
E1 = -3.680672989314984  E_coul = 1.092828909263757
cycle= 1 E= -2.58784408005123  delta_E= -0.0203  |g|=    0  |ddm|= 0.0269
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74750759]
E1 = -3.680672989314984  E_coul = 1.092828909263757
cycle= 2 E= -2.58784408005123  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.680672989314984  E_coul = 1.092828909263757
  mo_energy =
[-0.74750759]
E1 = -3.680672989314984  E_coul = 1.092828909263757
Extra cycle  E= -2.58784408005123  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:03:05 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44481870153        1
                                0.288692516201       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.4448187015285865, 1.0], [0.2886925162011469, 1.0]]]}
ecp = {}
CPU time:        38.59
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.631263965970058  E_coul = 1.0636869034032408
init E= -2.56757706256682
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.76217733]
E1 = -3.680677147304327  E_coul = 1.0928325485346868
cycle= 1 E= -2.58784459876964  delta_E= -0.0203  |g|=    0  |ddm|= 0.0269
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74750603]
E1 = -3.680677147304327  E_coul = 1.0928325485346868
cycle= 2 E= -2.58784459876964  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.680677147304327  E_coul = 1.0928325485346868
  mo_energy =
[-0.74750603]
E1 = -3.680677147304327  E_coul = 1.0928325485346868
Extra cycle  E= -2.58784459876964  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.680677147304327  E_coul = 1.0928325485346868
init E= -2.58784459876964
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.74750603]
E1 = -3.680677147304327  E_coul = 1.0928325485346868
cycle= 1 E= -2.58784459876964  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -3.680677147304327  E_coul = 1.0928325485346868
  mo_energy =
[-0.74750603]
E1 = -3.680677147304327  E_coul = 1.0928325485346868
Extra cycle  E= -2.58784459876964  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.08 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:03:07 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44481870153        1
                                0.288692516201       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.4448187015285865, 1.0], [0.2886925162011469, 1.0]]]}
ecp = {}
CPU time:        40.46
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.631263965970058  E_coul = 1.0636869034032408
init E= -2.56757706256682
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.76217733]
E1 = -3.680677147304327  E_coul = 1.0928325485346868
cycle= 1 E= -2.58784459876964  delta_E= -0.0203  |g|=    0  |ddm|= 0.0269
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74750603]
E1 = -3.680677147304327  E_coul = 1.0928325485346868
cycle= 2 E= -2.58784459876964  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.680677147304327  E_coul = 1.0928325485346868
  mo_energy =
[-0.74750603]
E1 = -3.680677147304327  E_coul = 1.0928325485346868
Extra cycle  E= -2.58784459876964  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:03:07 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44482170177        1
                                0.288694211491       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.4448217017695817, 1.0], [0.2886942114912948, 1.0]]]}
ecp = {}
CPU time:        40.81
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6312662136013953  E_coul = 1.0636887896725669
init E= -2.56757742392883
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.76217651]
E1 = -3.680679226255432  E_coul = 1.0928343681607269
cycle= 1 E= -2.58784485809471  delta_E= -0.0203  |g|=    0  |ddm|= 0.0268
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74750524]
E1 = -3.680679226255432  E_coul = 1.0928343681607269
cycle= 2 E= -2.58784485809471  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.680679226255432  E_coul = 1.0928343681607269
  mo_energy =
[-0.74750524]
E1 = -3.680679226255432  E_coul = 1.0928343681607269
Extra cycle  E= -2.58784485809471  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.680679226255432  E_coul = 1.0928343681607269
init E= -2.58784485809471
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.74750524]
E1 = -3.680679226255432  E_coul = 1.0928343681607269
cycle= 1 E= -2.58784485809471  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -3.680679226255432  E_coul = 1.0928343681607269
  mo_energy =
[-0.74750524]
E1 = -3.680679226255432  E_coul = 1.0928343681607269
Extra cycle  E= -2.58784485809471  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.08 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:03:10 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44482170177        1
                                0.288694211491       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.4448217017695817, 1.0], [0.2886942114912948, 1.0]]]}
ecp = {}
CPU time:        43.08
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6312662136013953  E_coul = 1.0636887896725669
init E= -2.56757742392883
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.76217651]
E1 = -3.680679226255432  E_coul = 1.0928343681607269
cycle= 1 E= -2.58784485809471  delta_E= -0.0203  |g|=    0  |ddm|= 0.0268
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74750524]
E1 = -3.680679226255432  E_coul = 1.0928343681607269
cycle= 2 E= -2.58784485809471  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.680679226255432  E_coul = 1.0928343681607269
  mo_energy =
[-0.74750524]
E1 = -3.680679226255432  E_coul = 1.0928343681607269
Extra cycle  E= -2.58784485809471  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.05 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:03:10 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44482320189        1
                                0.288695059136       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.4448232018900793, 1.0], [0.2886950591363688, 1.0]]]}
ecp = {}
CPU time:        43.50
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.631267337394787  E_coul = 1.0636897327982782
init E= -2.56757760459651
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.76217611]
E1 = -3.6806802657200937  E_coul = 1.0928352779713912
cycle= 1 E= -2.5878449877487  delta_E= -0.0203  |g|=    0  |ddm|= 0.0268
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74750485]
E1 = -3.6806802657200937  E_coul = 1.0928352779713912
cycle= 2 E= -2.5878449877487  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6806802657200937  E_coul = 1.0928352779713912
  mo_energy =
[-0.74750485]
E1 = -3.6806802657200937  E_coul = 1.0928352779713912
Extra cycle  E= -2.5878449877487  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6806802657200937  E_coul = 1.0928352779713912
init E= -2.5878449877487
    CPU time for initialize scf      0.04 sec, wall time      0.04 sec
  mo_energy =
[-0.74750485]
E1 = -3.6806802657200937  E_coul = 1.0928352779713912
cycle= 1 E= -2.5878449877487  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.01 sec
E1 = -3.6806802657200937  E_coul = 1.0928352779713912
  mo_energy =
[-0.74750485]
E1 = -3.6806802657200937  E_coul = 1.0928352779713912
Extra cycle  E= -2.5878449877487  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.08 sec, wall time      0.08 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:03:12 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44482320189        1
                                0.288695059136       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.4448232018900793, 1.0], [0.2886950591363688, 1.0]]]}
ecp = {}
CPU time:        45.50
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.631267337394787  E_coul = 1.0636897327982782
init E= -2.56757760459651
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.76217611]
E1 = -3.6806802657200937  E_coul = 1.0928352779713912
cycle= 1 E= -2.5878449877487  delta_E= -0.0203  |g|=    0  |ddm|= 0.0268
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74750485]
E1 = -3.6806802657200937  E_coul = 1.0928352779713912
cycle= 2 E= -2.5878449877487  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6806802657200937  E_coul = 1.0928352779713912
  mo_energy =
[-0.74750485]
E1 = -3.6806802657200937  E_coul = 1.0928352779713912
Extra cycle  E= -2.5878449877487  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.05 sec, wall time      0.05 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:03:13 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44482395195        1
                                0.288695482959       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.444823951950328, 1.0], [0.2886954829589058, 1.0]]]}
ecp = {}
CPU time:        45.95
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6312678992859166  E_coul = 1.0636902043588974
init E= -2.56757769492702
    CPU time for initialize scf      0.02 sec, wall time      0.03 sec
  mo_energy =
[-0.7621759]
E1 = -3.680680785449704  E_coul = 1.0928357328761356
cycle= 1 E= -2.58784505257357  delta_E= -0.0203  |g|=    0  |ddm|= 0.0268
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74750466]
E1 = -3.680680785449704  E_coul = 1.0928357328761356
cycle= 2 E= -2.58784505257357  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.680680785449704  E_coul = 1.0928357328761356
  mo_energy =
[-0.74750466]
E1 = -3.680680785449704  E_coul = 1.0928357328761356
Extra cycle  E= -2.58784505257357  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.05 sec, wall time      0.05 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.680680785449704  E_coul = 1.0928357328761356
init E= -2.58784505257357
    CPU time for initialize scf      0.05 sec, wall time      0.06 sec
  mo_energy =
[-0.74750466]
E1 = -3.680680785449704  E_coul = 1.0928357328761356
cycle= 1 E= -2.58784505257357  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -3.680680785449704  E_coul = 1.0928357328761356
  mo_energy =
[-0.74750466]
E1 = -3.680680785449704  E_coul = 1.0928357328761356
Extra cycle  E= -2.58784505257357  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.13 sec, wall time      0.25 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:03:15 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44482395195        1
                                0.288695482959       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.444823951950328, 1.0], [0.2886954829589058, 1.0]]]}
ecp = {}
CPU time:        48.11
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6312678992859166  E_coul = 1.0636902043588974
init E= -2.56757769492702
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.7621759]
E1 = -3.680680785449704  E_coul = 1.0928357328761356
cycle= 1 E= -2.58784505257357  delta_E= -0.0203  |g|=    0  |ddm|= 0.0268
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74750466]
E1 = -3.680680785449704  E_coul = 1.0928357328761356
cycle= 2 E= -2.58784505257357  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.680680785449704  E_coul = 1.0928357328761356
  mo_energy =
[-0.74750466]
E1 = -3.680680785449704  E_coul = 1.0928357328761356
Extra cycle  E= -2.58784505257357  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:03:16 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44482470201        1
                                0.288695906781       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.444824702010577, 1.0], [0.28869590678144275, 1.0]]]}
ecp = {}
CPU time:        48.51
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.631268461173325  E_coul = 1.0636906759180205
init E= -2.5675777852553
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.7621757]
E1 = -3.680681305177495  E_coul = 1.0928361877804855
cycle= 1 E= -2.58784511739701  delta_E= -0.0203  |g|=    0  |ddm|= 0.0268
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74750446]
E1 = -3.680681305177495  E_coul = 1.0928361877804855
cycle= 2 E= -2.58784511739701  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.680681305177495  E_coul = 1.0928361877804855
  mo_energy =
[-0.74750446]
E1 = -3.680681305177495  E_coul = 1.0928361877804855
Extra cycle  E= -2.58784511739701  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.680681305177495  E_coul = 1.0928361877804855
init E= -2.58784511739701
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.74750446]
E1 = -3.680681305177495  E_coul = 1.0928361877804855
cycle= 1 E= -2.58784511739701  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -3.680681305177495  E_coul = 1.0928361877804855
  mo_energy =
[-0.74750446]
E1 = -3.680681305177495  E_coul = 1.0928361877804855
Extra cycle  E= -2.58784511739701  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.08 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:03:18 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44482470201        1
                                0.288695906781       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.444824702010577, 1.0], [0.28869590678144275, 1.0]]]}
ecp = {}
CPU time:        50.43
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.631268461173325  E_coul = 1.0636906759180205
init E= -2.5675777852553
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.7621757]
E1 = -3.680681305177495  E_coul = 1.0928361877804855
cycle= 1 E= -2.58784511739701  delta_E= -0.0203  |g|=    0  |ddm|= 0.0268
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74750446]
E1 = -3.680681305177495  E_coul = 1.0928361877804855
cycle= 2 E= -2.58784511739701  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.680681305177495  E_coul = 1.0928361877804855
  mo_energy =
[-0.74750446]
E1 = -3.680681305177495  E_coul = 1.0928361877804855
Extra cycle  E= -2.58784511739701  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.03 sec, wall time      0.03 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:03:18 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.1503005091         1
                                0.206239372012       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.1503005091010463, 1.0], [0.20623937201150944, 1.0]]]}
ecp = {}
CPU time:        50.83
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.4586439286568713  E_coul = 0.9276666416737546
init E= -2.53097728698312
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.82290564]
E1 = -3.5503258416237697  E_coul = 0.9774997625936509
cycle= 1 E= -2.57282607903012  delta_E= -0.0418  |g|=    0  |ddm|= 0.0516
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.79766316]
E1 = -3.5503258416237697  E_coul = 0.9774997625936509
cycle= 2 E= -2.57282607903012  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.5503258416237697  E_coul = 0.9774997625936509
  mo_energy =
[-0.79766316]
E1 = -3.5503258416237697  E_coul = 0.9774997625936509
Extra cycle  E= -2.57282607903012  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.03 sec, wall time      0.03 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.5503258416237697  E_coul = 0.9774997625936509
init E= -2.57282607903012
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.79766316]
E1 = -3.5503258416237697  E_coul = 0.9774997625936509
cycle= 1 E= -2.57282607903012  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -3.5503258416237697  E_coul = 0.9774997625936509
  mo_energy =
[-0.79766316]
E1 = -3.5503258416237697  E_coul = 0.9774997625936509
Extra cycle  E= -2.57282607903012  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:03:20 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.1503005091         1
                                0.206239372012       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.1503005091010463, 1.0], [0.20623937201150944, 1.0]]]}
ecp = {}
CPU time:        52.76
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.4586439286568713  E_coul = 0.9276666416737546
init E= -2.53097728698312
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.82290564]
E1 = -3.5503258416237697  E_coul = 0.9774997625936509
cycle= 1 E= -2.57282607903012  delta_E= -0.0418  |g|=    0  |ddm|= 0.0516
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.79766316]
E1 = -3.5503258416237697  E_coul = 0.9774997625936509
cycle= 2 E= -2.57282607903012  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.5503258416237697  E_coul = 0.9774997625936509
  mo_energy =
[-0.79766316]
E1 = -3.5503258416237697  E_coul = 0.9774997625936509
Extra cycle  E= -2.57282607903012  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:03:20 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.1503005091         1
                                0.206239372012       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.150300509101046, 1.0], [0.20623937201150944, 1.0]]]}
ecp = {}
CPU time:        53.19
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.4586439286568713  E_coul = 0.9276666416737539
init E= -2.53097728698312
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.82290564]
E1 = -3.5503258416237715  E_coul = 0.9774997625936511
cycle= 1 E= -2.57282607903012  delta_E= -0.0418  |g|=    0  |ddm|= 0.0516
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.79766316]
E1 = -3.5503258416237715  E_coul = 0.9774997625936511
cycle= 2 E= -2.57282607903012  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.5503258416237715  E_coul = 0.9774997625936511
  mo_energy =
[-0.79766316]
E1 = -3.5503258416237715  E_coul = 0.9774997625936511
Extra cycle  E= -2.57282607903012  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.5503258416237715  E_coul = 0.9774997625936511
init E= -2.57282607903012
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.79766316]
E1 = -3.5503258416237715  E_coul = 0.9774997625936511
cycle= 1 E= -2.57282607903012  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -3.5503258416237715  E_coul = 0.9774997625936511
  mo_energy =
[-0.79766316]
E1 = -3.5503258416237715  E_coul = 0.9774997625936511
Extra cycle  E= -2.57282607903012  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.08 sec, wall time      0.08 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:03:22 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.1503005091         1
                                0.206239372012       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.150300509101046, 1.0], [0.20623937201150944, 1.0]]]}
ecp = {}
CPU time:        55.16
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.4586439286568713  E_coul = 0.9276666416737539
init E= -2.53097728698312
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82290564]
E1 = -3.5503258416237715  E_coul = 0.9774997625936511
cycle= 1 E= -2.57282607903012  delta_E= -0.0418  |g|=    0  |ddm|= 0.0516
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.79766316]
E1 = -3.5503258416237715  E_coul = 0.9774997625936511
cycle= 2 E= -2.57282607903012  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.5503258416237715  E_coul = 0.9774997625936511
  mo_energy =
[-0.79766316]
E1 = -3.5503258416237715  E_coul = 0.9774997625936511
Extra cycle  E= -2.57282607903012  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.06 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:03:23 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.46737117316        1
                                0.259693118523       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.467371173155382, 1.0], [0.259693118523246, 1.0]]]}
ecp = {}
CPU time:        55.78
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.5704637414772376  E_coul = 1.0328807247240444
init E= -2.53758301675319
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.76558831]
E1 = -3.633283893380434  E_coul = 1.0695462904972364
cycle= 1 E= -2.5637376028832  delta_E= -0.0262  |g|=    0  |ddm|= 0.0346
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74709566]
E1 = -3.633283893380434  E_coul = 1.0695462904972364
cycle= 2 E= -2.5637376028832  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.633283893380434  E_coul = 1.0695462904972364
  mo_energy =
[-0.74709566]
E1 = -3.633283893380434  E_coul = 1.0695462904972364
Extra cycle  E= -2.5637376028832  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.633283893380434  E_coul = 1.0695462904972364
init E= -2.5637376028832
    CPU time for initialize scf      0.05 sec, wall time      0.09 sec
  mo_energy =
[-0.74709566]
E1 = -3.633283893380434  E_coul = 1.0695462904972364
cycle= 1 E= -2.5637376028832  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
E1 = -3.633283893380434  E_coul = 1.0695462904972364
  mo_energy =
[-0.74709566]
E1 = -3.633283893380434  E_coul = 1.0695462904972364
Extra cycle  E= -2.5637376028832  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.11 sec, wall time      0.17 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:03:26 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.46737117316        1
                                0.259693118523       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.467371173155382, 1.0], [0.259693118523246, 1.0]]]}
ecp = {}
CPU time:        58.11
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.5704637414772376  E_coul = 1.0328807247240444
init E= -2.53758301675319
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.76558831]
E1 = -3.633283893380434  E_coul = 1.0695462904972364
cycle= 1 E= -2.5637376028832  delta_E= -0.0262  |g|=    0  |ddm|= 0.0346
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74709566]
E1 = -3.633283893380434  E_coul = 1.0695462904972364
cycle= 2 E= -2.5637376028832  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.633283893380434  E_coul = 1.0695462904972364
  mo_energy =
[-0.74709566]
E1 = -3.633283893380434  E_coul = 1.0695462904972364
Extra cycle  E= -2.5637376028832  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.05 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:03:26 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.43273711681        1
                                0.281665906238       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.432737116813005, 1.0], [0.28166590623846627, 1.0]]]}
ecp = {}
CPU time:        58.59
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6213753406962725  E_coul = 1.0556875559208738
init E= -2.5656877847754
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.76550849]
E1 = -3.671779002647292  E_coul = 1.0852789766627386
cycle= 1 E= -2.58650002598455  delta_E= -0.0208  |g|=    0  |ddm|= 0.0275
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.75061052]
E1 = -3.671779002647292  E_coul = 1.0852789766627386
cycle= 2 E= -2.58650002598455  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.671779002647292  E_coul = 1.0852789766627386
  mo_energy =
[-0.75061052]
E1 = -3.671779002647292  E_coul = 1.0852789766627386
Extra cycle  E= -2.58650002598455  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.671779002647292  E_coul = 1.0852789766627386
init E= -2.58650002598455
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.75061052]
E1 = -3.671779002647292  E_coul = 1.0852789766627386
cycle= 1 E= -2.58650002598455  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.671779002647292  E_coul = 1.0852789766627386
  mo_energy =
[-0.75061052]
E1 = -3.671779002647292  E_coul = 1.0852789766627386
Extra cycle  E= -2.58650002598455  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.08 sec, wall time      0.08 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:03:28 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.43273711681        1
                                0.281665906238       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.432737116813005, 1.0], [0.28166590623846627, 1.0]]]}
ecp = {}
CPU time:        60.73
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6213753406962725  E_coul = 1.0556875559208738
init E= -2.5656877847754
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.76550849]
E1 = -3.671779002647292  E_coul = 1.0852789766627386
cycle= 1 E= -2.58650002598455  delta_E= -0.0208  |g|=    0  |ddm|= 0.0275
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.75061052]
E1 = -3.671779002647292  E_coul = 1.0852789766627386
cycle= 2 E= -2.58650002598455  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.671779002647292  E_coul = 1.0852789766627386
  mo_energy =
[-0.75061052]
E1 = -3.671779002647292  E_coul = 1.0852789766627386
Extra cycle  E= -2.58650002598455  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:03:29 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.43878090941        1
                                0.28518090651        1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.4387809094117907, 1.0], [0.2851809065099545, 1.0]]]}
ecp = {}
CPU time:        61.25
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6264532716155444  E_coul = 1.0597416699364182
init E= -2.56671160167913
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.76384065]
E1 = -3.676294202048358  E_coul = 1.0890714133928703
cycle= 1 E= -2.58722278865549  delta_E= -0.0205  |g|=    0  |ddm|= 0.0271
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74907569]
E1 = -3.676294202048358  E_coul = 1.0890714133928703
cycle= 2 E= -2.58722278865549  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.676294202048358  E_coul = 1.0890714133928703
  mo_energy =
[-0.74907569]
E1 = -3.676294202048358  E_coul = 1.0890714133928703
Extra cycle  E= -2.58722278865549  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.676294202048358  E_coul = 1.0890714133928703
init E= -2.58722278865549
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.74907569]
E1 = -3.676294202048358  E_coul = 1.0890714133928703
cycle= 1 E= -2.58722278865549  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.676294202048358  E_coul = 1.0890714133928703
  mo_energy =
[-0.74907569]
E1 = -3.676294202048358  E_coul = 1.0890714133928703
Extra cycle  E= -2.58722278865549  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:03:31 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.43878090941        1
                                0.28518090651        1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.4387809094117907, 1.0], [0.2851809065099545, 1.0]]]}
ecp = {}
CPU time:        63.54
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6264532716155444  E_coul = 1.0597416699364182
init E= -2.56671160167913
    CPU time for initialize scf      0.04 sec, wall time      0.05 sec
  mo_energy =
[-0.76384065]
E1 = -3.676294202048358  E_coul = 1.0890714133928703
cycle= 1 E= -2.58722278865549  delta_E= -0.0205  |g|=    0  |ddm|= 0.0271
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
  mo_energy =
[-0.74907569]
E1 = -3.676294202048358  E_coul = 1.0890714133928703
cycle= 2 E= -2.58722278865549  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
E1 = -3.676294202048358  E_coul = 1.0890714133928703
  mo_energy =
[-0.74907569]
E1 = -3.676294202048358  E_coul = 1.0890714133928703
Extra cycle  E= -2.58722278865549  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.08 sec, wall time      0.11 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:03:32 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44180280571        1
                                0.286938406646       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.441802805711184, 1.0], [0.28693840664569864, 1.0]]]}
ecp = {}
CPU time:        64.17
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.628893278820776  E_coul = 1.061729163809158
init E= -2.56716411501162
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.76300782]
E1 = -3.678503584068718  E_coul = 1.0909572209539549
cycle= 1 E= -2.58754636311476  delta_E= -0.0204  |g|=    0  |ddm|= 0.027
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74829457]
E1 = -3.678503584068718  E_coul = 1.0909572209539549
cycle= 2 E= -2.58754636311476  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
E1 = -3.678503584068718  E_coul = 1.0909572209539549
  mo_energy =
[-0.74829457]
E1 = -3.678503584068718  E_coul = 1.0909572209539549
Extra cycle  E= -2.58754636311476  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.05 sec, wall time      0.05 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.678503584068718  E_coul = 1.0909572209539549
init E= -2.58754636311476
    CPU time for initialize scf      0.04 sec, wall time      0.04 sec
  mo_energy =
[-0.74829457]
E1 = -3.678503584068718  E_coul = 1.0909572209539549
cycle= 1 E= -2.58754636311476  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -3.678503584068718  E_coul = 1.0909572209539549
  mo_energy =
[-0.74829457]
E1 = -3.678503584068718  E_coul = 1.0909572209539549
Extra cycle  E= -2.58754636311476  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.08 sec, wall time      0.08 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:03:34 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44180280571        1
                                0.286938406646       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.441802805711184, 1.0], [0.28693840664569864, 1.0]]]}
ecp = {}
CPU time:        66.36
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.628893278820776  E_coul = 1.061729163809158
init E= -2.56716411501162
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.76300782]
E1 = -3.678503584068718  E_coul = 1.0909572209539549
cycle= 1 E= -2.58754636311476  delta_E= -0.0204  |g|=    0  |ddm|= 0.027
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74829457]
E1 = -3.678503584068718  E_coul = 1.0909572209539549
cycle= 2 E= -2.58754636311476  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.678503584068718  E_coul = 1.0909572209539549
  mo_energy =
[-0.74829457]
E1 = -3.678503584068718  E_coul = 1.0909572209539549
Extra cycle  E= -2.58754636311476  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:03:35 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44331375386        1
                                0.287817156714       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.4433137538608802, 1.0], [0.28781715671357067, 1.0]]]}
ecp = {}
CPU time:        66.88
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6300889200583484  E_coul = 1.0627131493344086
init E= -2.56737577072394
    CPU time for initialize scf      0.02 sec, wall time      0.03 sec
  mo_energy =
[-0.76259167]
E1 = -3.679596379872245  E_coul = 1.091897554847822
cycle= 1 E= -2.58769882502442  delta_E= -0.0203  |g|=    0  |ddm|= 0.0269
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74790064]
E1 = -3.679596379872245  E_coul = 1.091897554847822
cycle= 2 E= -2.58769882502442  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.679596379872245  E_coul = 1.091897554847822
  mo_energy =
[-0.74790064]
E1 = -3.679596379872245  E_coul = 1.091897554847822
Extra cycle  E= -2.58769882502442  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.679596379872245  E_coul = 1.091897554847822
init E= -2.58769882502442
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.74790064]
E1 = -3.679596379872245  E_coul = 1.091897554847822
cycle= 1 E= -2.58769882502442  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -3.679596379872245  E_coul = 1.091897554847822
  mo_energy =
[-0.74790064]
E1 = -3.679596379872245  E_coul = 1.091897554847822
Extra cycle  E= -2.58769882502442  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:03:37 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44331375386        1
                                0.287817156714       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.4433137538608802, 1.0], [0.28781715671357067, 1.0]]]}
ecp = {}
CPU time:        69.01
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6300889200583484  E_coul = 1.0627131493344086
init E= -2.56737577072394
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.76259167]
E1 = -3.679596379872245  E_coul = 1.091897554847822
cycle= 1 E= -2.58769882502442  delta_E= -0.0203  |g|=    0  |ddm|= 0.0269
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74790064]
E1 = -3.679596379872245  E_coul = 1.091897554847822
cycle= 2 E= -2.58769882502442  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.679596379872245  E_coul = 1.091897554847822
  mo_energy =
[-0.74790064]
E1 = -3.679596379872245  E_coul = 1.091897554847822
Extra cycle  E= -2.58769882502442  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:03:38 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44406922794        1
                                0.288256531748       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.444069227935729, 1.0], [0.2882565317475067, 1.0]]]}
ecp = {}
CPU time:        69.55
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.630680696545803  E_coul = 1.06320271772528
init E= -2.56747797882052
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.76238366]
E1 = -3.680139823561996  E_coul = 1.0923670833620198
cycle= 1 E= -2.58777274019998  delta_E= -0.0203  |g|=    0  |ddm|= 0.0269
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74770283]
E1 = -3.680139823561996  E_coul = 1.0923670833620198
cycle= 2 E= -2.58777274019998  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.680139823561996  E_coul = 1.0923670833620198
  mo_energy =
[-0.74770283]
E1 = -3.680139823561996  E_coul = 1.0923670833620198
Extra cycle  E= -2.58777274019998  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.05 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.680139823561996  E_coul = 1.0923670833620198
init E= -2.58777274019998
    CPU time for initialize scf      0.04 sec, wall time      0.05 sec
  mo_energy =
[-0.74770283]
E1 = -3.680139823561996  E_coul = 1.0923670833620198
cycle= 1 E= -2.58777274019998  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -3.680139823561996  E_coul = 1.0923670833620198
  mo_energy =
[-0.74770283]
E1 = -3.680139823561996  E_coul = 1.0923670833620198
Extra cycle  E= -2.58777274019998  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:03:40 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44406922794        1
                                0.288256531748       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.444069227935729, 1.0], [0.2882565317475067, 1.0]]]}
ecp = {}
CPU time:        71.63
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.630680696545803  E_coul = 1.06320271772528
init E= -2.56747797882052
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.76238366]
E1 = -3.680139823561996  E_coul = 1.0923670833620198
cycle= 1 E= -2.58777274019998  delta_E= -0.0203  |g|=    0  |ddm|= 0.0269
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74770283]
E1 = -3.680139823561996  E_coul = 1.0923670833620198
cycle= 2 E= -2.58777274019998  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.680139823561996  E_coul = 1.0923670833620198
  mo_energy =
[-0.74770283]
E1 = -3.680139823561996  E_coul = 1.0923670833620198
Extra cycle  E= -2.58777274019998  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:03:40 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44444696497        1
                                0.288476219264       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.4444469649731526, 1.0], [0.28847621926447475, 1.0]]]}
ecp = {}
CPU time:        72.18
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.630975079521696  E_coul = 1.0634468978136191
init E= -2.56752818170808
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.76227968]
E1 = -3.6804108092833974  E_coul = 1.092601688511939
cycle= 1 E= -2.58780912077146  delta_E= -0.0203  |g|=    0  |ddm|= 0.0269
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74760372]
E1 = -3.6804108092833974  E_coul = 1.092601688511939
cycle= 2 E= -2.58780912077146  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6804108092833974  E_coul = 1.092601688511939
  mo_energy =
[-0.74760372]
E1 = -3.6804108092833974  E_coul = 1.092601688511939
Extra cycle  E= -2.58780912077146  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.05 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6804108092833974  E_coul = 1.092601688511939
init E= -2.58780912077146
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.74760372]
E1 = -3.6804108092833974  E_coul = 1.092601688511939
cycle= 1 E= -2.58780912077146  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -3.6804108092833974  E_coul = 1.092601688511939
  mo_energy =
[-0.74760372]
E1 = -3.6804108092833974  E_coul = 1.092601688511939
Extra cycle  E= -2.58780912077146  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.08 sec, wall time      0.08 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:03:43 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44444696497        1
                                0.288476219264       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.4444469649731526, 1.0], [0.28847621926447475, 1.0]]]}
ecp = {}
CPU time:        74.53
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.630975079521696  E_coul = 1.0634468978136191
init E= -2.56752818170808
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.76227968]
E1 = -3.6804108092833974  E_coul = 1.092601688511939
cycle= 1 E= -2.58780912077146  delta_E= -0.0203  |g|=    0  |ddm|= 0.0269
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74760372]
E1 = -3.6804108092833974  E_coul = 1.092601688511939
cycle= 2 E= -2.58780912077146  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6804108092833974  E_coul = 1.092601688511939
  mo_energy =
[-0.74760372]
E1 = -3.6804108092833974  E_coul = 1.092601688511939
Extra cycle  E= -2.58780912077146  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:03:43 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44463583349        1
                                0.288586063023       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.4446358334918648, 1.0], [0.28858606302295875, 1.0]]]}
ecp = {}
CPU time:        75.06
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.631121895410677  E_coul = 1.0635688370785112
init E= -2.56755305833217
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.76222769]
E1 = -3.6805461184157364  E_coul = 1.0927189513724893
cycle= 1 E= -2.58782716704325  delta_E= -0.0203  |g|=    0  |ddm|= 0.0269
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74755411]
E1 = -3.6805461184157364  E_coul = 1.0927189513724893
cycle= 2 E= -2.58782716704325  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6805461184157364  E_coul = 1.0927189513724893
  mo_energy =
[-0.74755411]
E1 = -3.6805461184157364  E_coul = 1.0927189513724893
Extra cycle  E= -2.58782716704325  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6805461184157364  E_coul = 1.0927189513724893
init E= -2.58782716704325
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.74755411]
E1 = -3.6805461184157364  E_coul = 1.0927189513724893
cycle= 1 E= -2.58782716704325  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -3.6805461184157364  E_coul = 1.0927189513724893
  mo_energy =
[-0.74755411]
E1 = -3.6805461184157364  E_coul = 1.0927189513724893
Extra cycle  E= -2.58782716704325  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:03:45 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44463583349        1
                                0.288586063023       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.4446358334918648, 1.0], [0.28858606302295875, 1.0]]]}
ecp = {}
CPU time:        77.10
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.631121895410677  E_coul = 1.0635688370785112
init E= -2.56755305833217
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.76222769]
E1 = -3.6805461184157364  E_coul = 1.0927189513724893
cycle= 1 E= -2.58782716704325  delta_E= -0.0203  |g|=    0  |ddm|= 0.0269
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74755411]
E1 = -3.6805461184157364  E_coul = 1.0927189513724893
cycle= 2 E= -2.58782716704325  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6805461184157364  E_coul = 1.0927189513724893
  mo_energy =
[-0.74755411]
E1 = -3.6805461184157364  E_coul = 1.0927189513724893
Extra cycle  E= -2.58782716704325  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.05 sec, wall time      0.05 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:03:46 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44473026775        1
                                0.288640984902       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.444730267751221, 1.0], [0.28864098490220075, 1.0]]]}
ecp = {}
CPU time:        77.64
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.631195209545005  E_coul = 1.063629769047028
init E= -2.56756544049798
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.76220169]
E1 = -3.680613727087551  E_coul = 1.0927775728819453
cycle= 1 E= -2.58783615420561  delta_E= -0.0203  |g|=    0  |ddm|= 0.0269
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74752929]
E1 = -3.680613727087551  E_coul = 1.0927775728819453
cycle= 2 E= -2.58783615420561  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.680613727087551  E_coul = 1.0927775728819453
  mo_energy =
[-0.74752929]
E1 = -3.680613727087551  E_coul = 1.0927775728819453
Extra cycle  E= -2.58783615420561  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.680613727087551  E_coul = 1.0927775728819453
init E= -2.58783615420561
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.74752929]
E1 = -3.680613727087551  E_coul = 1.0927775728819453
cycle= 1 E= -2.58783615420561  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.680613727087551  E_coul = 1.0927775728819453
  mo_energy =
[-0.74752929]
E1 = -3.680613727087551  E_coul = 1.0927775728819453
Extra cycle  E= -2.58783615420561  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:03:48 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44473026775        1
                                0.288640984902       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.444730267751221, 1.0], [0.28864098490220075, 1.0]]]}
ecp = {}
CPU time:        79.66
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.631195209545005  E_coul = 1.063629769047028
init E= -2.56756544049798
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.76220169]
E1 = -3.680613727087551  E_coul = 1.0927775728819453
cycle= 1 E= -2.58783615420561  delta_E= -0.0203  |g|=    0  |ddm|= 0.0269
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74752929]
E1 = -3.680613727087551  E_coul = 1.0927775728819453
cycle= 2 E= -2.58783615420561  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.680613727087551  E_coul = 1.0927775728819453
  mo_energy =
[-0.74752929]
E1 = -3.680613727087551  E_coul = 1.0927775728819453
Extra cycle  E= -2.58783615420561  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:03:49 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44477748488        1
                                0.288668445842       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.4447774848808987, 1.0], [0.2886684458418217, 1.0]]]}
ecp = {}
CPU time:        80.20
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6312318431708204  E_coul = 1.0636602256191654
init E= -2.56757161755166
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.7621887]
E1 = -3.6806475199545843  E_coul = 1.0928068811574416
cycle= 1 E= -2.58784063879714  delta_E= -0.0203  |g|=    0  |ddm|= 0.0269
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74751688]
E1 = -3.6806475199545843  E_coul = 1.0928068811574416
cycle= 2 E= -2.58784063879714  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6806475199545843  E_coul = 1.0928068811574416
  mo_energy =
[-0.74751688]
E1 = -3.6806475199545843  E_coul = 1.0928068811574416
Extra cycle  E= -2.58784063879714  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6806475199545843  E_coul = 1.0928068811574416
init E= -2.58784063879714
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.74751688]
E1 = -3.6806475199545843  E_coul = 1.0928068811574416
cycle= 1 E= -2.58784063879714  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.6806475199545843  E_coul = 1.0928068811574416
  mo_energy =
[-0.74751688]
E1 = -3.6806475199545843  E_coul = 1.0928068811574416
Extra cycle  E= -2.58784063879714  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:03:51 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44477748488        1
                                0.288668445842       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.4447774848808987, 1.0], [0.2886684458418217, 1.0]]]}
ecp = {}
CPU time:        82.34
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6312318431708204  E_coul = 1.0636602256191654
init E= -2.56757161755166
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.7621887]
E1 = -3.6806475199545843  E_coul = 1.0928068811574416
cycle= 1 E= -2.58784063879714  delta_E= -0.0203  |g|=    0  |ddm|= 0.0269
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
  mo_energy =
[-0.74751688]
E1 = -3.6806475199545843  E_coul = 1.0928068811574416
cycle= 2 E= -2.58784063879714  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6806475199545843  E_coul = 1.0928068811574416
  mo_energy =
[-0.74751688]
E1 = -3.6806475199545843  E_coul = 1.0928068811574416
Extra cycle  E= -2.58784063879714  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:03:51 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44480109345        1
                                0.288682176312       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.444801093445738, 1.0], [0.28868217631163223, 1.0]]]}
ecp = {}
CPU time:        82.94
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.631250154124787  E_coul = 1.0636754515526836
init E= -2.5675747025721
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.7621822]
E1 = -3.6806644135214723  E_coul = 1.0928215346755028
cycle= 1 E= -2.58784287884597  delta_E= -0.0203  |g|=    0  |ddm|= 0.0269
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74751067]
E1 = -3.6806644135214723  E_coul = 1.0928215346755028
cycle= 2 E= -2.58784287884597  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6806644135214723  E_coul = 1.0928215346755028
  mo_energy =
[-0.74751067]
E1 = -3.6806644135214723  E_coul = 1.0928215346755028
Extra cycle  E= -2.58784287884597  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6806644135214723  E_coul = 1.0928215346755028
init E= -2.58784287884597
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.74751067]
E1 = -3.6806644135214723  E_coul = 1.0928215346755028
cycle= 1 E= -2.58784287884597  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -3.6806644135214723  E_coul = 1.0928215346755028
  mo_energy =
[-0.74751067]
E1 = -3.6806644135214723  E_coul = 1.0928215346755028
Extra cycle  E= -2.58784287884597  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.08 sec, wall time      0.08 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:03:54 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44480109345        1
                                0.288682176312       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.444801093445738, 1.0], [0.28868217631163223, 1.0]]]}
ecp = {}
CPU time:        85.28
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.631250154124787  E_coul = 1.0636754515526836
init E= -2.5675747025721
    CPU time for initialize scf      0.02 sec, wall time      0.03 sec
  mo_energy =
[-0.7621822]
E1 = -3.6806644135214723  E_coul = 1.0928215346755028
cycle= 1 E= -2.58784287884597  delta_E= -0.0203  |g|=    0  |ddm|= 0.0269
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74751067]
E1 = -3.6806644135214723  E_coul = 1.0928215346755028
cycle= 2 E= -2.58784287884597  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6806644135214723  E_coul = 1.0928215346755028
  mo_energy =
[-0.74751067]
E1 = -3.6806644135214723  E_coul = 1.0928215346755028
Extra cycle  E= -2.58784287884597  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.05 sec, wall time      0.05 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:03:54 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44481289773        1
                                0.288689041547       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.4448128977281574, 1.0], [0.2886890415465375, 1.0]]]}
ecp = {}
CPU time:        85.92
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.631259308137212  E_coul = 1.0636830639313668
init E= -2.56757624420585
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.76217895]
E1 = -3.6806728595883325  E_coul = 1.0928288612796266
cycle= 1 E= -2.58784399830871  delta_E= -0.0203  |g|=    0  |ddm|= 0.0269
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74750757]
E1 = -3.6806728595883325  E_coul = 1.0928288612796266
cycle= 2 E= -2.58784399830871  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6806728595883325  E_coul = 1.0928288612796266
  mo_energy =
[-0.74750757]
E1 = -3.6806728595883325  E_coul = 1.0928288612796266
Extra cycle  E= -2.58784399830871  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6806728595883325  E_coul = 1.0928288612796266
init E= -2.58784399830871
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.74750757]
E1 = -3.6806728595883325  E_coul = 1.0928288612796266
cycle= 1 E= -2.58784399830871  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -3.6806728595883325  E_coul = 1.0928288612796266
  mo_energy =
[-0.74750757]
E1 = -3.6806728595883325  E_coul = 1.0928288612796266
Extra cycle  E= -2.58784399830871  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:03:57 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44481289773        1
                                0.288689041547       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.4448128977281574, 1.0], [0.2886890415465375, 1.0]]]}
ecp = {}
CPU time:        88.25
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.631259308137212  E_coul = 1.0636830639313668
init E= -2.56757624420585
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.76217895]
E1 = -3.6806728595883325  E_coul = 1.0928288612796266
cycle= 1 E= -2.58784399830871  delta_E= -0.0203  |g|=    0  |ddm|= 0.0269
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74750757]
E1 = -3.6806728595883325  E_coul = 1.0928288612796266
cycle= 2 E= -2.58784399830871  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6806728595883325  E_coul = 1.0928288612796266
  mo_energy =
[-0.74750757]
E1 = -3.6806728595883325  E_coul = 1.0928288612796266
Extra cycle  E= -2.58784399830871  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:03:57 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44481879987        1
                                0.288692474164       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.4448187998693673, 1.0], [0.28869247416399013, 1.0]]]}
ecp = {}
CPU time:        88.91
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6312638847773044  E_coul = 1.0636868699736963
init E= -2.56757701480361
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.76217733]
E1 = -3.6806770824426254  E_coul = 1.0928325245429644
cycle= 1 E= -2.58784455789966  delta_E= -0.0203  |g|=    0  |ddm|= 0.0269
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74750602]
E1 = -3.6806770824426254  E_coul = 1.0928325245429644
cycle= 2 E= -2.58784455789966  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6806770824426254  E_coul = 1.0928325245429644
  mo_energy =
[-0.74750602]
E1 = -3.6806770824426254  E_coul = 1.0928325245429644
Extra cycle  E= -2.58784455789966  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6806770824426254  E_coul = 1.0928325245429644
init E= -2.58784455789966
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.74750602]
E1 = -3.6806770824426254  E_coul = 1.0928325245429644
cycle= 1 E= -2.58784455789966  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.6806770824426254  E_coul = 1.0928325245429644
  mo_energy =
[-0.74750602]
E1 = -3.6806770824426254  E_coul = 1.0928325245429644
Extra cycle  E= -2.58784455789966  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:04:00 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44481879987        1
                                0.288692474164       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.4448187998693673, 1.0], [0.28869247416399013, 1.0]]]}
ecp = {}
CPU time:        91.08
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6312638847773044  E_coul = 1.0636868699736963
init E= -2.56757701480361
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.76217733]
E1 = -3.6806770824426254  E_coul = 1.0928325245429644
cycle= 1 E= -2.58784455789966  delta_E= -0.0203  |g|=    0  |ddm|= 0.0269
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
  mo_energy =
[-0.74750602]
E1 = -3.6806770824426254  E_coul = 1.0928325245429644
cycle= 2 E= -2.58784455789966  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6806770824426254  E_coul = 1.0928325245429644
  mo_energy =
[-0.74750602]
E1 = -3.6806770824426254  E_coul = 1.0928325245429644
Extra cycle  E= -2.58784455789966  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:04:00 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44482175094        1
                                0.288694190473       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.444821750939972, 1.0], [0.28869419047271644, 1.0]]]}
ecp = {}
CPU time:        91.64
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6312661730058275  E_coul = 1.063688772958111
init E= -2.56757740004772
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.76217651]
E1 = -3.68067919382499  E_coul = 1.0928343561649525
cycle= 1 E= -2.58784483766004  delta_E= -0.0203  |g|=    0  |ddm|= 0.0268
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74750524]
E1 = -3.68067919382499  E_coul = 1.0928343561649525
cycle= 2 E= -2.58784483766004  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.68067919382499  E_coul = 1.0928343561649525
  mo_energy =
[-0.74750524]
E1 = -3.68067919382499  E_coul = 1.0928343561649525
Extra cycle  E= -2.58784483766004  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.68067919382499  E_coul = 1.0928343561649525
init E= -2.58784483766004
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.74750524]
E1 = -3.68067919382499  E_coul = 1.0928343561649525
cycle= 1 E= -2.58784483766004  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.68067919382499  E_coul = 1.0928343561649525
  mo_energy =
[-0.74750524]
E1 = -3.68067919382499  E_coul = 1.0928343561649525
Extra cycle  E= -2.58784483766004  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:04:02 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44482175094        1
                                0.288694190473       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.444821750939972, 1.0], [0.28869419047271644, 1.0]]]}
ecp = {}
CPU time:        93.69
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6312661730058275  E_coul = 1.063688772958111
init E= -2.56757740004772
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.76217651]
E1 = -3.68067919382499  E_coul = 1.0928343561649525
cycle= 1 E= -2.58784483766004  delta_E= -0.0203  |g|=    0  |ddm|= 0.0268
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74750524]
E1 = -3.68067919382499  E_coul = 1.0928343561649525
cycle= 2 E= -2.58784483766004  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.68067919382499  E_coul = 1.0928343561649525
  mo_energy =
[-0.74750524]
E1 = -3.68067919382499  E_coul = 1.0928343561649525
Extra cycle  E= -2.58784483766004  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:04:03 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44482322648        1
                                0.288695048627       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.4448232264752745, 1.0], [0.28869504862707956, 1.0]]]}
ecp = {}
CPU time:        94.27
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.631267317097203  E_coul = 1.0636897244411283
init E= -2.56757759265607
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.76217611]
E1 = -3.6806802495049733  E_coul = 1.0928352719735255
cycle= 1 E= -2.58784497753145  delta_E= -0.0203  |g|=    0  |ddm|= 0.0268
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74750485]
E1 = -3.6806802495049733  E_coul = 1.0928352719735255
cycle= 2 E= -2.58784497753145  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6806802495049733  E_coul = 1.0928352719735255
  mo_energy =
[-0.74750485]
E1 = -3.6806802495049733  E_coul = 1.0928352719735255
Extra cycle  E= -2.58784497753145  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6806802495049733  E_coul = 1.0928352719735255
init E= -2.58784497753145
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.74750485]
E1 = -3.6806802495049733  E_coul = 1.0928352719735255
cycle= 1 E= -2.58784497753145  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.6806802495049733  E_coul = 1.0928352719735255
  mo_energy =
[-0.74750485]
E1 = -3.6806802495049733  E_coul = 1.0928352719735255
Extra cycle  E= -2.58784497753145  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:04:05 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44482322648        1
                                0.288695048627       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.4448232264752745, 1.0], [0.28869504862707956, 1.0]]]}
ecp = {}
CPU time:        96.48
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.631267317097203  E_coul = 1.0636897244411283
init E= -2.56757759265607
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.76217611]
E1 = -3.6806802495049733  E_coul = 1.0928352719735255
cycle= 1 E= -2.58784497753145  delta_E= -0.0203  |g|=    0  |ddm|= 0.0268
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74750485]
E1 = -3.6806802495049733  E_coul = 1.0928352719735255
cycle= 2 E= -2.58784497753145  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6806802495049733  E_coul = 1.0928352719735255
  mo_energy =
[-0.74750485]
E1 = -3.6806802495049733  E_coul = 1.0928352719735255
Extra cycle  E= -2.58784497753145  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:04:06 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44482396424        1
                                0.288695477704       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.4448239642429255, 1.0], [0.2886954777042612, 1.0]]]}
ecp = {}
CPU time:        97.07
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.631267889137173  E_coul = 1.0636902001803412
init E= -2.56757768895683
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.7621759]
E1 = -3.680680777342168  E_coul = 1.0928357298772073
cycle= 1 E= -2.58784504746496  delta_E= -0.0203  |g|=    0  |ddm|= 0.0268
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74750466]
E1 = -3.680680777342168  E_coul = 1.0928357298772073
cycle= 2 E= -2.58784504746496  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.680680777342168  E_coul = 1.0928357298772073
  mo_energy =
[-0.74750466]
E1 = -3.680680777342168  E_coul = 1.0928357298772073
Extra cycle  E= -2.58784504746496  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.680680777342168  E_coul = 1.0928357298772073
init E= -2.58784504746496
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.74750466]
E1 = -3.680680777342168  E_coul = 1.0928357298772073
cycle= 1 E= -2.58784504746496  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.680680777342168  E_coul = 1.0928357298772073
  mo_energy =
[-0.74750466]
E1 = -3.680680777342168  E_coul = 1.0928357298772073
Extra cycle  E= -2.58784504746496  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:04:08 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44482396424        1
                                0.288695477704       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.4448239642429255, 1.0], [0.2886954777042612, 1.0]]]}
ecp = {}
CPU time:        99.19
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.631267889137173  E_coul = 1.0636902001803412
init E= -2.56757768895683
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.7621759]
E1 = -3.680680777342168  E_coul = 1.0928357298772073
cycle= 1 E= -2.58784504746496  delta_E= -0.0203  |g|=    0  |ddm|= 0.0268
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74750466]
E1 = -3.680680777342168  E_coul = 1.0928357298772073
cycle= 2 E= -2.58784504746496  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.680680777342168  E_coul = 1.0928357298772073
  mo_energy =
[-0.74750466]
E1 = -3.680680777342168  E_coul = 1.0928357298772073
Extra cycle  E= -2.58784504746496  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:04:08 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44482470201        1
                                0.288695906781       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.444824702010577, 1.0], [0.28869590678144275, 1.0]]]}
ecp = {}
CPU time:        99.77
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.631268461173325  E_coul = 1.0636906759180205
init E= -2.5675777852553
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.7621757]
E1 = -3.680681305177495  E_coul = 1.0928361877804855
cycle= 1 E= -2.58784511739701  delta_E= -0.0203  |g|=    0  |ddm|= 0.0268
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74750446]
E1 = -3.680681305177495  E_coul = 1.0928361877804855
cycle= 2 E= -2.58784511739701  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.680681305177495  E_coul = 1.0928361877804855
  mo_energy =
[-0.74750446]
E1 = -3.680681305177495  E_coul = 1.0928361877804855
Extra cycle  E= -2.58784511739701  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.680681305177495  E_coul = 1.0928361877804855
init E= -2.58784511739701
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.74750446]
E1 = -3.680681305177495  E_coul = 1.0928361877804855
cycle= 1 E= -2.58784511739701  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -3.680681305177495  E_coul = 1.0928361877804855
  mo_energy =
[-0.74750446]
E1 = -3.680681305177495  E_coul = 1.0928361877804855
Extra cycle  E= -2.58784511739701  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:04:10 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.44482470201        1
                                0.288695906781       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.444824702010577, 1.0], [0.28869590678144275, 1.0]]]}
ecp = {}
CPU time:       101.75
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.631268461173325  E_coul = 1.0636906759180205
init E= -2.5675777852553
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.7621757]
E1 = -3.680681305177495  E_coul = 1.0928361877804855
cycle= 1 E= -2.58784511739701  delta_E= -0.0203  |g|=    0  |ddm|= 0.0268
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.74750446]
E1 = -3.680681305177495  E_coul = 1.0928361877804855
cycle= 2 E= -2.58784511739701  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.680681305177495  E_coul = 1.0928361877804855
  mo_energy =
[-0.74750446]
E1 = -3.680681305177495  E_coul = 1.0928361877804855
Extra cycle  E= -2.58784511739701  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:04:11 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.82660252929        1
                                0.187079336686       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.8266025292923889, 1.0], [0.18707933668605398, 1.0]]]}
ecp = {}
CPU time:       102.35
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.4017460476674812  E_coul = 0.8611894660036675
init E= -2.54055658166381
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.86530296]
E1 = -3.5055359701197735  E_coul = 0.9145422771031164
cycle= 1 E= -2.59099369301666  delta_E= -0.0504  |g|=    0  |ddm|= 0.0592
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.83822571]
E1 = -3.5055359701197735  E_coul = 0.9145422771031164
cycle= 2 E= -2.59099369301666  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.5055359701197735  E_coul = 0.9145422771031164
  mo_energy =
[-0.83822571]
E1 = -3.5055359701197735  E_coul = 0.9145422771031164
Extra cycle  E= -2.59099369301666  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.5055359701197735  E_coul = 0.9145422771031164
init E= -2.59099369301666
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.83822571]
E1 = -3.5055359701197735  E_coul = 0.9145422771031164
cycle= 1 E= -2.59099369301666  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.5055359701197735  E_coul = 0.9145422771031164
  mo_energy =
[-0.83822571]
E1 = -3.5055359701197735  E_coul = 0.9145422771031164
Extra cycle  E= -2.59099369301666  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:04:13 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.82660252929        1
                                0.187079336686       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.8266025292923889, 1.0], [0.18707933668605398, 1.0]]]}
ecp = {}
CPU time:       104.34
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.4017460476674812  E_coul = 0.8611894660036675
init E= -2.54055658166381
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.86530296]
E1 = -3.5055359701197735  E_coul = 0.9145422771031164
cycle= 1 E= -2.59099369301666  delta_E= -0.0504  |g|=    0  |ddm|= 0.0592
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.83822571]
E1 = -3.5055359701197735  E_coul = 0.9145422771031164
cycle= 2 E= -2.59099369301666  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.5055359701197735  E_coul = 0.9145422771031164
  mo_energy =
[-0.83822571]
E1 = -3.5055359701197735  E_coul = 0.9145422771031164
Extra cycle  E= -2.59099369301666  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:04:14 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.77461041384        1
                                0.230733880261       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7746104138360608, 1.0], [0.23073388026128716, 1.0]]]}
ecp = {}
CPU time:       104.94
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.5345494410732012  E_coul = 0.9256453924753785
init E= -2.60890404859782
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.85331212]
E1 = -3.5836130828466897  E_coul = 0.9515218131199255
cycle= 1 E= -2.63209126972676  delta_E= -0.0232  |g|=    0  |ddm|= 0.0274
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.84028473]
E1 = -3.5836130828466897  E_coul = 0.9515218131199255
cycle= 2 E= -2.63209126972676  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.5836130828466897  E_coul = 0.9515218131199255
  mo_energy =
[-0.84028473]
E1 = -3.5836130828466897  E_coul = 0.9515218131199255
Extra cycle  E= -2.63209126972676  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.5836130828466897  E_coul = 0.9515218131199255
init E= -2.63209126972676
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.84028473]
E1 = -3.5836130828466897  E_coul = 0.9515218131199255
cycle= 1 E= -2.63209126972676  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.5836130828466897  E_coul = 0.9515218131199255
  mo_energy =
[-0.84028473]
E1 = -3.5836130828466897  E_coul = 0.9515218131199255
Extra cycle  E= -2.63209126972676  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:04:16 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.77461041384        1
                                0.230733880261       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.7746104138360608, 1.0], [0.23073388026128716, 1.0]]]}
ecp = {}
CPU time:       106.90
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.5345494410732012  E_coul = 0.9256453924753785
init E= -2.60890404859782
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.85331212]
E1 = -3.5836130828466897  E_coul = 0.9515218131199255
cycle= 1 E= -2.63209126972676  delta_E= -0.0232  |g|=    0  |ddm|= 0.0274
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.84028473]
E1 = -3.5836130828466897  E_coul = 0.9515218131199255
cycle= 2 E= -2.63209126972676  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.5836130828466897  E_coul = 0.9515218131199255
  mo_energy =
[-0.84028473]
E1 = -3.5836130828466897  E_coul = 0.9515218131199255
Extra cycle  E= -2.63209126972676  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:04:16 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06085478215        1
                                0.280599086908       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.060854782150295, 1.0], [0.2805990869082686, 1.0]]]}
ecp = {}
CPU time:       107.52
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.645536884952752  E_coul = 1.0191433042717655
init E= -2.62639358068099
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81027153]
E1 = -3.675687334017041  E_coul = 1.036070684702165
cycle= 1 E= -2.63961664931488  delta_E= -0.0132  |g|=    0  |ddm|= 0.0164
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80177298]
E1 = -3.675687334017041  E_coul = 1.036070684702165
cycle= 2 E= -2.63961664931488  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.675687334017041  E_coul = 1.036070684702165
  mo_energy =
[-0.80177298]
E1 = -3.675687334017041  E_coul = 1.036070684702165
Extra cycle  E= -2.63961664931488  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.675687334017041  E_coul = 1.036070684702165
init E= -2.63961664931488
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.80177298]
E1 = -3.675687334017041  E_coul = 1.036070684702165
cycle= 1 E= -2.63961664931488  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.675687334017041  E_coul = 1.036070684702165
  mo_energy =
[-0.80177298]
E1 = -3.675687334017041  E_coul = 1.036070684702165
Extra cycle  E= -2.63961664931488  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:04:18 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06085478215        1
                                0.280599086908       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.060854782150295, 1.0], [0.2805990869082686, 1.0]]]}
ecp = {}
CPU time:       109.52
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.645536884952752  E_coul = 1.0191433042717655
init E= -2.62639358068099
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81027153]
E1 = -3.675687334017041  E_coul = 1.036070684702165
cycle= 1 E= -2.63961664931488  delta_E= -0.0132  |g|=    0  |ddm|= 0.0164
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80177298]
E1 = -3.675687334017041  E_coul = 1.036070684702165
cycle= 2 E= -2.63961664931488  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.675687334017041  E_coul = 1.036070684702165
  mo_energy =
[-0.80177298]
E1 = -3.675687334017041  E_coul = 1.036070684702165
Extra cycle  E= -2.63961664931488  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:04:19 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.05858754286        1
                                0.266644403774       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.058587542862764, 1.0], [0.2666444037743791, 1.0]]]}
ecp = {}
CPU time:       110.15
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.624511102531908  E_coul = 1.0048750018490247
init E= -2.61963610068288
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81501041]
E1 = -3.65876324106844  E_coul = 1.02395716192161
cycle= 1 E= -2.63480607914683  delta_E= -0.0152  |g|=    0  |ddm|= 0.0187
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80542446]
E1 = -3.65876324106844  E_coul = 1.02395716192161
cycle= 2 E= -2.63480607914683  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.65876324106844  E_coul = 1.02395716192161
  mo_energy =
[-0.80542446]
E1 = -3.65876324106844  E_coul = 1.02395716192161
Extra cycle  E= -2.63480607914683  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.65876324106844  E_coul = 1.02395716192161
init E= -2.63480607914683
    CPU time for initialize scf      0.04 sec, wall time      0.04 sec
  mo_energy =
[-0.80542446]
E1 = -3.65876324106844  E_coul = 1.02395716192161
cycle= 1 E= -2.63480607914683  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.65876324106844  E_coul = 1.02395716192161
  mo_energy =
[-0.80542446]
E1 = -3.65876324106844  E_coul = 1.02395716192161
Extra cycle  E= -2.63480607914683  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.08 sec, wall time      0.08 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:04:21 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.05858754286        1
                                0.266644403774       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.058587542862764, 1.0], [0.2666444037743791, 1.0]]]}
ecp = {}
CPU time:       112.39
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.624511102531908  E_coul = 1.0048750018490247
init E= -2.61963610068288
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81501041]
E1 = -3.65876324106844  E_coul = 1.02395716192161
cycle= 1 E= -2.63480607914683  delta_E= -0.0152  |g|=    0  |ddm|= 0.0187
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80542446]
E1 = -3.65876324106844  E_coul = 1.02395716192161
cycle= 2 E= -2.63480607914683  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.65876324106844  E_coul = 1.02395716192161
  mo_energy =
[-0.80542446]
E1 = -3.65876324106844  E_coul = 1.02395716192161
Extra cycle  E= -2.63480607914683  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:04:22 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.97133656076        1
                                0.242919425957       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.9713365607570628, 1.0], [0.2429194259566729, 1.0]]]}
ecp = {}
CPU time:       113.04
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.5773267900360093  E_coul = 0.967057193987777
init E= -2.61026959604823
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83164006]
E1 = -3.621014853831239  E_coul = 0.9908217761602863
cycle= 1 E= -2.63019307767095  delta_E= -0.0199  |g|=    0  |ddm|= 0.0241
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.81968565]
E1 = -3.621014853831239  E_coul = 0.9908217761602863
cycle= 2 E= -2.63019307767095  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.621014853831239  E_coul = 0.9908217761602863
  mo_energy =
[-0.81968565]
E1 = -3.621014853831239  E_coul = 0.9908217761602863
Extra cycle  E= -2.63019307767095  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.621014853831239  E_coul = 0.9908217761602863
init E= -2.63019307767095
    CPU time for initialize scf      0.04 sec, wall time      0.04 sec
  mo_energy =
[-0.81968565]
E1 = -3.621014853831239  E_coul = 0.9908217761602863
cycle= 1 E= -2.63019307767095  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -3.621014853831239  E_coul = 0.9908217761602863
  mo_energy =
[-0.81968565]
E1 = -3.621014853831239  E_coul = 0.9908217761602863
Extra cycle  E= -2.63019307767095  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.08 sec, wall time      0.08 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:04:24 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.97133656076        1
                                0.242919425957       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.9713365607570628, 1.0], [0.2429194259566729, 1.0]]]}
ecp = {}
CPU time:       115.20
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.5773267900360093  E_coul = 0.967057193987777
init E= -2.61026959604823
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83164006]
E1 = -3.621014853831239  E_coul = 0.9908217761602863
cycle= 1 E= -2.63019307767095  delta_E= -0.0199  |g|=    0  |ddm|= 0.0241
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.81968565]
E1 = -3.621014853831239  E_coul = 0.9908217761602863
cycle= 2 E= -2.63019307767095  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.621014853831239  E_coul = 0.9908217761602863
  mo_energy =
[-0.81968565]
E1 = -3.621014853831239  E_coul = 0.9908217761602863
Extra cycle  E= -2.63019307767095  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:04:25 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.97133656076        1
                                0.242919425957       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.9713365607570625, 1.0], [0.24291942595667287, 1.0]]]}
ecp = {}
CPU time:       115.84
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.577326790036008  E_coul = 0.9670571939877766
init E= -2.61026959604823
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83164006]
E1 = -3.6210148538312383  E_coul = 0.9908217761602862
cycle= 1 E= -2.63019307767095  delta_E= -0.0199  |g|=    0  |ddm|= 0.0241
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.81968565]
E1 = -3.6210148538312383  E_coul = 0.9908217761602862
cycle= 2 E= -2.63019307767095  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6210148538312383  E_coul = 0.9908217761602862
  mo_energy =
[-0.81968565]
E1 = -3.6210148538312383  E_coul = 0.9908217761602862
Extra cycle  E= -2.63019307767095  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6210148538312383  E_coul = 0.9908217761602862
init E= -2.63019307767095
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.81968565]
E1 = -3.6210148538312383  E_coul = 0.9908217761602862
cycle= 1 E= -2.63019307767095  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -3.6210148538312383  E_coul = 0.9908217761602862
  mo_energy =
[-0.81968565]
E1 = -3.6210148538312383  E_coul = 0.9908217761602862
Extra cycle  E= -2.63019307767095  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:04:27 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.97133656076        1
                                0.242919425957       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.9713365607570625, 1.0], [0.24291942595667287, 1.0]]]}
ecp = {}
CPU time:       117.89
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.577326790036008  E_coul = 0.9670571939877766
init E= -2.61026959604823
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83164006]
E1 = -3.6210148538312383  E_coul = 0.9908217761602862
cycle= 1 E= -2.63019307767095  delta_E= -0.0199  |g|=    0  |ddm|= 0.0241
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.81968565]
E1 = -3.6210148538312383  E_coul = 0.9908217761602862
cycle= 2 E= -2.63019307767095  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6210148538312383  E_coul = 0.9908217761602862
  mo_energy =
[-0.81968565]
E1 = -3.6210148538312383  E_coul = 0.9908217761602862
Extra cycle  E= -2.63019307767095  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:04:27 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.05816566655        1
                                0.264047787564       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.05816566654845, 1.0], [0.26404778756350245, 1.0]]]}
ecp = {}
CPU time:       118.55
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.620081490626803  E_coul = 1.0020232078732878
init E= -2.61805828275352
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81589128]
E1 = -3.6553574263782  E_coul = 1.0216468144466124
cycle= 1 E= -2.63371061193159  delta_E= -0.0157  |g|=    0  |ddm|= 0.0193
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.8060319]
E1 = -3.6553574263782  E_coul = 1.0216468144466124
cycle= 2 E= -2.63371061193159  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6553574263782  E_coul = 1.0216468144466124
  mo_energy =
[-0.8060319]
E1 = -3.6553574263782  E_coul = 1.0216468144466124
Extra cycle  E= -2.63371061193159  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6553574263782  E_coul = 1.0216468144466124
init E= -2.63371061193159
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.8060319]
E1 = -3.6553574263782  E_coul = 1.0216468144466124
cycle= 1 E= -2.63371061193159  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.6553574263782  E_coul = 1.0216468144466124
  mo_energy =
[-0.8060319]
E1 = -3.6553574263782  E_coul = 1.0216468144466124
Extra cycle  E= -2.63371061193159  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:04:30 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.05816566655        1
                                0.264047787564       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.05816566654845, 1.0], [0.26404778756350245, 1.0]]]}
ecp = {}
CPU time:       120.69
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.620081490626803  E_coul = 1.0020232078732878
init E= -2.61805828275352
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.81589128]
E1 = -3.6553574263782  E_coul = 1.0216468144466124
cycle= 1 E= -2.63371061193159  delta_E= -0.0157  |g|=    0  |ddm|= 0.0193
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.8060319]
E1 = -3.6553574263782  E_coul = 1.0216468144466124
cycle= 2 E= -2.63371061193159  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6553574263782  E_coul = 1.0216468144466124
  mo_energy =
[-0.8060319]
E1 = -3.6553574263782  E_coul = 1.0216468144466124
Extra cycle  E= -2.63371061193159  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.05 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:04:30 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06010758923        1
                                0.276000172034       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.0601075892270417, 1.0], [0.2760001720335883, 1.0]]]}
ecp = {}
CPU time:       121.34
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6391084079754443  E_coul = 1.0146323491079905
init E= -2.62447605886745
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81183412]
E1 = -3.6703592318411853  E_coul = 1.032133472908588
cycle= 1 E= -2.6382257589326  delta_E= -0.0137  |g|=    0  |ddm|= 0.017
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80304614]
E1 = -3.6703592318411853  E_coul = 1.032133472908588
cycle= 2 E= -2.6382257589326  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6703592318411853  E_coul = 1.032133472908588
  mo_energy =
[-0.80304614]
E1 = -3.6703592318411853  E_coul = 1.032133472908588
Extra cycle  E= -2.6382257589326  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6703592318411853  E_coul = 1.032133472908588
init E= -2.6382257589326
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.80304614]
E1 = -3.6703592318411853  E_coul = 1.032133472908588
cycle= 1 E= -2.6382257589326  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -3.6703592318411853  E_coul = 1.032133472908588
  mo_energy =
[-0.80304614]
E1 = -3.6703592318411853  E_coul = 1.032133472908588
Extra cycle  E= -2.6382257589326  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.08 sec, wall time      0.08 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:04:32 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06010758923        1
                                0.276000172034       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.0601075892270417, 1.0], [0.2760001720335883, 1.0]]]}
ecp = {}
CPU time:       123.49
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6391084079754443  E_coul = 1.0146323491079905
init E= -2.62447605886745
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81183412]
E1 = -3.6703592318411853  E_coul = 1.032133472908588
cycle= 1 E= -2.6382257589326  delta_E= -0.0137  |g|=    0  |ddm|= 0.017
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80304614]
E1 = -3.6703592318411853  E_coul = 1.032133472908588
cycle= 2 E= -2.6382257589326  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6703592318411853  E_coul = 1.032133472908588
  mo_energy =
[-0.80304614]
E1 = -3.6703592318411853  E_coul = 1.032133472908588
Extra cycle  E= -2.6382257589326  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:04:33 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06052891281        1
                                0.278593386209       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.0605289128073037, 1.0], [0.27859338620896273, 1.0]]]}
ecp = {}
CPU time:       124.18
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6427918136269293  E_coul = 1.0171984186551095
init E= -2.62559339497182
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.8109531]
E1 = -3.673392886139577  E_coul = 1.0343600386531127
cycle= 1 E= -2.63903284748646  delta_E= -0.0134  |g|=    0  |ddm|= 0.0167
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.8023364]
E1 = -3.673392886139577  E_coul = 1.0343600386531127
cycle= 2 E= -2.63903284748646  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.673392886139577  E_coul = 1.0343600386531127
  mo_energy =
[-0.8023364]
E1 = -3.673392886139577  E_coul = 1.0343600386531127
Extra cycle  E= -2.63903284748646  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.673392886139577  E_coul = 1.0343600386531127
init E= -2.63903284748646
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.8023364]
E1 = -3.673392886139577  E_coul = 1.0343600386531127
cycle= 1 E= -2.63903284748646  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.673392886139577  E_coul = 1.0343600386531127
  mo_energy =
[-0.8023364]
E1 = -3.673392886139577  E_coul = 1.0343600386531127
Extra cycle  E= -2.63903284748646  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:04:36 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06052891281        1
                                0.278593386209       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.0605289128073037, 1.0], [0.27859338620896273, 1.0]]]}
ecp = {}
CPU time:       126.43
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6427918136269293  E_coul = 1.0171984186551095
init E= -2.62559339497182
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.8109531]
E1 = -3.673392886139577  E_coul = 1.0343600386531127
cycle= 1 E= -2.63903284748646  delta_E= -0.0134  |g|=    0  |ddm|= 0.0167
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.8023364]
E1 = -3.673392886139577  E_coul = 1.0343600386531127
cycle= 2 E= -2.63903284748646  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.673392886139577  E_coul = 1.0343600386531127
  mo_energy =
[-0.8023364]
E1 = -3.673392886139577  E_coul = 1.0343600386531127
Extra cycle  E= -2.63903284748646  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:04:36 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06069959791        1
                                0.279643939887       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.0606995979135196, 1.0], [0.27964393988718156, 1.0]]]}
ecp = {}
CPU time:       127.12
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.644240819005032  E_coul = 1.018221411556573
init E= -2.62601940744846
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81059612]
E1 = -3.6746002774496485  E_coul = 1.0352572858582139
cycle= 1 E= -2.63934299159143  delta_E= -0.0133  |g|=    0  |ddm|= 0.0165
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80204285]
E1 = -3.6746002774496485  E_coul = 1.0352572858582139
cycle= 2 E= -2.63934299159143  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6746002774496485  E_coul = 1.0352572858582139
  mo_energy =
[-0.80204285]
E1 = -3.6746002774496485  E_coul = 1.0352572858582139
Extra cycle  E= -2.63934299159143  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6746002774496485  E_coul = 1.0352572858582139
init E= -2.63934299159143
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.80204285]
E1 = -3.6746002774496485  E_coul = 1.0352572858582139
cycle= 1 E= -2.63934299159143  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.6746002774496485  E_coul = 1.0352572858582139
  mo_energy =
[-0.80204285]
E1 = -3.6746002774496485  E_coul = 1.0352572858582139
Extra cycle  E= -2.63934299159143  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:04:38 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06069959791        1
                                0.279643939887       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.0606995979135196, 1.0], [0.27964393988718156, 1.0]]]}
ecp = {}
CPU time:       129.37
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.644240819005032  E_coul = 1.018221411556573
init E= -2.62601940744846
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81059612]
E1 = -3.6746002774496485  E_coul = 1.0352572858582139
cycle= 1 E= -2.63934299159143  delta_E= -0.0133  |g|=    0  |ddm|= 0.0165
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80204285]
E1 = -3.6746002774496485  E_coul = 1.0352572858582139
cycle= 2 E= -2.63934299159143  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6746002774496485  E_coul = 1.0352572858582139
  mo_energy =
[-0.80204285]
E1 = -3.6746002774496485  E_coul = 1.0352572858582139
Extra cycle  E= -2.63934299159143  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:04:39 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06077951488        1
                                0.280135822668       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.0607795148814647, 1.0], [0.28013582266763204, 1.0]]]}
ecp = {}
CPU time:       130.06
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6449107969835173  E_coul = 1.018697140255606
init E= -2.62621365672791
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81042897]
E1 = -3.675161357311395  E_coul = 1.0356764512921424
cycle= 1 E= -2.63948490601925  delta_E= -0.0133  |g|=    0  |ddm|= 0.0165
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
  mo_energy =
[-0.80190423]
E1 = -3.675161357311395  E_coul = 1.0356764512921424
cycle= 2 E= -2.63948490601925  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.675161357311395  E_coul = 1.0356764512921424
  mo_energy =
[-0.80190423]
E1 = -3.675161357311395  E_coul = 1.0356764512921424
Extra cycle  E= -2.63948490601925  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.675161357311395  E_coul = 1.0356764512921424
init E= -2.63948490601925
    CPU time for initialize scf      0.03 sec, wall time      0.05 sec
  mo_energy =
[-0.80190423]
E1 = -3.675161357311395  E_coul = 1.0356764512921424
cycle= 1 E= -2.63948490601925  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -3.675161357311395  E_coul = 1.0356764512921424
  mo_energy =
[-0.80190423]
E1 = -3.675161357311395  E_coul = 1.0356764512921424
Extra cycle  E= -2.63948490601925  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.10 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:04:41 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06077951488        1
                                0.280135822668       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.0607795148814647, 1.0], [0.28013582266763204, 1.0]]]}
ecp = {}
CPU time:       132.11
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6449107969835173  E_coul = 1.018697140255606
init E= -2.62621365672791
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81042897]
E1 = -3.675161357311395  E_coul = 1.0356764512921424
cycle= 1 E= -2.63948490601925  delta_E= -0.0133  |g|=    0  |ddm|= 0.0165
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80190423]
E1 = -3.675161357311395  E_coul = 1.0356764512921424
cycle= 2 E= -2.63948490601925  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.675161357311395  E_coul = 1.0356764512921424
  mo_energy =
[-0.80190423]
E1 = -3.675161357311395  E_coul = 1.0356764512921424
Extra cycle  E= -2.63948490601925  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:04:42 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06081798237        1
                                0.280372587095       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.0608179823698705, 1.0], [0.28037258709501744, 1.0]]]}
ecp = {}
CPU time:       132.80
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.645231370950697  E_coul = 1.0189253932920088
init E= -2.62630597765869
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.8103485]
E1 = -3.675430470179028  E_coul = 1.035878001404727
cycle= 1 E= -2.6395524687743  delta_E= -0.0132  |g|=    0  |ddm|= 0.0164
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80183723]
E1 = -3.675430470179028  E_coul = 1.035878001404727
cycle= 2 E= -2.6395524687743  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.675430470179028  E_coul = 1.035878001404727
  mo_energy =
[-0.80183723]
E1 = -3.675430470179028  E_coul = 1.035878001404727
Extra cycle  E= -2.6395524687743  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.675430470179028  E_coul = 1.035878001404727
init E= -2.6395524687743
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.80183723]
E1 = -3.675430470179028  E_coul = 1.035878001404727
cycle= 1 E= -2.6395524687743  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -3.675430470179028  E_coul = 1.035878001404727
  mo_energy =
[-0.80183723]
E1 = -3.675430470179028  E_coul = 1.035878001404727
Extra cycle  E= -2.6395524687743  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:04:44 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06081798237        1
                                0.280372587095       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.0608179823698705, 1.0], [0.28037258709501744, 1.0]]]}
ecp = {}
CPU time:       135.04
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.645231370950697  E_coul = 1.0189253932920088
init E= -2.62630597765869
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.8103485]
E1 = -3.675430470179028  E_coul = 1.035878001404727
cycle= 1 E= -2.6395524687743  delta_E= -0.0132  |g|=    0  |ddm|= 0.0164
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80183723]
E1 = -3.675430470179028  E_coul = 1.035878001404727
cycle= 2 E= -2.6395524687743  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.675430470179028  E_coul = 1.035878001404727
  mo_energy =
[-0.80183723]
E1 = -3.675430470179028  E_coul = 1.035878001404727
Extra cycle  E= -2.6395524687743  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:04:45 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06083672168        1
                                0.280487926127       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.0608367216836116, 1.0], [0.28048792612731266, 1.0]]]}
ecp = {}
CPU time:       135.74
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6453870876989023  E_coul = 1.0190364131914624
init E= -2.62635067450744
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81030931]
E1 = -3.6755613423386033  E_coul = 1.0359761360066573
cycle= 1 E= -2.63958520633195  delta_E= -0.0132  |g|=    0  |ddm|= 0.0164
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80180454]
E1 = -3.6755613423386033  E_coul = 1.0359761360066573
cycle= 2 E= -2.63958520633195  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6755613423386033  E_coul = 1.0359761360066573
  mo_energy =
[-0.80180454]
E1 = -3.6755613423386033  E_coul = 1.0359761360066573
Extra cycle  E= -2.63958520633195  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6755613423386033  E_coul = 1.0359761360066573
init E= -2.63958520633195
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.80180454]
E1 = -3.6755613423386033  E_coul = 1.0359761360066573
cycle= 1 E= -2.63958520633195  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.6755613423386033  E_coul = 1.0359761360066573
  mo_energy =
[-0.80180454]
E1 = -3.6755613423386033  E_coul = 1.0359761360066573
Extra cycle  E= -2.63958520633195  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:04:47 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06083672168        1
                                0.280487926127       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.0608367216836116, 1.0], [0.28048792612731266, 1.0]]]}
ecp = {}
CPU time:       137.85
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6453870876989023  E_coul = 1.0190364131914624
init E= -2.62635067450744
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81030931]
E1 = -3.6755613423386033  E_coul = 1.0359761360066573
cycle= 1 E= -2.63958520633195  delta_E= -0.0132  |g|=    0  |ddm|= 0.0164
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80180454]
E1 = -3.6755613423386033  E_coul = 1.0359761360066573
cycle= 2 E= -2.63958520633195  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6755613423386033  E_coul = 1.0359761360066573
  mo_energy =
[-0.80180454]
E1 = -3.6755613423386033  E_coul = 1.0359761360066573
Extra cycle  E= -2.63958520633195  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:04:48 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06084590226        1
                                0.280544431877       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.06084590226149, 1.0], [0.28054443187682926, 1.0]]]}
ecp = {}
CPU time:       138.56
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6454632674624894  E_coul = 1.0190907616705045
init E= -2.62637250579199
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.8102901]
E1 = -3.675625404104346  E_coul = 1.0360242012147522
cycle= 1 E= -2.63960120288959  delta_E= -0.0132  |g|=    0  |ddm|= 0.0164
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.8017885]
E1 = -3.675625404104346  E_coul = 1.0360242012147522
cycle= 2 E= -2.63960120288959  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.675625404104346  E_coul = 1.0360242012147522
  mo_energy =
[-0.8017885]
E1 = -3.675625404104346  E_coul = 1.0360242012147522
Extra cycle  E= -2.63960120288959  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.675625404104346  E_coul = 1.0360242012147522
init E= -2.63960120288959
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.8017885]
E1 = -3.675625404104346  E_coul = 1.0360242012147522
cycle= 1 E= -2.63960120288959  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.675625404104346  E_coul = 1.0360242012147522
  mo_energy =
[-0.8017885]
E1 = -3.675625404104346  E_coul = 1.0360242012147522
Extra cycle  E= -2.63960120288959  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:04:50 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06084590226        1
                                0.280544431877       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.06084590226149, 1.0], [0.28054443187682926, 1.0]]]}
ecp = {}
CPU time:       140.62
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6454632674624894  E_coul = 1.0190907616705045
init E= -2.62637250579199
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.8102901]
E1 = -3.675625404104346  E_coul = 1.0360242012147522
cycle= 1 E= -2.63960120288959  delta_E= -0.0132  |g|=    0  |ddm|= 0.0164
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.8017885]
E1 = -3.675625404104346  E_coul = 1.0360242012147522
cycle= 2 E= -2.63960120288959  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.675625404104346  E_coul = 1.0360242012147522
  mo_energy =
[-0.8017885]
E1 = -3.675625404104346  E_coul = 1.0360242012147522
Extra cycle  E= -2.63960120288959  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:04:51 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06085041223        1
                                0.280572190355       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.0608504122251032, 1.0], [0.2805721903553967, 1.0]]]}
ecp = {}
CPU time:       141.33
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6455006649455965  E_coul = 1.01911745044902
init E= -2.62638321449658
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81028067]
E1 = -3.6756568615219596  E_coul = 1.036047810403275
cycle= 1 E= -2.63960905111868  delta_E= -0.0132  |g|=    0  |ddm|= 0.0164
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80178062]
E1 = -3.6756568615219596  E_coul = 1.036047810403275
cycle= 2 E= -2.63960905111868  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6756568615219596  E_coul = 1.036047810403275
  mo_energy =
[-0.80178062]
E1 = -3.6756568615219596  E_coul = 1.036047810403275
Extra cycle  E= -2.63960905111868  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6756568615219596  E_coul = 1.036047810403275
init E= -2.63960905111868
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.80178062]
E1 = -3.6756568615219596  E_coul = 1.036047810403275
cycle= 1 E= -2.63960905111868  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.6756568615219596  E_coul = 1.036047810403275
  mo_energy =
[-0.80178062]
E1 = -3.6756568615219596  E_coul = 1.036047810403275
Extra cycle  E= -2.63960905111868  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.06 sec, wall time      0.06 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:04:53 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06085041223        1
                                0.280572190355       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.0608504122251032, 1.0], [0.2805721903553967, 1.0]]]}
ecp = {}
CPU time:       143.37
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6455006649455965  E_coul = 1.01911745044902
init E= -2.62638321449658
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81028067]
E1 = -3.6756568615219596  E_coul = 1.036047810403275
cycle= 1 E= -2.63960905111868  delta_E= -0.0132  |g|=    0  |ddm|= 0.0164
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80178062]
E1 = -3.6756568615219596  E_coul = 1.036047810403275
cycle= 2 E= -2.63960905111868  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6756568615219596  E_coul = 1.036047810403275
  mo_energy =
[-0.80178062]
E1 = -3.6756568615219596  E_coul = 1.036047810403275
Extra cycle  E= -2.63960905111868  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:04:53 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.0608526307         1
                                0.280585844917       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.0608526307030988, 1.0], [0.2805858449165354, 1.0]]]}
ecp = {}
CPU time:       144.09
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.645519054739243  E_coul = 1.0191305764158995
init E= -2.62638847832334
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81027603]
E1 = -3.6756723324813994  E_coul = 1.036059423210272
cycle= 1 E= -2.63961290927113  delta_E= -0.0132  |g|=    0  |ddm|= 0.0164
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80177674]
E1 = -3.6756723324813994  E_coul = 1.036059423210272
cycle= 2 E= -2.63961290927113  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6756723324813994  E_coul = 1.036059423210272
  mo_energy =
[-0.80177674]
E1 = -3.6756723324813994  E_coul = 1.036059423210272
Extra cycle  E= -2.63961290927113  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6756723324813994  E_coul = 1.036059423210272
init E= -2.63961290927113
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.80177674]
E1 = -3.6756723324813994  E_coul = 1.036059423210272
cycle= 1 E= -2.63961290927113  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.6756723324813994  E_coul = 1.036059423210272
  mo_energy =
[-0.80177674]
E1 = -3.6756723324813994  E_coul = 1.036059423210272
Extra cycle  E= -2.63961290927113  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:04:55 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.0608526307         1
                                0.280585844917       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.0608526307030988, 1.0], [0.2805858449165354, 1.0]]]}
ecp = {}
CPU time:       146.20
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.645519054739243  E_coul = 1.0191305764158995
init E= -2.62638847832334
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81027603]
E1 = -3.6756723324813994  E_coul = 1.036059423210272
cycle= 1 E= -2.63961290927113  delta_E= -0.0132  |g|=    0  |ddm|= 0.0164
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80177674]
E1 = -3.6756723324813994  E_coul = 1.036059423210272
cycle= 2 E= -2.63961290927113  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6756723324813994  E_coul = 1.036059423210272
  mo_energy =
[-0.80177674]
E1 = -3.6756723324813994  E_coul = 1.036059423210272
Extra cycle  E= -2.63961290927113  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:04:56 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.0608537227         1
                                0.280592566069       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.060853722699322, 1.0], [0.28059256606915506, 1.0]]]}
ecp = {}
CPU time:       146.94
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6455281051905044  E_coul = 1.01913703679805
init E= -2.62639106839245
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81027374]
E1 = -3.6756799469571018  E_coul = 1.036065139187071
cycle= 1 E= -2.63961480777003  delta_E= -0.0132  |g|=    0  |ddm|= 0.0164
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80177483]
E1 = -3.6756799469571018  E_coul = 1.036065139187071
cycle= 2 E= -2.63961480777003  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6756799469571018  E_coul = 1.036065139187071
  mo_energy =
[-0.80177483]
E1 = -3.6756799469571018  E_coul = 1.036065139187071
Extra cycle  E= -2.63961480777003  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6756799469571018  E_coul = 1.036065139187071
init E= -2.63961480777003
    CPU time for initialize scf      0.04 sec, wall time      0.04 sec
  mo_energy =
[-0.80177483]
E1 = -3.6756799469571018  E_coul = 1.036065139187071
cycle= 1 E= -2.63961480777003  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -3.6756799469571018  E_coul = 1.036065139187071
  mo_energy =
[-0.80177483]
E1 = -3.6756799469571018  E_coul = 1.036065139187071
Extra cycle  E= -2.63961480777003  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.08 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:04:58 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.0608537227         1
                                0.280592566069       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.060853722699322, 1.0], [0.28059256606915506, 1.0]]]}
ecp = {}
CPU time:       149.16
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6455281051905044  E_coul = 1.01913703679805
init E= -2.62639106839245
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81027374]
E1 = -3.6756799469571018  E_coul = 1.036065139187071
cycle= 1 E= -2.63961480777003  delta_E= -0.0132  |g|=    0  |ddm|= 0.0164
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80177483]
E1 = -3.6756799469571018  E_coul = 1.036065139187071
cycle= 2 E= -2.63961480777003  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6756799469571018  E_coul = 1.036065139187071
  mo_energy =
[-0.80177483]
E1 = -3.6756799469571018  E_coul = 1.036065139187071
Extra cycle  E= -2.63961480777003  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:04:59 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06085426038        1
                                0.280595875469       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.060854260382786, 1.0], [0.2805958754694497, 1.0]]]}
ecp = {}
CPU time:       149.91
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6455325611375415  E_coul = 1.0191402176576558
init E= -2.62639234347989
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81027262]
E1 = -3.675683696033204  E_coul = 1.0360679536123247
cycle= 1 E= -2.63961574242088  delta_E= -0.0132  |g|=    0  |ddm|= 0.0164
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80177389]
E1 = -3.675683696033204  E_coul = 1.0360679536123247
cycle= 2 E= -2.63961574242088  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.675683696033204  E_coul = 1.0360679536123247
  mo_energy =
[-0.80177389]
E1 = -3.675683696033204  E_coul = 1.0360679536123247
Extra cycle  E= -2.63961574242088  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.675683696033204  E_coul = 1.0360679536123247
init E= -2.63961574242088
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.80177389]
E1 = -3.675683696033204  E_coul = 1.0360679536123247
cycle= 1 E= -2.63961574242088  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.675683696033204  E_coul = 1.0360679536123247
  mo_energy =
[-0.80177389]
E1 = -3.675683696033204  E_coul = 1.0360679536123247
Extra cycle  E= -2.63961574242088  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:05:02 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06085426038        1
                                0.280595875469       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.060854260382786, 1.0], [0.2805958754694497, 1.0]]]}
ecp = {}
CPU time:       152.26
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6455325611375415  E_coul = 1.0191402176576558
init E= -2.62639234347989
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81027262]
E1 = -3.675683696033204  E_coul = 1.0360679536123247
cycle= 1 E= -2.63961574242088  delta_E= -0.0132  |g|=    0  |ddm|= 0.0164
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80177389]
E1 = -3.675683696033204  E_coul = 1.0360679536123247
cycle= 2 E= -2.63961574242088  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.675683696033204  E_coul = 1.0360679536123247
  mo_energy =
[-0.80177389]
E1 = -3.675683696033204  E_coul = 1.0360679536123247
Extra cycle  E= -2.63961574242088  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:05:02 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06085452517        1
                                0.280597505229       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.0608545251723562, 1.0], [0.28059750522885324, 1.0]]]}
ecp = {}
CPU time:       153.00
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.645534755440591  E_coul = 1.0191417840812496
init E= -2.62639297135934
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81027207]
E1 = -3.6756855422723955  E_coul = 1.0360693396046337
cycle= 1 E= -2.63961620266776  delta_E= -0.0132  |g|=    0  |ddm|= 0.0164
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80177343]
E1 = -3.6756855422723955  E_coul = 1.0360693396046337
cycle= 2 E= -2.63961620266776  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6756855422723955  E_coul = 1.0360693396046337
  mo_energy =
[-0.80177343]
E1 = -3.6756855422723955  E_coul = 1.0360693396046337
Extra cycle  E= -2.63961620266776  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6756855422723955  E_coul = 1.0360693396046337
init E= -2.63961620266776
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.80177343]
E1 = -3.6756855422723955  E_coul = 1.0360693396046337
cycle= 1 E= -2.63961620266776  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.6756855422723955  E_coul = 1.0360693396046337
  mo_energy =
[-0.80177343]
E1 = -3.6756855422723955  E_coul = 1.0360693396046337
Extra cycle  E= -2.63961620266776  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:05:05 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06085452517        1
                                0.280597505229       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.0608545251723562, 1.0], [0.28059750522885324, 1.0]]]}
ecp = {}
CPU time:       155.20
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.645534755440591  E_coul = 1.0191417840812496
init E= -2.62639297135934
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81027207]
E1 = -3.6756855422723955  E_coul = 1.0360693396046337
cycle= 1 E= -2.63961620266776  delta_E= -0.0132  |g|=    0  |ddm|= 0.0164
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80177343]
E1 = -3.6756855422723955  E_coul = 1.0360693396046337
cycle= 2 E= -2.63961620266776  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6756855422723955  E_coul = 1.0360693396046337
  mo_energy =
[-0.80177343]
E1 = -3.6756855422723955  E_coul = 1.0360693396046337
Extra cycle  E= -2.63961620266776  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:05:05 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06085465558        1
                                0.280598307889       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.060854655581746, 1.0], [0.28059830788860185, 1.0]]]}
ecp = {}
CPU time:       155.96
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.645535836117631  E_coul = 1.0191425555396931
init E= -2.62639328057794
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81027179]
E1 = -3.6756864515380583  E_coul = 1.0360700222062083
cycle= 1 E= -2.63961642933185  delta_E= -0.0132  |g|=    0  |ddm|= 0.0164
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.8017732]
E1 = -3.6756864515380583  E_coul = 1.0360700222062083
cycle= 2 E= -2.63961642933185  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6756864515380583  E_coul = 1.0360700222062083
  mo_energy =
[-0.8017732]
E1 = -3.6756864515380583  E_coul = 1.0360700222062083
Extra cycle  E= -2.63961642933185  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6756864515380583  E_coul = 1.0360700222062083
init E= -2.63961642933185
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.8017732]
E1 = -3.6756864515380583  E_coul = 1.0360700222062083
cycle= 1 E= -2.63961642933185  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.6756864515380583  E_coul = 1.0360700222062083
  mo_energy =
[-0.8017732]
E1 = -3.6756864515380583  E_coul = 1.0360700222062083
Extra cycle  E= -2.63961642933185  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.06 sec, wall time      0.06 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:05:07 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06085465558        1
                                0.280598307889       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.060854655581746, 1.0], [0.28059830788860185, 1.0]]]}
ecp = {}
CPU time:       158.08
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.645535836117631  E_coul = 1.0191425555396931
init E= -2.62639328057794
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81027179]
E1 = -3.6756864515380583  E_coul = 1.0360700222062083
cycle= 1 E= -2.63961642933185  delta_E= -0.0132  |g|=    0  |ddm|= 0.0164
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.8017732]
E1 = -3.6756864515380583  E_coul = 1.0360700222062083
cycle= 2 E= -2.63961642933185  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6756864515380583  E_coul = 1.0360700222062083
  mo_energy =
[-0.8017732]
E1 = -3.6756864515380583  E_coul = 1.0360700222062083
Extra cycle  E= -2.63961642933185  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:05:08 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06085471981        1
                                0.280598703215       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.0608547198110916, 1.0], [0.280598703215273, 1.0]]]}
ecp = {}
CPU time:       158.84
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6455363683683837  E_coul = 1.0191429354970583
init E= -2.62639343287133
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81027166]
E1 = -3.675686899367745  E_coul = 1.036070358401143
cycle= 1 E= -2.6396165409666  delta_E= -0.0132  |g|=    0  |ddm|= 0.0164
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80177309]
E1 = -3.675686899367745  E_coul = 1.036070358401143
cycle= 2 E= -2.6396165409666  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.675686899367745  E_coul = 1.036070358401143
  mo_energy =
[-0.80177309]
E1 = -3.675686899367745  E_coul = 1.036070358401143
Extra cycle  E= -2.6396165409666  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.675686899367745  E_coul = 1.036070358401143
init E= -2.6396165409666
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.80177309]
E1 = -3.675686899367745  E_coul = 1.036070358401143
cycle= 1 E= -2.6396165409666  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.675686899367745  E_coul = 1.036070358401143
  mo_energy =
[-0.80177309]
E1 = -3.675686899367745  E_coul = 1.036070358401143
Extra cycle  E= -2.6396165409666  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:05:10 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06085471981        1
                                0.280598703215       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.0608547198110916, 1.0], [0.280598703215273, 1.0]]]}
ecp = {}
CPU time:       160.95
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6455363683683837  E_coul = 1.0191429354970583
init E= -2.62639343287133
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81027166]
E1 = -3.675686899367745  E_coul = 1.036070358401143
cycle= 1 E= -2.6396165409666  delta_E= -0.0132  |g|=    0  |ddm|= 0.0164
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80177309]
E1 = -3.675686899367745  E_coul = 1.036070358401143
cycle= 2 E= -2.6396165409666  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.675686899367745  E_coul = 1.036070358401143
  mo_energy =
[-0.80177309]
E1 = -3.675686899367745  E_coul = 1.036070358401143
Extra cycle  E= -2.6396165409666  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:05:11 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06085478215        1
                                0.280599086908       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.060854782150295, 1.0], [0.2805990869082686, 1.0]]]}
ecp = {}
CPU time:       161.72
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.645536884952752  E_coul = 1.0191433042717655
init E= -2.62639358068099
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81027153]
E1 = -3.675687334017041  E_coul = 1.036070684702165
cycle= 1 E= -2.63961664931488  delta_E= -0.0132  |g|=    0  |ddm|= 0.0164
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80177298]
E1 = -3.675687334017041  E_coul = 1.036070684702165
cycle= 2 E= -2.63961664931488  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.675687334017041  E_coul = 1.036070684702165
  mo_energy =
[-0.80177298]
E1 = -3.675687334017041  E_coul = 1.036070684702165
Extra cycle  E= -2.63961664931488  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.675687334017041  E_coul = 1.036070684702165
init E= -2.63961664931488
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.80177298]
E1 = -3.675687334017041  E_coul = 1.036070684702165
cycle= 1 E= -2.63961664931488  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.01 sec
E1 = -3.675687334017041  E_coul = 1.036070684702165
  mo_energy =
[-0.80177298]
E1 = -3.675687334017041  E_coul = 1.036070684702165
Extra cycle  E= -2.63961664931488  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.08 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:05:13 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06085478215        1
                                0.280599086908       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.060854782150295, 1.0], [0.2805990869082686, 1.0]]]}
ecp = {}
CPU time:       163.84
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.645536884952752  E_coul = 1.0191433042717655
init E= -2.62639358068099
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81027153]
E1 = -3.675687334017041  E_coul = 1.036070684702165
cycle= 1 E= -2.63961664931488  delta_E= -0.0132  |g|=    0  |ddm|= 0.0164
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80177298]
E1 = -3.675687334017041  E_coul = 1.036070684702165
cycle= 2 E= -2.63961664931488  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.675687334017041  E_coul = 1.036070684702165
  mo_energy =
[-0.80177298]
E1 = -3.675687334017041  E_coul = 1.036070684702165
Extra cycle  E= -2.63961664931488  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.03 sec, wall time      0.03 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:05:14 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.91852177473        1
                                0.23585292051        1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.9185217747300207, 1.0], [0.23585292051042964, 1.0]]]}
ecp = {}
CPU time:       164.61
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.5593514996150915  E_coul = 0.9515144460640049
init E= -2.60783705355109
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83915189]
E1 = -3.6065879117895823  E_coul = 0.9769372626848846
cycle= 1 E= -2.6296506491047  delta_E= -0.0218  |g|=    0  |ddm|= 0.0262
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82635669]
E1 = -3.6065879117895823  E_coul = 0.9769372626848846
cycle= 2 E= -2.6296506491047  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6065879117895823  E_coul = 0.9769372626848846
  mo_energy =
[-0.82635669]
E1 = -3.6065879117895823  E_coul = 0.9769372626848846
Extra cycle  E= -2.6296506491047  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6065879117895823  E_coul = 0.9769372626848846
init E= -2.6296506491047
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82635669]
E1 = -3.6065879117895823  E_coul = 0.9769372626848846
cycle= 1 E= -2.6296506491047  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.6065879117895823  E_coul = 0.9769372626848846
  mo_energy =
[-0.82635669]
E1 = -3.6065879117895823  E_coul = 0.9769372626848846
Extra cycle  E= -2.6296506491047  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:05:16 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.91852177473        1
                                0.23585292051        1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.9185217747300207, 1.0], [0.23585292051042964, 1.0]]]}
ecp = {}
CPU time:       166.95
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.5593514996150915  E_coul = 0.9515144460640049
init E= -2.60783705355109
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83915189]
E1 = -3.6065879117895823  E_coul = 0.9769372626848846
cycle= 1 E= -2.6296506491047  delta_E= -0.0218  |g|=    0  |ddm|= 0.0262
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82635669]
E1 = -3.6065879117895823  E_coul = 0.9769372626848846
cycle= 2 E= -2.6296506491047  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6065879117895823  E_coul = 0.9769372626848846
  mo_energy =
[-0.82635669]
E1 = -3.6065879117895823  E_coul = 0.9769372626848846
Extra cycle  E= -2.6296506491047  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:05:17 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.91852177473        1
                                0.23585292051        1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.9185217747300207, 1.0], [0.23585292051042958, 1.0]]]}
ecp = {}
CPU time:       167.72
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.5593514996150897  E_coul = 0.9515144460640037
init E= -2.60783705355109
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83915189]
E1 = -3.606587911789582  E_coul = 0.9769372626848842
cycle= 1 E= -2.6296506491047  delta_E= -0.0218  |g|=    0  |ddm|= 0.0262
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82635669]
E1 = -3.606587911789582  E_coul = 0.9769372626848842
cycle= 2 E= -2.6296506491047  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.606587911789582  E_coul = 0.9769372626848842
  mo_energy =
[-0.82635669]
E1 = -3.606587911789582  E_coul = 0.9769372626848842
Extra cycle  E= -2.6296506491047  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.606587911789582  E_coul = 0.9769372626848842
init E= -2.6296506491047
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82635669]
E1 = -3.606587911789582  E_coul = 0.9769372626848842
cycle= 1 E= -2.6296506491047  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -3.606587911789582  E_coul = 0.9769372626848842
  mo_energy =
[-0.82635669]
E1 = -3.606587911789582  E_coul = 0.9769372626848842
Extra cycle  E= -2.6296506491047  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:05:20 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.91852177473        1
                                0.23585292051        1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.9185217747300207, 1.0], [0.23585292051042958, 1.0]]]}
ecp = {}
CPU time:       170.09
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.5593514996150897  E_coul = 0.9515144460640037
init E= -2.60783705355109
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83915189]
E1 = -3.606587911789582  E_coul = 0.9769372626848842
cycle= 1 E= -2.6296506491047  delta_E= -0.0218  |g|=    0  |ddm|= 0.0262
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82635669]
E1 = -3.606587911789582  E_coul = 0.9769372626848842
cycle= 2 E= -2.6296506491047  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.606587911789582  E_coul = 0.9769372626848842
  mo_energy =
[-0.82635669]
E1 = -3.606587911789582  E_coul = 0.9769372626848842
Extra cycle  E= -2.6296506491047  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:05:20 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.00307150889        1
                                0.259898438976       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.003071508885048, 1.0], [0.25989843897567955, 1.0]]]}
ecp = {}
CPU time:       170.89
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6119387893128403  E_coul = 0.9910908049047461
init E= -2.62084798440809
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.82279673]
E1 = -3.647035861682293  E_coul = 1.0104451666601921
cycle= 1 E= -2.6365906950221  delta_E= -0.0157  |g|=    0  |ddm|= 0.0192
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.81307276]
E1 = -3.647035861682293  E_coul = 1.0104451666601921
cycle= 2 E= -2.6365906950221  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.647035861682293  E_coul = 1.0104451666601921
  mo_energy =
[-0.81307276]
E1 = -3.647035861682293  E_coul = 1.0104451666601921
Extra cycle  E= -2.6365906950221  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.647035861682293  E_coul = 1.0104451666601921
init E= -2.6365906950221
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.81307276]
E1 = -3.647035861682293  E_coul = 1.0104451666601921
cycle= 1 E= -2.6365906950221  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.647035861682293  E_coul = 1.0104451666601921
  mo_energy =
[-0.81307276]
E1 = -3.647035861682293  E_coul = 1.0104451666601921
Extra cycle  E= -2.6365906950221  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.06 sec, wall time      0.06 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:05:23 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.00307150889        1
                                0.259898438976       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.003071508885048, 1.0], [0.25989843897567955, 1.0]]]}
ecp = {}
CPU time:       173.03
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6119387893128403  E_coul = 0.9910908049047461
init E= -2.62084798440809
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.82279673]
E1 = -3.647035861682293  E_coul = 1.0104451666601921
cycle= 1 E= -2.6365906950221  delta_E= -0.0157  |g|=    0  |ddm|= 0.0192
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.81307276]
E1 = -3.647035861682293  E_coul = 1.0104451666601921
cycle= 2 E= -2.6365906950221  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.647035861682293  E_coul = 1.0104451666601921
  mo_energy =
[-0.81307276]
E1 = -3.647035861682293  E_coul = 1.0104451666601921
Extra cycle  E= -2.6365906950221  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:05:23 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.00307150889        1
                                0.259898438976       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.003071508885048, 1.0], [0.2598984389756795, 1.0]]]}
ecp = {}
CPU time:       173.86
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6119387893128403  E_coul = 0.9910908049047461
init E= -2.62084798440809
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.82279673]
E1 = -3.647035861682293  E_coul = 1.0104451666601921
cycle= 1 E= -2.6365906950221  delta_E= -0.0157  |g|=    0  |ddm|= 0.0192
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.81307276]
E1 = -3.647035861682293  E_coul = 1.0104451666601921
cycle= 2 E= -2.6365906950221  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.647035861682293  E_coul = 1.0104451666601921
  mo_energy =
[-0.81307276]
E1 = -3.647035861682293  E_coul = 1.0104451666601921
Extra cycle  E= -2.6365906950221  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.647035861682293  E_coul = 1.0104451666601921
init E= -2.6365906950221
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.81307276]
E1 = -3.647035861682293  E_coul = 1.0104451666601921
cycle= 1 E= -2.6365906950221  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.647035861682293  E_coul = 1.0104451666601921
  mo_energy =
[-0.81307276]
E1 = -3.647035861682293  E_coul = 1.0104451666601921
Extra cycle  E= -2.6365906950221  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:05:26 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.00307150889        1
                                0.259898438976       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.003071508885048, 1.0], [0.2598984389756795, 1.0]]]}
ecp = {}
CPU time:       176.28
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6119387893128403  E_coul = 0.9910908049047461
init E= -2.62084798440809
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.82279673]
E1 = -3.647035861682293  E_coul = 1.0104451666601921
cycle= 1 E= -2.6365906950221  delta_E= -0.0157  |g|=    0  |ddm|= 0.0192
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.81307276]
E1 = -3.647035861682293  E_coul = 1.0104451666601921
cycle= 2 E= -2.6365906950221  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.647035861682293  E_coul = 1.0104451666601921
  mo_energy =
[-0.81307276]
E1 = -3.647035861682293  E_coul = 1.0104451666601921
Extra cycle  E= -2.6365906950221  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:05:27 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.05301079023        1
                                0.267302199002       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.0530107902335577, 1.0], [0.26730219900190155, 1.0]]]}
ecp = {}
CPU time:       177.20
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.625561037259214  E_coul = 1.0049413294100513
init E= -2.62061970784916
    CPU time for initialize scf      0.02 sec, wall time      0.04 sec
  mo_energy =
[-0.81536826]
E1 = -3.659351297334261  E_coul = 1.0237607448677213
cycle= 1 E= -2.63559055246654  delta_E= -0.015  |g|=    0  |ddm|= 0.0185
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.8059149]
E1 = -3.659351297334261  E_coul = 1.0237607448677213
cycle= 2 E= -2.63559055246654  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.659351297334261  E_coul = 1.0237607448677213
  mo_energy =
[-0.8059149]
E1 = -3.659351297334261  E_coul = 1.0237607448677213
Extra cycle  E= -2.63559055246654  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.05 sec, wall time      0.08 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.659351297334261  E_coul = 1.0237607448677213
init E= -2.63559055246654
    CPU time for initialize scf      0.06 sec, wall time      0.07 sec
  mo_energy =
[-0.8059149]
E1 = -3.659351297334261  E_coul = 1.0237607448677213
cycle= 1 E= -2.63559055246654  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -3.659351297334261  E_coul = 1.0237607448677213
  mo_energy =
[-0.8059149]
E1 = -3.659351297334261  E_coul = 1.0237607448677213
Extra cycle  E= -2.63559055246654  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.11 sec, wall time      0.13 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:05:30 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.05301079023        1
                                0.267302199002       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.0530107902335577, 1.0], [0.26730219900190155, 1.0]]]}
ecp = {}
CPU time:       179.81
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.625561037259214  E_coul = 1.0049413294100513
init E= -2.62061970784916
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81536826]
E1 = -3.659351297334261  E_coul = 1.0237607448677213
cycle= 1 E= -2.63559055246654  delta_E= -0.015  |g|=    0  |ddm|= 0.0185
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.8059149]
E1 = -3.659351297334261  E_coul = 1.0237607448677213
cycle= 2 E= -2.63559055246654  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.659351297334261  E_coul = 1.0237607448677213
  mo_energy =
[-0.8059149]
E1 = -3.659351297334261  E_coul = 1.0237607448677213
Extra cycle  E= -2.63559055246654  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.05 sec, wall time      0.05 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:05:31 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06008712075        1
                                0.27617487306        1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.0600871207494147, 1.0], [0.2761748730601907, 1.0]]]}
ecp = {}
CPU time:       180.71
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.639360576566913  E_coul = 1.0148014069947795
init E= -2.62455916957213
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81177969]
E1 = -3.6705634513710077  E_coul = 1.0322772590748632
cycle= 1 E= -2.63828619229614  delta_E= -0.0137  |g|=    0  |ddm|= 0.017
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80300447]
E1 = -3.6705634513710077  E_coul = 1.0322772590748632
cycle= 2 E= -2.63828619229614  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6705634513710077  E_coul = 1.0322772590748632
  mo_energy =
[-0.80300447]
E1 = -3.6705634513710077  E_coul = 1.0322772590748632
Extra cycle  E= -2.63828619229614  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6705634513710077  E_coul = 1.0322772590748632
init E= -2.63828619229614
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.80300447]
E1 = -3.6705634513710077  E_coul = 1.0322772590748632
cycle= 1 E= -2.63828619229614  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -3.6705634513710077  E_coul = 1.0322772590748632
  mo_energy =
[-0.80300447]
E1 = -3.6705634513710077  E_coul = 1.0322772590748632
Extra cycle  E= -2.63828619229614  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:05:33 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06008712075        1
                                0.27617487306        1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.0600871207494147, 1.0], [0.2761748730601907, 1.0]]]}
ecp = {}
CPU time:       183.14
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.639360576566913  E_coul = 1.0148014069947795
init E= -2.62455916957213
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81177969]
E1 = -3.6705634513710077  E_coul = 1.0322772590748632
cycle= 1 E= -2.63828619229614  delta_E= -0.0137  |g|=    0  |ddm|= 0.017
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80300447]
E1 = -3.6705634513710077  E_coul = 1.0322772590748632
cycle= 2 E= -2.63828619229614  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6705634513710077  E_coul = 1.0322772590748632
  mo_energy =
[-0.80300447]
E1 = -3.6705634513710077  E_coul = 1.0322772590748632
Extra cycle  E= -2.63828619229614  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:05:34 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06053744368        1
                                0.278770190418       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.06053744368293, 1.0], [0.2787701904179227, 1.0]]]}
ecp = {}
CPU time:       183.99
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6430370235020244  E_coul = 1.0173688951903925
init E= -2.62566812831163
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81089505]
E1 = -3.6735958512318274  E_coul = 1.034508438268714
cycle= 1 E= -2.63908741296311  delta_E= -0.0134  |g|=    0  |ddm|= 0.0166
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80228949]
E1 = -3.6735958512318274  E_coul = 1.034508438268714
cycle= 2 E= -2.63908741296311  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6735958512318274  E_coul = 1.034508438268714
  mo_energy =
[-0.80228949]
E1 = -3.6735958512318274  E_coul = 1.034508438268714
Extra cycle  E= -2.63908741296311  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6735958512318274  E_coul = 1.034508438268714
init E= -2.63908741296311
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.80228949]
E1 = -3.6735958512318274  E_coul = 1.034508438268714
cycle= 1 E= -2.63908741296311  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.6735958512318274  E_coul = 1.034508438268714
  mo_energy =
[-0.80228949]
E1 = -3.6735958512318274  E_coul = 1.034508438268714
Extra cycle  E= -2.63908741296311  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:05:36 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06053744368        1
                                0.278770190418       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.06053744368293, 1.0], [0.2787701904179227, 1.0]]]}
ecp = {}
CPU time:       186.39
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6430370235020244  E_coul = 1.0173688951903925
init E= -2.62566812831163
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81089505]
E1 = -3.6735958512318274  E_coul = 1.034508438268714
cycle= 1 E= -2.63908741296311  delta_E= -0.0134  |g|=    0  |ddm|= 0.0166
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80228949]
E1 = -3.6735958512318274  E_coul = 1.034508438268714
cycle= 2 E= -2.63908741296311  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6735958512318274  E_coul = 1.034508438268714
  mo_energy =
[-0.80228949]
E1 = -3.6735958512318274  E_coul = 1.034508438268714
Extra cycle  E= -2.63908741296311  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:05:37 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06070181367        1
                                0.279717493466       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.0607018136727526, 1.0], [0.279717493466307, 1.0]]]}
ecp = {}
CPU time:       187.28
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6443411523441678  E_coul = 1.0182915441882974
init E= -2.62604960815587
    CPU time for initialize scf      0.02 sec, wall time      0.03 sec
  mo_energy =
[-0.8105721]
E1 = -3.674683812152481  E_coul = 1.0353186550443794
cycle= 1 E= -2.6393651571081  delta_E= -0.0133  |g|=    0  |ddm|= 0.0165
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80202325]
E1 = -3.674683812152481  E_coul = 1.0353186550443794
cycle= 2 E= -2.6393651571081  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
E1 = -3.674683812152481  E_coul = 1.0353186550443794
  mo_energy =
[-0.80202325]
E1 = -3.674683812152481  E_coul = 1.0353186550443794
Extra cycle  E= -2.6393651571081  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.05 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.674683812152481  E_coul = 1.0353186550443794
init E= -2.6393651571081
    CPU time for initialize scf      0.04 sec, wall time      0.05 sec
  mo_energy =
[-0.80202325]
E1 = -3.674683812152481  E_coul = 1.0353186550443794
cycle= 1 E= -2.6393651571081  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -3.674683812152481  E_coul = 1.0353186550443794
  mo_energy =
[-0.80202325]
E1 = -3.674683812152481  E_coul = 1.0353186550443794
Extra cycle  E= -2.6393651571081  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:05:40 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06070181367        1
                                0.279717493466       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.0607018136727526, 1.0], [0.279717493466307, 1.0]]]}
ecp = {}
CPU time:       189.77
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6443411523441678  E_coul = 1.0182915441882974
init E= -2.62604960815587
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.8105721]
E1 = -3.674683812152481  E_coul = 1.0353186550443794
cycle= 1 E= -2.6393651571081  delta_E= -0.0133  |g|=    0  |ddm|= 0.0165
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80202325]
E1 = -3.674683812152481  E_coul = 1.0353186550443794
cycle= 2 E= -2.6393651571081  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.674683812152481  E_coul = 1.0353186550443794
  mo_energy =
[-0.80202325]
E1 = -3.674683812152481  E_coul = 1.0353186550443794
Extra cycle  E= -2.6393651571081  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:05:41 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06077973517        1
                                0.280166573453       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.0607797351710877, 1.0], [0.2801665734533967, 1.0]]]}
ecp = {}
CPU time:       190.68
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.644952405775946  E_coul = 1.0187262542945867
init E= -2.62622615148136
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81041899]
E1 = -3.6751960791947624  E_coul = 1.0357019743768274
cycle= 1 E= -2.63949410481793  delta_E= -0.0133  |g|=    0  |ddm|= 0.0165
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80189607]
E1 = -3.6751960791947624  E_coul = 1.0357019743768274
cycle= 2 E= -2.63949410481793  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6751960791947624  E_coul = 1.0357019743768274
  mo_energy =
[-0.80189607]
E1 = -3.6751960791947624  E_coul = 1.0357019743768274
Extra cycle  E= -2.63949410481793  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6751960791947624  E_coul = 1.0357019743768274
init E= -2.63949410481793
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.80189607]
E1 = -3.6751960791947624  E_coul = 1.0357019743768274
cycle= 1 E= -2.63949410481793  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.6751960791947624  E_coul = 1.0357019743768274
  mo_energy =
[-0.80189607]
E1 = -3.6751960791947624  E_coul = 1.0357019743768274
Extra cycle  E= -2.63949410481793  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:05:43 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06077973517        1
                                0.280166573453       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.0607797351710877, 1.0], [0.2801665734533967, 1.0]]]}
ecp = {}
CPU time:       192.97
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.644952405775946  E_coul = 1.0187262542945867
init E= -2.62622615148136
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81041899]
E1 = -3.6751960791947624  E_coul = 1.0357019743768274
cycle= 1 E= -2.63949410481793  delta_E= -0.0133  |g|=    0  |ddm|= 0.0165
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80189607]
E1 = -3.6751960791947624  E_coul = 1.0357019743768274
cycle= 2 E= -2.63949410481793  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6751960791947624  E_coul = 1.0357019743768274
  mo_energy =
[-0.80189607]
E1 = -3.6751960791947624  E_coul = 1.0357019743768274
Extra cycle  E= -2.63949410481793  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:05:44 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06081769672        1
                                0.280385354848       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.0608176967248015, 1.0], [0.2803853548476984, 1.0]]]}
ecp = {}
CPU time:       193.94
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.645248574277483  E_coul = 1.0189374124822694
init E= -2.62631116179521
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.8103444]
E1 = -3.6754448330729024  E_coul = 1.0358885391325656
cycle= 1 E= -2.63955629394034  delta_E= -0.0132  |g|=    0  |ddm|= 0.0164
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80183388]
E1 = -3.6754448330729024  E_coul = 1.0358885391325656
cycle= 2 E= -2.63955629394034  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6754448330729024  E_coul = 1.0358885391325656
  mo_energy =
[-0.80183388]
E1 = -3.6754448330729024  E_coul = 1.0358885391325656
Extra cycle  E= -2.63955629394034  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.03 sec, wall time      0.03 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6754448330729024  E_coul = 1.0358885391325656
init E= -2.63955629394034
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.80183388]
E1 = -3.6754448330729024  E_coul = 1.0358885391325656
cycle= 1 E= -2.63955629394034  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -3.6754448330729024  E_coul = 1.0358885391325656
  mo_energy =
[-0.80183388]
E1 = -3.6754448330729024  E_coul = 1.0358885391325656
Extra cycle  E= -2.63955629394034  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:05:47 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06081769672        1
                                0.280385354848       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.0608176967248015, 1.0], [0.2803853548476984, 1.0]]]}
ecp = {}
CPU time:       196.37
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.645248574277483  E_coul = 1.0189374124822694
init E= -2.62631116179521
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.8103444]
E1 = -3.6754448330729024  E_coul = 1.0358885391325656
cycle= 1 E= -2.63955629394034  delta_E= -0.0132  |g|=    0  |ddm|= 0.0164
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80183388]
E1 = -3.6754448330729024  E_coul = 1.0358885391325656
cycle= 2 E= -2.63955629394034  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6754448330729024  E_coul = 1.0358885391325656
  mo_energy =
[-0.80183388]
E1 = -3.6754448330729024  E_coul = 1.0358885391325656
Extra cycle  E= -2.63955629394034  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:05:48 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06083639241        1
                                0.280493102482       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.0608363924079205, 1.0], [0.28049310248234405, 1.0]]]}
ecp = {}
CPU time:       197.26
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6453940450334605  E_coul = 1.0190412561514721
init E= -2.62635278888199
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81030766]
E1 = -3.675567146995784  E_coul = 1.0359803772311942
cycle= 1 E= -2.63958676976459  delta_E= -0.0132  |g|=    0  |ddm|= 0.0164
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.8018032]
E1 = -3.675567146995784  E_coul = 1.0359803772311942
cycle= 2 E= -2.63958676976459  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.675567146995784  E_coul = 1.0359803772311942
  mo_energy =
[-0.8018032]
E1 = -3.675567146995784  E_coul = 1.0359803772311942
Extra cycle  E= -2.63958676976459  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.675567146995784  E_coul = 1.0359803772311942
init E= -2.63958676976459
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.8018032]
E1 = -3.675567146995784  E_coul = 1.0359803772311942
cycle= 1 E= -2.63958676976459  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.675567146995784  E_coul = 1.0359803772311942
  mo_energy =
[-0.8018032]
E1 = -3.675567146995784  E_coul = 1.0359803772311942
Extra cycle  E= -2.63958676976459  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:05:50 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06083639241        1
                                0.280493102482       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.0608363924079205, 1.0], [0.28049310248234405, 1.0]]]}
ecp = {}
CPU time:       199.70
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6453940450334605  E_coul = 1.0190412561514721
init E= -2.62635278888199
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81030766]
E1 = -3.675567146995784  E_coul = 1.0359803772311942
cycle= 1 E= -2.63958676976459  delta_E= -0.0132  |g|=    0  |ddm|= 0.0164
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.8018032]
E1 = -3.675567146995784  E_coul = 1.0359803772311942
cycle= 2 E= -2.63958676976459  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.675567146995784  E_coul = 1.0359803772311942
  mo_energy =
[-0.8018032]
E1 = -3.675567146995784  E_coul = 1.0359803772311942
Extra cycle  E= -2.63958676976459  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:05:51 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.0608456477         1
                                0.280546442899       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.060845647697132, 1.0], [0.28054644289863967, 1.0]]]}
ecp = {}
CPU time:       200.58
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.645465965298609  E_coul = 1.019092627406287
init E= -2.62637333789232
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81028948]
E1 = -3.6756276509010473  E_coul = 1.0360258311054806
cycle= 1 E= -2.63960181979557  delta_E= -0.0132  |g|=    0  |ddm|= 0.0164
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
  mo_energy =
[-0.80178799]
E1 = -3.6756276509010473  E_coul = 1.0360258311054806
cycle= 2 E= -2.63960181979557  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6756276509010473  E_coul = 1.0360258311054806
  mo_energy =
[-0.80178799]
E1 = -3.6756276509010473  E_coul = 1.0360258311054806
Extra cycle  E= -2.63960181979557  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6756276509010473  E_coul = 1.0360258311054806
init E= -2.63960181979557
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.80178799]
E1 = -3.6756276509010473  E_coul = 1.0360258311054806
cycle= 1 E= -2.63960181979557  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.6756276509010473  E_coul = 1.0360258311054806
  mo_energy =
[-0.80178799]
E1 = -3.6756276509010473  E_coul = 1.0360258311054806
Extra cycle  E= -2.63960181979557  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:05:53 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.0608456477         1
                                0.280546442899       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.060845647697132, 1.0], [0.28054644289863967, 1.0]]]}
ecp = {}
CPU time:       202.85
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.645465965298609  E_coul = 1.019092627406287
init E= -2.62637333789232
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81028948]
E1 = -3.6756276509010473  E_coul = 1.0360258311054806
cycle= 1 E= -2.63960181979557  delta_E= -0.0132  |g|=    0  |ddm|= 0.0164
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80178799]
E1 = -3.6756276509010473  E_coul = 1.0360258311054806
cycle= 2 E= -2.63960181979557  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6756276509010473  E_coul = 1.0360258311054806
  mo_energy =
[-0.80178799]
E1 = -3.6756276509010473  E_coul = 1.0360258311054806
Extra cycle  E= -2.63960181979557  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
res = minimize(
    He_energy,
    x0,
    jac=grad_He_energy,
    bounds=((1e-4, None), (1e-4, None)),
    method='trust-constr', tol=1e-6,
)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:05:54 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06085024115        1
                                0.280572916034       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.0608502411469303, 1.0], [0.28057291603404144, 1.0]]]}
ecp = {}
CPU time:       203.77
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.64550163637297  E_coul = 1.019118114263678
init E= -2.62638352210929
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81028045]
E1 = -3.675657667628413  E_coul = 1.0360483875184767
cycle= 1 E= -2.63960928010994  delta_E= -0.0132  |g|=    0  |ddm|= 0.0164
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80178045]
E1 = -3.675657667628413  E_coul = 1.0360483875184767
cycle= 2 E= -2.63960928010994  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.675657667628413  E_coul = 1.0360483875184767
  mo_energy =
[-0.80178045]
E1 = -3.675657667628413  E_coul = 1.0360483875184767
Extra cycle  E= -2.63960928010994  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.675657667628413  E_coul = 1.0360483875184767
init E= -2.63960928010994
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.80178045]
E1 = -3.675657667628413  E_coul = 1.0360483875184767
cycle= 1 E= -2.63960928010994  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.675657667628413  E_coul = 1.0360483875184767
  mo_energy =
[-0.80178045]
E1 = -3.675657667628413  E_coul = 1.0360483875184767
Extra cycle  E= -2.63960928010994  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
# res = minimize(
#     He_energy,
#     x0,
#     jac=grad_He_energy,
#     bounds=((1e-4, None), (1e-4, None)),
#     method='trust-constr', tol=1e-6,
# )



print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:05:57 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06085024115        1
                                0.280572916034       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.0608502411469303, 1.0], [0.28057291603404144, 1.0]]]}
ecp = {}
CPU time:       206.41
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.64550163637297  E_coul = 1.019118114263678
init E= -2.62638352210929
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81028045]
E1 = -3.675657667628413  E_coul = 1.0360483875184767
cycle= 1 E= -2.63960928010994  delta_E= -0.0132  |g|=    0  |ddm|= 0.0164
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80178045]
E1 = -3.675657667628413  E_coul = 1.0360483875184767
cycle= 2 E= -2.63960928010994  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.675657667628413  E_coul = 1.0360483875184767
  mo_energy =
[-0.80178045]
E1 = -3.675657667628413  E_coul = 1.0360483875184767
Extra cycle  E= -2.63960928010994  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
# res = minimize(
#     He_energy,
#     x0,
#     jac=grad_He_energy,
#     bounds=((1e-4, None), (1e-4, None)),
#     method='trust-constr', tol=1e-6,
# )



print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:05:58 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06085252375        1
                                0.280586071223       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.06085252375152, 1.0], [0.28058607122306717, 1.0]]]}
ecp = {}
CPU time:       207.40
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6455193564997534  E_coul = 1.0191307771322298
init E= -2.62638857936752
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81027597]
E1 = -3.675672580837727  E_coul = 1.0360595957476362
cycle= 1 E= -2.63961298509009  delta_E= -0.0132  |g|=    0  |ddm|= 0.0164
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80177669]
E1 = -3.675672580837727  E_coul = 1.0360595957476362
cycle= 2 E= -2.63961298509009  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.675672580837727  E_coul = 1.0360595957476362
  mo_energy =
[-0.80177669]
E1 = -3.675672580837727  E_coul = 1.0360595957476362
Extra cycle  E= -2.63961298509009  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.675672580837727  E_coul = 1.0360595957476362
init E= -2.63961298509009
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.80177669]
E1 = -3.675672580837727  E_coul = 1.0360595957476362
cycle= 1 E= -2.63961298509009  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -3.675672580837727  E_coul = 1.0360595957476362
  mo_energy =
[-0.80177669]
E1 = -3.675672580837727  E_coul = 1.0360595957476362
Extra cycle  E= -2.63961298509009  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
# res = minimize(
#     He_energy,
#     x0,
#     jac=grad_He_energy,
#     bounds=((1e-4, None), (1e-4, None)),
#     method='trust-constr', tol=1e-6,
# )



print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:06:00 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06085252375        1
                                0.280586071223       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.06085252375152, 1.0], [0.28058607122306717, 1.0]]]}
ecp = {}
CPU time:       209.87
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6455193564997534  E_coul = 1.0191307771322298
init E= -2.62638857936752
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81027597]
E1 = -3.675672580837727  E_coul = 1.0360595957476362
cycle= 1 E= -2.63961298509009  delta_E= -0.0132  |g|=    0  |ddm|= 0.0164
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80177669]
E1 = -3.675672580837727  E_coul = 1.0360595957476362
cycle= 2 E= -2.63961298509009  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.675672580837727  E_coul = 1.0360595957476362
  mo_energy =
[-0.80177669]
E1 = -3.675672580837727  E_coul = 1.0360595957476362
Extra cycle  E= -2.63961298509009  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
# res = minimize(
#     He_energy,
#     x0,
#     jac=grad_He_energy,
#     bounds=((1e-4, None), (1e-4, None)),
#     method='trust-constr', tol=1e-6,
# )



print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:06:01 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06085365874        1
                                0.280592612427       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.060853658739543, 1.0], [0.28059261242694195, 1.0]]]}
ecp = {}
CPU time:       210.77
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6455281661220784  E_coul = 1.019137072990824
init E= -2.62639109313125
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81027374]
E1 = -3.675679995476273  E_coul = 1.0360651686995366
cycle= 1 E= -2.63961482677674  delta_E= -0.0132  |g|=    0  |ddm|= 0.0164
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80177483]
E1 = -3.675679995476273  E_coul = 1.0360651686995366
cycle= 2 E= -2.63961482677674  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.675679995476273  E_coul = 1.0360651686995366
  mo_energy =
[-0.80177483]
E1 = -3.675679995476273  E_coul = 1.0360651686995366
Extra cycle  E= -2.63961482677674  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.675679995476273  E_coul = 1.0360651686995366
init E= -2.63961482677674
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.80177483]
E1 = -3.675679995476273  E_coul = 1.0360651686995366
cycle= 1 E= -2.63961482677674  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.675679995476273  E_coul = 1.0360651686995366
  mo_energy =
[-0.80177483]
E1 = -3.675679995476273  E_coul = 1.0360651686995366
Extra cycle  E= -2.63961482677674  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
# res = minimize(
#     He_energy,
#     x0,
#     jac=grad_He_energy,
#     bounds=((1e-4, None), (1e-4, None)),
#     method='trust-constr', tol=1e-6,
# )



print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:06:04 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06085365874        1
                                0.280592612427       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.060853658739543, 1.0], [0.28059261242694195, 1.0]]]}
ecp = {}
CPU time:       213.29
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6455281661220784  E_coul = 1.019137072990824
init E= -2.62639109313125
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.81027374]
E1 = -3.675679995476273  E_coul = 1.0360651686995366
cycle= 1 E= -2.63961482677674  delta_E= -0.0132  |g|=    0  |ddm|= 0.0164
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
  mo_energy =
[-0.80177483]
E1 = -3.675679995476273  E_coul = 1.0360651686995366
cycle= 2 E= -2.63961482677674  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.675679995476273  E_coul = 1.0360651686995366
  mo_energy =
[-0.80177483]
E1 = -3.675679995476273  E_coul = 1.0360651686995366
Extra cycle  E= -2.63961482677674  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.05 sec, wall time      0.05 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
# res = minimize(
#     He_energy,
#     x0,
#     jac=grad_He_energy,
#     bounds=((1e-4, None), (1e-4, None)),
#     method='trust-constr', tol=1e-6,
# )

minimizer_kwargs = {"method": "L-BFGS-B"}
res=optimize.basinhopping(nethedge,guess,niter=100,minimizer_kwargs=minimizer_kwargs)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:06:05 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06085422327        1
                                0.280595865934       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.0608542232673877, 1.0], [0.2805958659341558, 1.0]]]}
ecp = {}
CPU time:       214.23
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6455325475583953  E_coul = 1.0191402043313098
init E= -2.62639234322709
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81027263]
E1 = -3.675683683242014  E_coul = 1.0360679405721476
cycle= 1 E= -2.63961574266987  delta_E= -0.0132  |g|=    0  |ddm|= 0.0164
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.8017739]
E1 = -3.675683683242014  E_coul = 1.0360679405721476
cycle= 2 E= -2.63961574266987  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.675683683242014  E_coul = 1.0360679405721476
  mo_energy =
[-0.8017739]
E1 = -3.675683683242014  E_coul = 1.0360679405721476
Extra cycle  E= -2.63961574266987  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.675683683242014  E_coul = 1.0360679405721476
init E= -2.63961574266987
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.8017739]
E1 = -3.675683683242014  E_coul = 1.0360679405721476
cycle= 1 E= -2.63961574266987  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.675683683242014  E_coul = 1.0360679405721476
  mo_energy =
[-0.8017739]
E1 = -3.675683683242014  E_coul = 1.0360679405721476
Extra cycle  E= -2.63961574266987  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
# res = minimize(
#     He_energy,
#     x0,
#     jac=grad_He_energy,
#     bounds=((1e-4, None), (1e-4, None)),
#     method='trust-constr', tol=1e-6,
# )

minimizer_kwargs = {"method": "L-BFGS-B"}
res=optimize.basinhopping(nethedge,guess,niter=100,minimizer_kwargs=minimizer_kwargs)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:06:07 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06085422327        1
                                0.280595865934       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.0608542232673877, 1.0], [0.2805958659341558, 1.0]]]}
ecp = {}
CPU time:       216.69
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6455325475583953  E_coul = 1.0191402043313098
init E= -2.62639234322709
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81027263]
E1 = -3.675683683242014  E_coul = 1.0360679405721476
cycle= 1 E= -2.63961574266987  delta_E= -0.0132  |g|=    0  |ddm|= 0.0164
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
  mo_energy =
[-0.8017739]
E1 = -3.675683683242014  E_coul = 1.0360679405721476
cycle= 2 E= -2.63961574266987  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.675683683242014  E_coul = 1.0360679405721476
  mo_energy =
[-0.8017739]
E1 = -3.675683683242014  E_coul = 1.0360679405721476
Extra cycle  E= -2.63961574266987  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.03 sec, wall time      0.03 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
# res = minimize(
#     He_energy,
#     x0,
#     jac=grad_He_energy,
#     bounds=((1e-4, None), (1e-4, None)),
#     method='trust-constr', tol=1e-6,
# )

minimizer_kwargs = {"method": "L-BFGS-B"}
res=optimize.basinhopping(nethedge,guess,niter=100,minimizer_kwargs=minimizer_kwargs)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:06:08 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.0608545041         1
                                0.280597484432       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.060854504098879, 1.0], [0.2805974844323267, 1.0]]]}
ecp = {}
CPU time:       217.61
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6455347270720497  E_coul = 1.0191417620226295
init E= -2.62639296504942
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81027207]
E1 = -3.6756855177239665  E_coul = 1.0360693194654547
cycle= 1 E= -2.63961619825851  delta_E= -0.0132  |g|=    0  |ddm|= 0.0164
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80177344]
E1 = -3.6756855177239665  E_coul = 1.0360693194654547
cycle= 2 E= -2.63961619825851  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6756855177239665  E_coul = 1.0360693194654547
  mo_energy =
[-0.80177344]
E1 = -3.6756855177239665  E_coul = 1.0360693194654547
Extra cycle  E= -2.63961619825851  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.03 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6756855177239665  E_coul = 1.0360693194654547
init E= -2.63961619825851
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.80177344]
E1 = -3.6756855177239665  E_coul = 1.0360693194654547
cycle= 1 E= -2.63961619825851  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.6756855177239665  E_coul = 1.0360693194654547
  mo_energy =
[-0.80177344]
E1 = -3.6756855177239665  E_coul = 1.0360693194654547
Extra cycle  E= -2.63961619825851  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
# res = minimize(
#     He_energy,
#     x0,
#     jac=grad_He_energy,
#     bounds=((1e-4, None), (1e-4, None)),
#     method='trust-constr', tol=1e-6,
# )

minimizer_kwargs = {"method": "L-BFGS-B"}
res=optimize.basinhopping(nethedge,guess,niter=100,minimizer_kwargs=minimizer_kwargs)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:06:11 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.0608545041         1
                                0.280597484432       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.060854504098879, 1.0], [0.2805974844323267, 1.0]]]}
ecp = {}
CPU time:       220.14
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6455347270720497  E_coul = 1.0191417620226295
init E= -2.62639296504942
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81027207]
E1 = -3.6756855177239665  E_coul = 1.0360693194654547
cycle= 1 E= -2.63961619825851  delta_E= -0.0132  |g|=    0  |ddm|= 0.0164
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80177344]
E1 = -3.6756855177239665  E_coul = 1.0360693194654547
cycle= 2 E= -2.63961619825851  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6756855177239665  E_coul = 1.0360693194654547
  mo_energy =
[-0.80177344]
E1 = -3.6756855177239665  E_coul = 1.0360693194654547
Extra cycle  E= -2.63961619825851  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
# res = minimize(
#     He_energy,
#     x0,
#     jac=grad_He_energy,
#     bounds=((1e-4, None), (1e-4, None)),
#     method='trust-constr', tol=1e-6,
# )

minimizer_kwargs = {"method": "L-BFGS-B"}
res=optimize.basinhopping(nethedge,guess,niter=100,minimizer_kwargs=minimizer_kwargs)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:06:12 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06085464381        1
                                0.280598289636       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.060854643812658, 1.0], [0.28059828963581335, 1.0]]]}
ecp = {}
CPU time:       221.21
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6455358113594207  E_coul = 1.019142536966401
init E= -2.62639327439302
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.8102718]
E1 = -3.6756864303686854  E_coul = 1.0360700054630363
cycle= 1 E= -2.63961642490565  delta_E= -0.0132  |g|=    0  |ddm|= 0.0164
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80177321]
E1 = -3.6756864303686854  E_coul = 1.0360700054630363
cycle= 2 E= -2.63961642490565  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6756864303686854  E_coul = 1.0360700054630363
  mo_energy =
[-0.80177321]
E1 = -3.6756864303686854  E_coul = 1.0360700054630363
Extra cycle  E= -2.63961642490565  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6756864303686854  E_coul = 1.0360700054630363
init E= -2.63961642490565
    CPU time for initialize scf      0.04 sec, wall time      0.04 sec
  mo_energy =
[-0.80177321]
E1 = -3.6756864303686854  E_coul = 1.0360700054630363
cycle= 1 E= -2.63961642490565  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -3.6756864303686854  E_coul = 1.0360700054630363
  mo_energy =
[-0.80177321]
E1 = -3.6756864303686854  E_coul = 1.0360700054630363
Extra cycle  E= -2.63961642490565  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.08 sec, wall time      0.08 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
# res = minimize(
#     He_energy,
#     x0,
#     jac=grad_He_energy,
#     bounds=((1e-4, None), (1e-4, None)),
#     method='trust-constr', tol=1e-6,
# )

minimizer_kwargs = {"method": "L-BFGS-B"}
res=optimize.basinhopping(nethedge,guess,niter=100,minimizer_kwargs=minimizer_kwargs)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:06:14 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06085464381        1
                                0.280598289636       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.060854643812658, 1.0], [0.28059828963581335, 1.0]]]}
ecp = {}
CPU time:       223.67
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6455358113594207  E_coul = 1.019142536966401
init E= -2.62639327439302
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.8102718]
E1 = -3.6756864303686854  E_coul = 1.0360700054630363
cycle= 1 E= -2.63961642490565  delta_E= -0.0132  |g|=    0  |ddm|= 0.0164
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80177321]
E1 = -3.6756864303686854  E_coul = 1.0360700054630363
cycle= 2 E= -2.63961642490565  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6756864303686854  E_coul = 1.0360700054630363
  mo_energy =
[-0.80177321]
E1 = -3.6756864303686854  E_coul = 1.0360700054630363
Extra cycle  E= -2.63961642490565  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
# res = minimize(
#     He_energy,
#     x0,
#     jac=grad_He_energy,
#     bounds=((1e-4, None), (1e-4, None)),
#     method='trust-constr', tol=1e-6,
# )

minimizer_kwargs = {"method": "L-BFGS-B"}
res=optimize.basinhopping(nethedge,guess,niter=100,minimizer_kwargs=minimizer_kwargs)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:06:15 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06085471332        1
                                0.28059869024        1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.060854713322945, 1.0], [0.28059869024000555, 1.0]]]}
ecp = {}
CPU time:       224.68
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6455363508078653  E_coul = 1.0191429225137514
init E= -2.62639342829411
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.81027166]
E1 = -3.6756868844242794  E_coul = 1.0360703467594092
cycle= 1 E= -2.63961653766487  delta_E= -0.0132  |g|=    0  |ddm|= 0.0164
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.8017731]
E1 = -3.6756868844242794  E_coul = 1.0360703467594092
cycle= 2 E= -2.63961653766487  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6756868844242794  E_coul = 1.0360703467594092
  mo_energy =
[-0.8017731]
E1 = -3.6756868844242794  E_coul = 1.0360703467594092
Extra cycle  E= -2.63961653766487  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.05 sec, wall time      0.05 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6756868844242794  E_coul = 1.0360703467594092
init E= -2.63961653766487
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.8017731]
E1 = -3.6756868844242794  E_coul = 1.0360703467594092
cycle= 1 E= -2.63961653766487  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.6756868844242794  E_coul = 1.0360703467594092
  mo_energy =
[-0.8017731]
E1 = -3.6756868844242794  E_coul = 1.0360703467594092
Extra cycle  E= -2.63961653766487  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.08 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
# res = minimize(
#     He_energy,
#     x0,
#     jac=grad_He_energy,
#     bounds=((1e-4, None), (1e-4, None)),
#     method='trust-constr', tol=1e-6,
# )

minimizer_kwargs = {"method": "L-BFGS-B"}
res=optimize.basinhopping(nethedge,guess,niter=100,minimizer_kwargs=minimizer_kwargs)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:06:18 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06085471332        1
                                0.28059869024        1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.060854713322945, 1.0], [0.28059869024000555, 1.0]]]}
ecp = {}
CPU time:       227.18
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6455363508078653  E_coul = 1.0191429225137514
init E= -2.62639342829411
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81027166]
E1 = -3.6756868844242794  E_coul = 1.0360703467594092
cycle= 1 E= -2.63961653766487  delta_E= -0.0132  |g|=    0  |ddm|= 0.0164
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.8017731]
E1 = -3.6756868844242794  E_coul = 1.0360703467594092
cycle= 2 E= -2.63961653766487  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6756868844242794  E_coul = 1.0360703467594092
  mo_energy =
[-0.8017731]
E1 = -3.6756868844242794  E_coul = 1.0360703467594092
Extra cycle  E= -2.63961653766487  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
# res = minimize(
#     He_energy,
#     x0,
#     jac=grad_He_energy,
#     bounds=((1e-4, None), (1e-4, None)),
#     method='trust-constr', tol=1e-6,
# )

minimizer_kwargs = {"method": "L-BFGS-B"}
res=optimize.basinhopping(nethedge,guess,niter=100,minimizer_kwargs=minimizer_kwargs)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:06:19 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06085478215        1
                                0.280599086908       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.060854782150295, 1.0], [0.2805990869082686, 1.0]]]}
ecp = {}
CPU time:       228.14
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.645536884952752  E_coul = 1.0191433042717655
init E= -2.62639358068099
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81027153]
E1 = -3.675687334017041  E_coul = 1.036070684702165
cycle= 1 E= -2.63961664931488  delta_E= -0.0132  |g|=    0  |ddm|= 0.0164
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80177298]
E1 = -3.675687334017041  E_coul = 1.036070684702165
cycle= 2 E= -2.63961664931488  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.675687334017041  E_coul = 1.036070684702165
  mo_energy =
[-0.80177298]
E1 = -3.675687334017041  E_coul = 1.036070684702165
Extra cycle  E= -2.63961664931488  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.675687334017041  E_coul = 1.036070684702165
init E= -2.63961664931488
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.80177298]
E1 = -3.675687334017041  E_coul = 1.036070684702165
cycle= 1 E= -2.63961664931488  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -3.675687334017041  E_coul = 1.036070684702165
  mo_energy =
[-0.80177298]
E1 = -3.675687334017041  E_coul = 1.036070684702165
Extra cycle  E= -2.63961664931488  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
# res = minimize(
#     He_energy,
#     x0,
#     jac=grad_He_energy,
#     bounds=((1e-4, None), (1e-4, None)),
#     method='trust-constr', tol=1e-6,
# )

minimizer_kwargs = {"method": "L-BFGS-B"}
res=optimize.basinhopping(nethedge,guess,niter=100,minimizer_kwargs=minimizer_kwargs)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:06:21 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06085478215        1
                                0.280599086908       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.060854782150295, 1.0], [0.2805990869082686, 1.0]]]}
ecp = {}
CPU time:       230.64
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.645536884952752  E_coul = 1.0191433042717655
init E= -2.62639358068099
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81027153]
E1 = -3.675687334017041  E_coul = 1.036070684702165
cycle= 1 E= -2.63961664931488  delta_E= -0.0132  |g|=    0  |ddm|= 0.0164
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80177298]
E1 = -3.675687334017041  E_coul = 1.036070684702165
cycle= 2 E= -2.63961664931488  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.675687334017041  E_coul = 1.036070684702165
  mo_energy =
[-0.80177298]
E1 = -3.675687334017041  E_coul = 1.036070684702165
Extra cycle  E= -2.63961664931488  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
# res = minimize(
#     He_energy,
#     x0,
#     jac=grad_He_energy,
#     bounds=((1e-4, None), (1e-4, None)),
#     method='trust-constr', tol=1e-6,
# )

minimizer_kwargs = {"method": "L-BFGS-B"}
res=optimize.basinhopping(nethedge,guess,niter=100,minimizer_kwargs=minimizer_kwargs)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:06:22 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.9402172101         1
                                0.237915495525       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.9402172101030302, 1.0], [0.2379154955253493, 1.0]]]}
ecp = {}
CPU time:       231.60
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.565058771521252  E_coul = 0.9568725478233215
init E= -2.60818622369793
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83637751]
E1 = -3.6113489660460645  E_coul = 0.9818827279230702
cycle= 1 E= -2.62946623812299  delta_E= -0.0213  |g|=    0  |ddm|= 0.0256
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82379176]
E1 = -3.6113489660460645  E_coul = 0.9818827279230702
cycle= 2 E= -2.62946623812299  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6113489660460645  E_coul = 0.9818827279230702
  mo_energy =
[-0.82379176]
E1 = -3.6113489660460645  E_coul = 0.9818827279230702
Extra cycle  E= -2.62946623812299  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6113489660460645  E_coul = 0.9818827279230702
init E= -2.62946623812299
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82379176]
E1 = -3.6113489660460645  E_coul = 0.9818827279230702
cycle= 1 E= -2.62946623812299  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.6113489660460645  E_coul = 0.9818827279230702
  mo_energy =
[-0.82379176]
E1 = -3.6113489660460645  E_coul = 0.9818827279230702
Extra cycle  E= -2.62946623812299  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
# res = minimize(
#     He_energy,
#     x0,
#     jac=grad_He_energy,
#     bounds=((1e-4, None), (1e-4, None)),
#     method='trust-constr', tol=1e-6,
# )

minimizer_kwargs = {"method": "L-BFGS-B"}
res=optimize.basinhopping(nethedge,guess,niter=100,minimizer_kwargs=minimizer_kwargs)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:06:25 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.9402172101         1
                                0.237915495525       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.9402172101030302, 1.0], [0.2379154955253493, 1.0]]]}
ecp = {}
CPU time:       234.16
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.565058771521252  E_coul = 0.9568725478233215
init E= -2.60818622369793
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83637751]
E1 = -3.6113489660460645  E_coul = 0.9818827279230702
cycle= 1 E= -2.62946623812299  delta_E= -0.0213  |g|=    0  |ddm|= 0.0256
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82379176]
E1 = -3.6113489660460645  E_coul = 0.9818827279230702
cycle= 2 E= -2.62946623812299  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6113489660460645  E_coul = 0.9818827279230702
  mo_energy =
[-0.82379176]
E1 = -3.6113489660460645  E_coul = 0.9818827279230702
Extra cycle  E= -2.62946623812299  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
# res = minimize(
#     He_energy,
#     x0,
#     jac=grad_He_energy,
#     bounds=((1e-4, None), (1e-4, None)),
#     method='trust-constr', tol=1e-6,
# )

minimizer_kwargs = {"method": "L-BFGS-B"}
res=optimize.basinhopping(nethedge,guess,niter=100,minimizer_kwargs=minimizer_kwargs)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:06:26 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.9402172101         1
                                0.237915495525       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.9402172101030302, 1.0], [0.23791549552534927, 1.0]]]}
ecp = {}
CPU time:       235.18
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.565058771521252  E_coul = 0.9568725478233215
init E= -2.60818622369793
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83637751]
E1 = -3.6113489660460645  E_coul = 0.9818827279230702
cycle= 1 E= -2.62946623812299  delta_E= -0.0213  |g|=    0  |ddm|= 0.0256
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82379176]
E1 = -3.6113489660460645  E_coul = 0.9818827279230702
cycle= 2 E= -2.62946623812299  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6113489660460645  E_coul = 0.9818827279230702
  mo_energy =
[-0.82379176]
E1 = -3.6113489660460645  E_coul = 0.9818827279230702
Extra cycle  E= -2.62946623812299  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6113489660460645  E_coul = 0.9818827279230702
init E= -2.62946623812299
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.82379176]
E1 = -3.6113489660460645  E_coul = 0.9818827279230702
cycle= 1 E= -2.62946623812299  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -3.6113489660460645  E_coul = 0.9818827279230702
  mo_energy =
[-0.82379176]
E1 = -3.6113489660460645  E_coul = 0.9818827279230702
Extra cycle  E= -2.62946623812299  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.08 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
# res = minimize(
#     He_energy,
#     x0,
#     jac=grad_He_energy,
#     bounds=((1e-4, None), (1e-4, None)),
#     method='trust-constr', tol=1e-6,
# )

minimizer_kwargs = {"method": "L-BFGS-B"}
res=optimize.basinhopping(nethedge,guess,niter=100,minimizer_kwargs=minimizer_kwargs)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:06:29 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  1.9402172101         1
                                0.237915495525       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [1.9402172101030302, 1.0], [0.23791549552534927, 1.0]]]}
ecp = {}
CPU time:       237.77
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.565058771521252  E_coul = 0.9568725478233215
init E= -2.60818622369793
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.83637751]
E1 = -3.6113489660460645  E_coul = 0.9818827279230702
cycle= 1 E= -2.62946623812299  delta_E= -0.0213  |g|=    0  |ddm|= 0.0256
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.82379176]
E1 = -3.6113489660460645  E_coul = 0.9818827279230702
cycle= 2 E= -2.62946623812299  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6113489660460645  E_coul = 0.9818827279230702
  mo_energy =
[-0.82379176]
E1 = -3.6113489660460645  E_coul = 0.9818827279230702
Extra cycle  E= -2.62946623812299  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
# res = minimize(
#     He_energy,
#     x0,
#     jac=grad_He_energy,
#     bounds=((1e-4, None), (1e-4, None)),
#     method='trust-constr', tol=1e-6,
# )

minimizer_kwargs = {"method": "SLSQP"}
res=optimize.basinhopping(nethedge,guess,niter=100,minimizer_kwargs=minimizer_kwargs)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:06:30 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.01093526007        1
                                0.258130421979       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.010935260067774, 1.0], [0.2581304219790251, 1.0]]]}
ecp = {}
CPU time:       238.79
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6089439811067554  E_coul = 0.990027180426917
init E= -2.61891680067984
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.82261159]
E1 = -3.6451323957984556  E_coul = 1.0099815732927608
cycle= 1 E= -2.63515082250569  delta_E= -0.0162  |g|=    0  |ddm|= 0.0199
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.81258462]
E1 = -3.6451323957984556  E_coul = 1.0099815732927608
cycle= 2 E= -2.63515082250569  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6451323957984556  E_coul = 1.0099815732927608
  mo_energy =
[-0.81258462]
E1 = -3.6451323957984556  E_coul = 1.0099815732927608
Extra cycle  E= -2.63515082250569  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6451323957984556  E_coul = 1.0099815732927608
init E= -2.63515082250569
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.81258462]
E1 = -3.6451323957984556  E_coul = 1.0099815732927608
cycle= 1 E= -2.63515082250569  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -3.6451323957984556  E_coul = 1.0099815732927608
  mo_energy =
[-0.81258462]
E1 = -3.6451323957984556  E_coul = 1.0099815732927608
Extra cycle  E= -2.63515082250569  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
# res = minimize(
#     He_energy,
#     x0,
#     jac=grad_He_energy,
#     bounds=((1e-4, None), (1e-4, None)),
#     method='trust-constr', tol=1e-6,
# )

minimizer_kwargs = {"method": "SLSQP"}
res=optimize.basinhopping(nethedge,guess,niter=100,minimizer_kwargs=minimizer_kwargs)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:06:32 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.01093526007        1
                                0.258130421979       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.010935260067774, 1.0], [0.2581304219790251, 1.0]]]}
ecp = {}
CPU time:       241.31
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6089439811067554  E_coul = 0.990027180426917
init E= -2.61891680067984
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.82261159]
E1 = -3.6451323957984556  E_coul = 1.0099815732927608
cycle= 1 E= -2.63515082250569  delta_E= -0.0162  |g|=    0  |ddm|= 0.0199
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.81258462]
E1 = -3.6451323957984556  E_coul = 1.0099815732927608
cycle= 2 E= -2.63515082250569  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6451323957984556  E_coul = 1.0099815732927608
  mo_energy =
[-0.81258462]
E1 = -3.6451323957984556  E_coul = 1.0099815732927608
Extra cycle  E= -2.63515082250569  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
# res = minimize(
#     He_energy,
#     x0,
#     jac=grad_He_energy,
#     bounds=((1e-4, None), (1e-4, None)),
#     method='trust-constr', tol=1e-6,
# )

minimizer_kwargs = {"method": "SLSQP"}
res=optimize.basinhopping(nethedge,guess,niter=100,minimizer_kwargs=minimizer_kwargs)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:06:33 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.05873698024        1
                                0.268545600984       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.0587369802428968, 1.0], [0.26854560098392727, 1.0]]]}
ecp = {}
CPU time:       242.34
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.627646739462062  E_coul = 1.006904586238364
init E= -2.6207421532237
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81438156]
E1 = -3.661196984766258  E_coul = 1.025615400175582
cycle= 1 E= -2.63558158459068  delta_E= -0.0148  |g|=    0  |ddm|= 0.0183
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80498309]
E1 = -3.661196984766258  E_coul = 1.025615400175582
cycle= 2 E= -2.63558158459068  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.661196984766258  E_coul = 1.025615400175582
  mo_energy =
[-0.80498309]
E1 = -3.661196984766258  E_coul = 1.025615400175582
Extra cycle  E= -2.63558158459068  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.661196984766258  E_coul = 1.025615400175582
init E= -2.63558158459068
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.80498309]
E1 = -3.661196984766258  E_coul = 1.025615400175582
cycle= 1 E= -2.63558158459068  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.661196984766258  E_coul = 1.025615400175582
  mo_energy =
[-0.80498309]
E1 = -3.661196984766258  E_coul = 1.025615400175582
Extra cycle  E= -2.63558158459068  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.06 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
# res = minimize(
#     He_energy,
#     x0,
#     jac=grad_He_energy,
#     bounds=((1e-4, None), (1e-4, None)),
#     method='trust-constr', tol=1e-6,
# )

minimizer_kwargs = {"method": "SLSQP"}
res=optimize.basinhopping(nethedge,guess,niter=100,minimizer_kwargs=minimizer_kwargs)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:06:36 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.05873698024        1
                                0.268545600984       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.0587369802428968, 1.0], [0.26854560098392727, 1.0]]]}
ecp = {}
CPU time:       244.81
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.627646739462062  E_coul = 1.006904586238364
init E= -2.6207421532237
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81438156]
E1 = -3.661196984766258  E_coul = 1.025615400175582
cycle= 1 E= -2.63558158459068  delta_E= -0.0148  |g|=    0  |ddm|= 0.0183
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80498309]
E1 = -3.661196984766258  E_coul = 1.025615400175582
cycle= 2 E= -2.63558158459068  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.661196984766258  E_coul = 1.025615400175582
  mo_energy =
[-0.80498309]
E1 = -3.661196984766258  E_coul = 1.025615400175582
Extra cycle  E= -2.63558158459068  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
# res = minimize(
#     He_energy,
#     x0,
#     jac=grad_He_energy,
#     bounds=((1e-4, None), (1e-4, None)),
#     method='trust-constr', tol=1e-6,
# )

minimizer_kwargs = {"method": "SLSQP"}
res=optimize.basinhopping(nethedge,guess,niter=100,minimizer_kwargs=minimizer_kwargs)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:06:37 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06013171001        1
                                0.276483716231       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.0601317100096628, 1.0], [0.2764837162312728, 1.0]]]}
ecp = {}
CPU time:       245.84
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6398059491187107  E_coul = 1.0151089699660034
init E= -2.62469697915271
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81167534]
E1 = -3.6709278382451145  E_coul = 1.0325424113320298
cycle= 1 E= -2.63838542691308  delta_E= -0.0137  |g|=    0  |ddm|= 0.017
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80292151]
E1 = -3.6709278382451145  E_coul = 1.0325424113320298
cycle= 2 E= -2.63838542691308  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6709278382451145  E_coul = 1.0325424113320298
  mo_energy =
[-0.80292151]
E1 = -3.6709278382451145  E_coul = 1.0325424113320298
Extra cycle  E= -2.63838542691308  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6709278382451145  E_coul = 1.0325424113320298
init E= -2.63838542691308
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.80292151]
E1 = -3.6709278382451145  E_coul = 1.0325424113320298
cycle= 1 E= -2.63838542691308  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -3.6709278382451145  E_coul = 1.0325424113320298
  mo_energy =
[-0.80292151]
E1 = -3.6709278382451145  E_coul = 1.0325424113320298
Extra cycle  E= -2.63838542691308  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.08 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
# res = minimize(
#     He_energy,
#     x0,
#     jac=grad_He_energy,
#     bounds=((1e-4, None), (1e-4, None)),
#     method='trust-constr', tol=1e-6,
# )

minimizer_kwargs = {"method": "SLSQP"}
res=optimize.basinhopping(nethedge,guess,niter=100,minimizer_kwargs=minimizer_kwargs)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:06:39 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06013171001        1
                                0.276483716231       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.0601317100096628, 1.0], [0.2764837162312728, 1.0]]]}
ecp = {}
CPU time:       248.37
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6398059491187107  E_coul = 1.0151089699660034
init E= -2.62469697915271
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81167534]
E1 = -3.6709278382451145  E_coul = 1.0325424113320298
cycle= 1 E= -2.63838542691308  delta_E= -0.0137  |g|=    0  |ddm|= 0.017
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80292151]
E1 = -3.6709278382451145  E_coul = 1.0325424113320298
cycle= 2 E= -2.63838542691308  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6709278382451145  E_coul = 1.0325424113320298
  mo_energy =
[-0.80292151]
E1 = -3.6709278382451145  E_coul = 1.0325424113320298
Extra cycle  E= -2.63838542691308  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.05 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
# res = minimize(
#     He_energy,
#     x0,
#     jac=grad_He_energy,
#     bounds=((1e-4, None), (1e-4, None)),
#     method='trust-constr', tol=1e-6,
# )

minimizer_kwargs = {"method": "SLSQP"}
res=optimize.basinhopping(nethedge,guess,niter=100,minimizer_kwargs=minimizer_kwargs)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:06:41 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06053170449        1
                                0.278760287881       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.060531704485386, 1.0], [0.2787602878813877, 1.0]]]}
ecp = {}
CPU time:       249.43
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.643023208823957  E_coul = 1.0173587411426444
init E= -2.62566446768131
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81089883]
E1 = -3.673584206395228  E_coul = 1.0344994004976777
cycle= 1 E= -2.63908480589755  delta_E= -0.0134  |g|=    0  |ddm|= 0.0166
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.8022927]
E1 = -3.673584206395228  E_coul = 1.0344994004976777
cycle= 2 E= -2.63908480589755  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.673584206395228  E_coul = 1.0344994004976777
  mo_energy =
[-0.8022927]
E1 = -3.673584206395228  E_coul = 1.0344994004976777
Extra cycle  E= -2.63908480589755  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.673584206395228  E_coul = 1.0344994004976777
init E= -2.63908480589755
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.8022927]
E1 = -3.673584206395228  E_coul = 1.0344994004976777
cycle= 1 E= -2.63908480589755  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.673584206395228  E_coul = 1.0344994004976777
  mo_energy =
[-0.8022927]
E1 = -3.673584206395228  E_coul = 1.0344994004976777
Extra cycle  E= -2.63908480589755  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
# res = minimize(
#     He_energy,
#     x0,
#     jac=grad_He_energy,
#     bounds=((1e-4, None), (1e-4, None)),
#     method='trust-constr', tol=1e-6,
# )

minimizer_kwargs = {"method": "SLSQP"}
res=optimize.basinhopping(nethedge,guess,niter=100,minimizer_kwargs=minimizer_kwargs)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:06:43 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06053170449        1
                                0.278760287881       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.060531704485386, 1.0], [0.2787602878813877, 1.0]]]}
ecp = {}
CPU time:       252.06
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.643023208823957  E_coul = 1.0173587411426444
init E= -2.62566446768131
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81089883]
E1 = -3.673584206395228  E_coul = 1.0344994004976777
cycle= 1 E= -2.63908480589755  delta_E= -0.0134  |g|=    0  |ddm|= 0.0166
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.8022927]
E1 = -3.673584206395228  E_coul = 1.0344994004976777
cycle= 2 E= -2.63908480589755  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.673584206395228  E_coul = 1.0344994004976777
  mo_energy =
[-0.8022927]
E1 = -3.673584206395228  E_coul = 1.0344994004976777
Extra cycle  E= -2.63908480589755  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
# res = minimize(
#     He_energy,
#     x0,
#     jac=grad_He_energy,
#     bounds=((1e-4, None), (1e-4, None)),
#     method='trust-constr', tol=1e-6,
# )

minimizer_kwargs = {"method": "SLSQP"}
res=optimize.basinhopping(nethedge,guess,niter=100,minimizer_kwargs=minimizer_kwargs)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:06:44 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06069849326        1
                                0.279709567501       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.0606984932634433, 1.0], [0.27970956750080345, 1.0]]]}
ecp = {}
CPU time:       253.12
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6443302851526744  E_coul = 1.0182836292364947
init E= -2.62604665591618
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.810575]
E1 = -3.6746746434338693  E_coul = 1.035311615792061
cycle= 1 E= -2.63936302764181  delta_E= -0.0133  |g|=    0  |ddm|= 0.0165
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80202571]
E1 = -3.6746746434338693  E_coul = 1.035311615792061
cycle= 2 E= -2.63936302764181  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6746746434338693  E_coul = 1.035311615792061
  mo_energy =
[-0.80202571]
E1 = -3.6746746434338693  E_coul = 1.035311615792061
Extra cycle  E= -2.63936302764181  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6746746434338693  E_coul = 1.035311615792061
init E= -2.63936302764181
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.80202571]
E1 = -3.6746746434338693  E_coul = 1.035311615792061
cycle= 1 E= -2.63936302764181  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.01 sec
E1 = -3.6746746434338693  E_coul = 1.035311615792061
  mo_energy =
[-0.80202571]
E1 = -3.6746746434338693  E_coul = 1.035311615792061
Extra cycle  E= -2.63936302764181  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
# res = minimize(
#     He_energy,
#     x0,
#     jac=grad_He_energy,
#     bounds=((1e-4, None), (1e-4, None)),
#     method='trust-constr', tol=1e-6,
# )

minimizer_kwargs = {"method": "SLSQP"}
res=optimize.basinhopping(nethedge,guess,niter=100,minimizer_kwargs=minimizer_kwargs)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:06:47 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06069849326        1
                                0.279709567501       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.0606984932634433, 1.0], [0.27970956750080345, 1.0]]]}
ecp = {}
CPU time:       255.62
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6443302851526744  E_coul = 1.0182836292364947
init E= -2.62604665591618
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.810575]
E1 = -3.6746746434338693  E_coul = 1.035311615792061
cycle= 1 E= -2.63936302764181  delta_E= -0.0133  |g|=    0  |ddm|= 0.0165
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80202571]
E1 = -3.6746746434338693  E_coul = 1.035311615792061
cycle= 2 E= -2.63936302764181  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6746746434338693  E_coul = 1.035311615792061
  mo_energy =
[-0.80202571]
E1 = -3.6746746434338693  E_coul = 1.035311615792061
Extra cycle  E= -2.63936302764181  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
# res = minimize(
#     He_energy,
#     x0,
#     jac=grad_He_energy,
#     bounds=((1e-4, None), (1e-4, None)),
#     method='trust-constr', tol=1e-6,
# )

minimizer_kwargs = {"method": "SLSQP"}
res=optimize.basinhopping(nethedge,guess,niter=100,minimizer_kwargs=minimizer_kwargs)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:06:48 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06077795869        1
                                0.280161845581       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.0607779586884005, 1.0], [0.2801618455811303, 1.0]]]}
ecp = {}
CPU time:       256.68
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6449459743782775  E_coul = 1.0187215748955347
init E= -2.62622439948274
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.8104207]
E1 = -3.675190644614152  E_coul = 1.0356978089003641
cycle= 1 E= -2.63949283571379  delta_E= -0.0133  |g|=    0  |ddm|= 0.0165
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80189751]
E1 = -3.675190644614152  E_coul = 1.0356978089003641
cycle= 2 E= -2.63949283571379  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.675190644614152  E_coul = 1.0356978089003641
  mo_energy =
[-0.80189751]
E1 = -3.675190644614152  E_coul = 1.0356978089003641
Extra cycle  E= -2.63949283571379  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.675190644614152  E_coul = 1.0356978089003641
init E= -2.63949283571379
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.80189751]
E1 = -3.675190644614152  E_coul = 1.0356978089003641
cycle= 1 E= -2.63949283571379  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -3.675190644614152  E_coul = 1.0356978089003641
  mo_energy =
[-0.80189751]
E1 = -3.675190644614152  E_coul = 1.0356978089003641
Extra cycle  E= -2.63949283571379  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
# res = minimize(
#     He_energy,
#     x0,
#     jac=grad_He_energy,
#     bounds=((1e-4, None), (1e-4, None)),
#     method='trust-constr', tol=1e-6,
# )

minimizer_kwargs = {"method": "SLSQP"}
res = basinhopping(
    He_energy,
    x0,
    niter=100,minimizer_kwargs=minimizer_kwargs)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:06:50 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06077795869        1
                                0.280161845581       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.0607779586884005, 1.0], [0.2801618455811303, 1.0]]]}
ecp = {}
CPU time:       259.23
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6449459743782775  E_coul = 1.0187215748955347
init E= -2.62622439948274
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.8104207]
E1 = -3.675190644614152  E_coul = 1.0356978089003641
cycle= 1 E= -2.63949283571379  delta_E= -0.0133  |g|=    0  |ddm|= 0.0165
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80189751]
E1 = -3.675190644614152  E_coul = 1.0356978089003641
cycle= 2 E= -2.63949283571379  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.675190644614152  E_coul = 1.0356978089003641
  mo_energy =
[-0.80189751]
E1 = -3.675190644614152  E_coul = 1.0356978089003641
Extra cycle  E= -2.63949283571379  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
# res = minimize(
#     He_energy,
#     x0,
#     jac=grad_He_energy,
#     bounds=((1e-4, None), (1e-4, None)),
#     method='trust-constr', tol=1e-6,
# )

minimizer_kwargs = {"method": "SLSQP"}
res = basinhopping(
    He_energy,
    x0,
    niter=100,
    minimizer_kwargs=minimizer_kwargs)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:06:52 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06081674476        1
                                0.280382596798       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.0608167447582835, 1.0], [0.28038259679764543, 1.0]]]}
ecp = {}
CPU time:       260.29
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6452448374915107  E_coul = 1.018934697701537
init E= -2.62631013978997
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81034539]
E1 = -3.6754416740806763  E_coul = 1.0358861223275981
cycle= 1 E= -2.63955555175308  delta_E= -0.0132  |g|=    0  |ddm|= 0.0164
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80183471]
E1 = -3.6754416740806763  E_coul = 1.0358861223275981
cycle= 2 E= -2.63955555175308  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6754416740806763  E_coul = 1.0358861223275981
  mo_energy =
[-0.80183471]
E1 = -3.6754416740806763  E_coul = 1.0358861223275981
Extra cycle  E= -2.63955555175308  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6754416740806763  E_coul = 1.0358861223275981
init E= -2.63955555175308
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.80183471]
E1 = -3.6754416740806763  E_coul = 1.0358861223275981
cycle= 1 E= -2.63955555175308  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.6754416740806763  E_coul = 1.0358861223275981
  mo_energy =
[-0.80183471]
E1 = -3.6754416740806763  E_coul = 1.0358861223275981
Extra cycle  E= -2.63955555175308  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.08 sec, wall time      0.08 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
# res = minimize(
#     He_energy,
#     x0,
#     jac=grad_He_energy,
#     bounds=((1e-4, None), (1e-4, None)),
#     method='trust-constr', tol=1e-6,
# )

minimizer_kwargs = {"method": "SLSQP"}
res = basinhopping(
    He_energy,
    x0,
    niter=100,
    minimizer_kwargs=minimizer_kwargs)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:06:54 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06081674476        1
                                0.280382596798       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.0608167447582835, 1.0], [0.28038259679764543, 1.0]]]}
ecp = {}
CPU time:       262.87
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6452448374915107  E_coul = 1.018934697701537
init E= -2.62631013978997
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81034539]
E1 = -3.6754416740806763  E_coul = 1.0358861223275981
cycle= 1 E= -2.63955555175308  delta_E= -0.0132  |g|=    0  |ddm|= 0.0164
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80183471]
E1 = -3.6754416740806763  E_coul = 1.0358861223275981
cycle= 2 E= -2.63955555175308  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.6754416740806763  E_coul = 1.0358861223275981
  mo_energy =
[-0.80183471]
E1 = -3.6754416740806763  E_coul = 1.0358861223275981
Extra cycle  E= -2.63955555175308  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.06 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
# res = minimize(
#     He_energy,
#     x0,
#     jac=grad_He_energy,
#     bounds=((1e-4, None), (1e-4, None)),
#     method='trust-constr', tol=1e-6,
# )

minimizer_kwargs = {"method": "SLSQP"}
res = basinhopping(
    He_energy,
    x0,
    niter=100,
    minimizer_kwargs=minimizer_kwargs)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:06:55 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06083588308        1
                                0.280491522688       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.0608358830773184, 1.0], [0.28049152268835037, 1.0]]]}
ecp = {}
CPU time:       263.97
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6453919091243674  E_coul = 1.0190397067942802
init E= -2.62635220233009
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81030823]
E1 = -3.675565341423211  E_coul = 1.0359789982999594
cycle= 1 E= -2.63958634312325  delta_E= -0.0132  |g|=    0  |ddm|= 0.0164
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80180367]
E1 = -3.675565341423211  E_coul = 1.0359789982999594
cycle= 2 E= -2.63958634312325  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.675565341423211  E_coul = 1.0359789982999594
  mo_energy =
[-0.80180367]
E1 = -3.675565341423211  E_coul = 1.0359789982999594
Extra cycle  E= -2.63958634312325  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.675565341423211  E_coul = 1.0359789982999594
init E= -2.63958634312325
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.80180367]
E1 = -3.675565341423211  E_coul = 1.0359789982999594
cycle= 1 E= -2.63958634312325  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.675565341423211  E_coul = 1.0359789982999594
  mo_energy =
[-0.80180367]
E1 = -3.675565341423211  E_coul = 1.0359789982999594
Extra cycle  E= -2.63958634312325  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
# res = minimize(
#     He_energy,
#     x0,
#     jac=grad_He_energy,
#     bounds=((1e-4, None), (1e-4, None)),
#     method='trust-constr', tol=1e-6,
# )

minimizer_kwargs = {"method": "SLSQP"}
res = basinhopping(
    He_energy,
    x0,
    niter=100,
    minimizer_kwargs=minimizer_kwargs)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:06:58 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06083588308        1
                                0.280491522688       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.0608358830773184, 1.0], [0.28049152268835037, 1.0]]]}
ecp = {}
CPU time:       266.75
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6453919091243674  E_coul = 1.0190397067942802
init E= -2.62635220233009
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81030823]
E1 = -3.675565341423211  E_coul = 1.0359789982999594
cycle= 1 E= -2.63958634312325  delta_E= -0.0132  |g|=    0  |ddm|= 0.0164
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80180367]
E1 = -3.675565341423211  E_coul = 1.0359789982999594
cycle= 2 E= -2.63958634312325  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.675565341423211  E_coul = 1.0359789982999594
  mo_energy =
[-0.80180367]
E1 = -3.675565341423211  E_coul = 1.0359789982999594
Extra cycle  E= -2.63958634312325  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
# res = minimize(
#     He_energy,
#     x0,
#     jac=grad_He_energy,
#     bounds=((1e-4, None), (1e-4, None)),
#     method='trust-constr', tol=1e-6,
# )

minimizer_kwargs = {"method": "SLSQP"}
res = basinhopping(
    He_energy,
    x0,
    niter=100,
    minimizer_kwargs=minimizer_kwargs)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:06:59 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06084537601        1
                                0.280545551799       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.0608453760118848, 1.0], [0.2805455517988061, 1.0]]]}
ecp = {}
CPU time:       267.94
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.645464761889988  E_coul = 1.0190917557052248
init E= -2.62637300618476
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81028979]
E1 = -3.675626633844224  E_coul = 1.0360250555846753
cycle= 1 E= -2.63960157825955  delta_E= -0.0132  |g|=    0  |ddm|= 0.0164
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80178826]
E1 = -3.675626633844224  E_coul = 1.0360250555846753
cycle= 2 E= -2.63960157825955  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.675626633844224  E_coul = 1.0360250555846753
  mo_energy =
[-0.80178826]
E1 = -3.675626633844224  E_coul = 1.0360250555846753
Extra cycle  E= -2.63960157825955  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.675626633844224  E_coul = 1.0360250555846753
init E= -2.63960157825955
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.80178826]
E1 = -3.675626633844224  E_coul = 1.0360250555846753
cycle= 1 E= -2.63960157825955  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.675626633844224  E_coul = 1.0360250555846753
  mo_energy =
[-0.80178826]
E1 = -3.675626633844224  E_coul = 1.0360250555846753
Extra cycle  E= -2.63960157825955  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
# res = minimize(
#     He_energy,
#     x0,
#     jac=grad_He_energy,
#     bounds=((1e-4, None), (1e-4, None)),
#     method='trust-constr', tol=1e-6,
# )

minimizer_kwargs = {"method": "SLSQP"}
res = basinhopping(
    He_energy,
    x0,
    niter=100,
    minimizer_kwargs=minimizer_kwargs)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:07:02 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06084537601        1
                                0.280545551799       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.0608453760118848, 1.0], [0.2805455517988061, 1.0]]]}
ecp = {}
CPU time:       270.66
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.645464761889988  E_coul = 1.0190917557052248
init E= -2.62637300618476
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81028979]
E1 = -3.675626633844224  E_coul = 1.0360250555846753
cycle= 1 E= -2.63960157825955  delta_E= -0.0132  |g|=    0  |ddm|= 0.0164
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80178826]
E1 = -3.675626633844224  E_coul = 1.0360250555846753
cycle= 2 E= -2.63960157825955  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.675626633844224  E_coul = 1.0360250555846753
  mo_energy =
[-0.80178826]
E1 = -3.675626633844224  E_coul = 1.0360250555846753
Extra cycle  E= -2.63960157825955  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.05 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
# res = minimize(
#     He_energy,
#     x0,
#     jac=grad_He_energy,
#     bounds=((1e-4, None), (1e-4, None)),
#     method='trust-constr', tol=1e-6,
# )

minimizer_kwargs = {"method": "SLSQP"}
res = basinhopping(
    He_energy,
    x0,
    niter=100,
    minimizer_kwargs=minimizer_kwargs)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:07:03 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06085009673        1
                                0.280572419804       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.060850096730234, 1.0], [0.28057241980377773, 1.0]]]}
ecp = {}
CPU time:       271.85
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6455009666596903  E_coul = 1.0191176297527234
init E= -2.62638333690697
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81028063]
E1 = -3.675657101785505  E_coul = 1.0360479566369085
cycle= 1 E= -2.6396091451486  delta_E= -0.0132  |g|=    0  |ddm|= 0.0164
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80178059]
E1 = -3.675657101785505  E_coul = 1.0360479566369085
cycle= 2 E= -2.6396091451486  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.675657101785505  E_coul = 1.0360479566369085
  mo_energy =
[-0.80178059]
E1 = -3.675657101785505  E_coul = 1.0360479566369085
Extra cycle  E= -2.6396091451486  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.675657101785505  E_coul = 1.0360479566369085
init E= -2.6396091451486
    CPU time for initialize scf      0.04 sec, wall time      0.04 sec
  mo_energy =
[-0.80178059]
E1 = -3.675657101785505  E_coul = 1.0360479566369085
cycle= 1 E= -2.6396091451486  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -3.675657101785505  E_coul = 1.0360479566369085
  mo_energy =
[-0.80178059]
E1 = -3.675657101785505  E_coul = 1.0360479566369085
Extra cycle  E= -2.6396091451486  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.08 sec, wall time      0.09 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
# res = minimize(
#     He_energy,
#     x0,
#     jac=grad_He_energy,
#     bounds=((1e-4, None), (1e-4, None)),
#     method='trust-constr', tol=1e-6,
# )

minimizer_kwargs = {"method": "SLSQP"}
res = basinhopping(
    He_energy,
    x0,
    niter=100,
    minimizer_kwargs=minimizer_kwargs)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:07:06 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06085009673        1
                                0.280572419804       1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.060850096730234, 1.0], [0.28057241980377773, 1.0]]]}
ecp = {}
CPU time:       274.52
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6455009666596903  E_coul = 1.0191176297527234
init E= -2.62638333690697
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81028063]
E1 = -3.675657101785505  E_coul = 1.0360479566369085
cycle= 1 E= -2.6396091451486  delta_E= -0.0132  |g|=    0  |ddm|= 0.0164
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80178059]
E1 = -3.675657101785505  E_coul = 1.0360479566369085
cycle= 2 E= -2.6396091451486  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.675657101785505  E_coul = 1.0360479566369085
  mo_energy =
[-0.80178059]
E1 = -3.675657101785505  E_coul = 1.0360479566369085
Extra cycle  E= -2.6396091451486  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/h5py_mpi_test/pyscfad_test.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np

from scipy.optimize import minimize, Bounds, shgo, basinhopping

"""
Analytic nuclear gradient for RHF computed by auto-differentiation
"""


def He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    return e

def grad_He_energy(exponent):
    mol = gto.Mole()
    mol.atom    = 'He 0 0 0'  # in Angstrom

    mol.basis = {'He': pyscf.gto.basis.parse(f'''
    He   S
        {exponent[0]}              1.0
        {exponent[1]}              1.0
    ''')}
    mol.verbose = 5
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    return jac.exp

x0 = [0.2432879285E+01, 0.4330512863E+00]
# res = minimize(
#     He_energy,
#     x0,
#     jac=grad_He_energy,
#     bounds=((1e-4, None), (1e-4, None)),
#     method='trust-constr', tol=1e-6,
# )

minimizer_kwargs = {"method": "SLSQP"}
res = basinhopping(
    He_energy,
    x0,
    niter=100,
    minimizer_kwargs=minimizer_kwargs)

print(res.x)
print(He_energy(res.x))
print(res.values())

# print("E", He_energy(71.6168370))

# print(f'Nuclaer gradient:\n{jac.coords}')
# print(f'Gradient wrt basis exponents:\n{jac.exp}')
# print(f'Gradient wrt basis contraction coefficients:\n{jac.ctr_coeff}')#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MacBook-Pro-Home.local', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Jan 17 2023, 16:42:09) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar  4 00:07:07 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file /Users/deyanmihaylov/.pyscf_conf.py
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 He     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] He
[INPUT] 0    0    [2    /1   ]  2.06085244725        1
                                0.28058579783        1

nuclear repulsion = 0
number of shells = 1
number of NR pGTOs = 2
number of NR cGTOs = 1
basis = {'He': [[0, [2.060852447254275, 1.0], [0.28058579782952286, 1.0]]]}
ecp = {}
CPU time:       275.66
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.6455189876708443  E_coul = 1.0191305105849697
init E= -2.62638847708587
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  mo_energy =
[-0.81027606]
E1 = -3.675672269303057  E_coul = 1.0360593587915266
cycle= 1 E= -2.63961291051153  delta_E= -0.0132  |g|=    0  |ddm|= 0.0164
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
  mo_energy =
[-0.80177678]
E1 = -3.675672269303057  E_coul = 1.0360593587915266
cycle= 2 E= -2.63961291051153  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
E1 = -3.675672269303057  E_coul = 1.0360593587915266
  mo_energy =
[-0.80177678]
E1 = -3.675672269303057  E_coul = 1.0360593587915266
Extra cycle  E= -2.63961291051153  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.04 sec, wall time      0.04 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 1.0
E1 = -3.675672269303057  E_coul = 1.0360593587915266
init E= -2.63961291051153
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  mo_energy =
[-0.80177678]
E1 = -3.675672269303057  E_coul = 1.0360593587915266
cycle= 1 E= -2.63961291051153  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
E1 = -3.675672269303057  E_coul = 1.0360593587915266
  mo_energy =
[-0.80177678]
E1 = -3.675672269303057  E_coul = 1.0360593587915266
Extra cycle  E= -2.63961291051153  delta_E=    0  |g|=    0  |ddm|=    0
    CPU time for scf_cycle      0.07 sec, wall time      0.07 sec
