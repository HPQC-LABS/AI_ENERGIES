#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = decaying_nums(6)
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:25:40 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.31924326        1
[INPUT] 0    0    [1    /1   ]  69.5545731884        1
[INPUT] 0    0    [1    /1   ]  15.133196158         1
[INPUT] 0    0    [1    /1   ]  1.03354732866        1
[INPUT] 1    0    [1    /1   ]  1.27647421473        1
[INPUT] 1    0    [1    /1   ]  1.00000000004e-09      1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.319243258562, 1.0]], [0, [69.55457318842197, 1.0]], [0, [15.133196157965202, 1.0]], [0, [1.0335473286585297, 1.0]], [1, [1.276474214730499, 1.0]], [1, [1.0000000000362833e-09, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.31924326]
bas 1, expnt(s) = [69.55457319]
bas 2, expnt(s) = [15.13319616]
bas 3, expnt(s) = [1.03354733]
bas 4, expnt(s) = [1.27647421]
bas 5, expnt(s) = [1.e-09]
CPU time:         1.47
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61731924e+03 1.41516621e+03 6.95545732e+01 6.08498191e+01
 1.51331962e+01 1.93848757e+01 1.03354733e+00 2.58977957e+00
 1.27647421e+00 3.95821564e+00 1.00000000e-09 1.64053082e-11]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.252434215096706
cond(S) = 6.355314491368788
E1 = -158.64485244953354  E_coul = 45.33051746938475
init E= -113.314334980149
    CPU time for initialize scf      0.18 sec, wall time      0.19 sec
  HOMO = -0.648747808580822  LUMO = -0.000336415169608806
  mo_energy =
[-3.29654538e+01 -2.53341823e+00 -6.48747809e-01 -6.48747809e-01
 -6.48747809e-01 -3.36415170e-04 -3.36415170e-04 -3.36415170e-04
  5.41693630e+01  5.99244331e+03]
E1 = -171.65808337527386  E_coul = 51.64681975285759
cycle= 1 E= -120.011263622416  delta_E= -6.7  |g|= 0.383  |ddm|= 0.414
    CPU time for cycle= 1      0.40 sec, wall time      0.42 sec
diis-norm(errvec)=0.675558
diis-c [-0.45637925  1.        ]
  HOMO = -0.0719874813826991  LUMO = -0.000336415169608792
  mo_energy =
[-3.20937066e+01 -1.87260747e+00 -7.19874814e-02 -7.19874814e-02
 -7.19874814e-02 -3.36415170e-04 -3.36415170e-04 -3.36415170e-04
  5.50566361e+01  5.99303732e+03]
E1 = -171.65108684960086  E_coul = 51.639712291742136
cycle= 2 E= -120.011374557859  delta_E= -0.000111  |g|= 0.00194  |ddm|= 0.00535
    CPU time for cycle= 2      0.12 sec, wall time      0.13 sec
diis-norm(errvec)=0.00166145
diis-c [-1.77985731e-06 -1.46795264e-03  1.00146795e+00]
  HOMO = -0.0722012785971239  LUMO = -0.000336415169608792
  mo_energy =
[-3.20964486e+01 -1.87278397e+00 -7.22012786e-02 -7.22012786e-02
 -7.22012786e-02 -3.36415170e-04 -3.36415170e-04 -3.36415170e-04
  5.50548616e+01  5.99302871e+03]
E1 = -171.65097291691637  E_coul = 51.639598327428715
cycle= 3 E= -120.011374589488  delta_E= -3.16e-08  |g|= 3.38e-05  |ddm|= 9.49e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=2.81808e-05
diis-c [-7.95597293e-11  3.02680907e-05 -2.04772907e-02  1.02044702e+00]
  HOMO = -0.0722049192286204  LUMO = -0.000336415169608792
  mo_energy =
[-3.20964876e+01 -1.87278683e+00 -7.22049192e-02 -7.22049192e-02
 -7.22049192e-02 -3.36415170e-04 -3.36415170e-04 -3.36415170e-04
  5.50548385e+01  5.99302862e+03]
E1 = -171.65097120733805  E_coul = 51.63959661784034
cycle= 4 E= -120.011374589498  delta_E= -1e-11  |g|= 1.72e-07  |ddm|= 1.66e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -171.65097120733805  E_coul = 51.63959661784034
  HOMO = -0.0722049155205706  LUMO = -0.000336415169608792
  mo_energy =
[-3.20964874e+01 -1.87278682e+00 -7.22049155e-02 -7.22049155e-02
 -7.22049155e-02 -3.36415170e-04 -3.36415170e-04 -3.36415170e-04
  5.50548386e+01  5.99302862e+03]
E1 = -171.65097121374544  E_coul = 51.63959662424773
Extra cycle  E= -120.011374589498  delta_E=    0  |g|= 3.6e-09  |ddm|= 4.1e-09
    CPU time for scf_cycle      0.74 sec, wall time      0.78 sec
exp = [4.61731924e+03 6.95545732e+01 1.51331962e+01 1.03354733e+00
 1.27647421e+00 1.00000000e-09]
E = -120.0113745894977
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:25:41 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.31924326        1
[INPUT] 0    0    [1    /1   ]  69.5545731884        1
[INPUT] 0    0    [1    /1   ]  15.133196158         1
[INPUT] 0    0    [1    /1   ]  1.03354732866        1
[INPUT] 1    0    [1    /1   ]  1.27647421473        1
[INPUT] 1    0    [1    /1   ]  1.00000000004e-09      1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.319243258562, 1.0]], [0, [69.55457318842197, 1.0]], [0, [15.133196157965202, 1.0]], [0, [1.0335473286585297, 1.0]], [1, [1.276474214730499, 1.0]], [1, [1.0000000000362833e-09, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.31924326]
bas 1, expnt(s) = [69.55457319]
bas 2, expnt(s) = [15.13319616]
bas 3, expnt(s) = [1.03354733]
bas 4, expnt(s) = [1.27647421]
bas 5, expnt(s) = [1.e-09]
CPU time:         2.40
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61731924e+03 1.41516621e+03 6.95545732e+01 6.08498191e+01
 1.51331962e+01 1.93848757e+01 1.03354733e+00 2.58977957e+00
 1.27647421e+00 3.95821564e+00 1.00000000e-09 1.64053082e-11]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.252434215096706
cond(S) = 6.355314491368788
E1 = -158.64485244953354  E_coul = 45.33051746938475
init E= -113.314334980149
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.648747808580822  LUMO = -0.000336415169608806
  mo_energy =
[-3.29654538e+01 -2.53341823e+00 -6.48747809e-01 -6.48747809e-01
 -6.48747809e-01 -3.36415170e-04 -3.36415170e-04 -3.36415170e-04
  5.41693630e+01  5.99244331e+03]
E1 = -171.65808337527386  E_coul = 51.64681975285759
cycle= 1 E= -120.011263622416  delta_E= -6.7  |g|= 0.383  |ddm|= 0.414
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.675558
diis-c [-0.45637925  1.        ]
  HOMO = -0.0719874813826991  LUMO = -0.000336415169608792
  mo_energy =
[-3.20937066e+01 -1.87260747e+00 -7.19874814e-02 -7.19874814e-02
 -7.19874814e-02 -3.36415170e-04 -3.36415170e-04 -3.36415170e-04
  5.50566361e+01  5.99303732e+03]
E1 = -171.65108684960086  E_coul = 51.639712291742136
cycle= 2 E= -120.011374557859  delta_E= -0.000111  |g|= 0.00194  |ddm|= 0.00535
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00166145
diis-c [-1.77985731e-06 -1.46795264e-03  1.00146795e+00]
  HOMO = -0.0722012785971239  LUMO = -0.000336415169608792
  mo_energy =
[-3.20964486e+01 -1.87278397e+00 -7.22012786e-02 -7.22012786e-02
 -7.22012786e-02 -3.36415170e-04 -3.36415170e-04 -3.36415170e-04
  5.50548616e+01  5.99302871e+03]
E1 = -171.65097291691637  E_coul = 51.639598327428715
cycle= 3 E= -120.011374589488  delta_E= -3.16e-08  |g|= 3.38e-05  |ddm|= 9.49e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=2.81808e-05
diis-c [-7.95597293e-11  3.02680907e-05 -2.04772907e-02  1.02044702e+00]
  HOMO = -0.0722049192286204  LUMO = -0.000336415169608792
  mo_energy =
[-3.20964876e+01 -1.87278683e+00 -7.22049192e-02 -7.22049192e-02
 -7.22049192e-02 -3.36415170e-04 -3.36415170e-04 -3.36415170e-04
  5.50548385e+01  5.99302862e+03]
E1 = -171.65097120733805  E_coul = 51.63959661784034
cycle= 4 E= -120.011374589498  delta_E= -1e-11  |g|= 1.72e-07  |ddm|= 1.66e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -171.65097120733805  E_coul = 51.63959661784034
  HOMO = -0.0722049155205706  LUMO = -0.000336415169608792
  mo_energy =
[-3.20964874e+01 -1.87278682e+00 -7.22049155e-02 -7.22049155e-02
 -7.22049155e-02 -3.36415170e-04 -3.36415170e-04 -3.36415170e-04
  5.50548386e+01  5.99302862e+03]
E1 = -171.65097121374544  E_coul = 51.63959662424773
Extra cycle  E= -120.011374589498  delta_E=    0  |g|= 3.6e-09  |ddm|= 4.1e-09
    CPU time for scf_cycle      0.08 sec, wall time      0.08 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 6.355314491368788
E1 = -171.65097121374544  E_coul = 51.63959662424773
init E= -120.011374589498
    CPU time for initialize scf      0.39 sec, wall time      0.40 sec
  HOMO = -0.0722049155058802  LUMO = -0.000336415169608792
  mo_energy =
[-3.20964874e+01 -1.87278682e+00 -7.22049155e-02 -7.22049155e-02
 -7.22049155e-02 -3.36415170e-04 -3.36415170e-04 -3.36415170e-04
  5.50548386e+01  5.99302862e+03]
E1 = -171.65097121384582  E_coul = 51.63959662434813
cycle= 1 E= -120.011374589498  delta_E= 1.42e-14  |g|= 7.96e-11  |ddm|= 8.18e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -171.65097121384582  E_coul = 51.63959662434813
  HOMO = -0.0722049155067257  LUMO = -0.000336415169608792
  mo_energy =
[-3.20964874e+01 -1.87278682e+00 -7.22049155e-02 -7.22049155e-02
 -7.22049155e-02 -3.36415170e-04 -3.36415170e-04 -3.36415170e-04
  5.50548386e+01  5.99302862e+03]
E1 = -171.65097121384738  E_coul = 51.63959662434966
Extra cycle  E= -120.011374589498  delta_E= -4.26e-14  |g|= 1.87e-12  |ddm|= 1.86e-12
    CPU time for scf_cycle      1.34 sec, wall time      1.37 sec
exp = [4.61731924e+03 6.95545732e+01 1.51331962e+01 1.03354733e+00
 1.27647421e+00 1.00000000e-09]
grad_E = [ 1.72327151e-04 -9.24233883e-02  1.58626828e-01  1.33519219e-01
 -1.48860012e-03 -2.93505069e-10]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:25:47 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.31907093        1
[INPUT] 0    0    [1    /1   ]  69.6469965767        1
[INPUT] 0    0    [1    /1   ]  14.9745693299        1
[INPUT] 0    0    [1    /1   ]  0.900028109989       1
[INPUT] 1    0    [1    /1   ]  1.27796281485        1
[INPUT] 1    0    [1    /1   ]  1.29350506897e-09      1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.31907093141, 1.0]], [0, [69.64699657671852, 1.0]], [0, [14.97456932987343, 1.0]], [0, [0.9000281099886478, 1.0]], [1, [1.2779628148508668, 1.0]], [1, [1.293505068968024e-09, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.31907093]
bas 1, expnt(s) = [69.64699658]
bas 2, expnt(s) = [14.97456933]
bas 3, expnt(s) = [0.90002811]
bas 4, expnt(s) = [1.27796281]
bas 5, expnt(s) = [1.29350507e-09]
CPU time:         8.14
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61731907e+03 1.41516617e+03 6.96469966e+01 6.09104515e+01
 1.49745693e+01 1.92322803e+01 9.00028110e-01 2.33457096e+00
 1.27796281e+00 3.96398648e+00 1.29350507e-09 2.26305215e-11]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.268868197475024
cond(S) = 6.080705766955371
E1 = -158.4270804076562  E_coul = 44.98143247317542
init E= -113.445647934481
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.676866909942289  LUMO = -0.000382612535805525
  mo_energy =
[-3.30554705e+01 -2.53114165e+00 -6.76866910e-01 -6.76866910e-01
 -6.76866910e-01 -3.82612536e-04 -3.82612536e-04 -3.82612536e-04
  5.31581753e+01  5.99212785e+03]
E1 = -170.99846114815125  E_coul = 50.97632284879653
cycle= 1 E= -120.022138299355  delta_E= -6.58  |g|= 0.388  |ddm|= 0.435
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.665471
diis-c [-0.442851  1.      ]
  HOMO = -0.120159404570892  LUMO = -0.000382612535805529
  mo_energy =
[-3.22606053e+01 -1.90191698e+00 -1.20159405e-01 -1.20159405e-01
 -1.20159405e-01 -3.82612536e-04 -3.82612536e-04 -3.82612536e-04
  5.39898619e+01  5.99256434e+03]
E1 = -170.98994578535132  E_coul = 50.967618738042574
cycle= 2 E= -120.022327047309  delta_E= -0.000189  |g|= 0.0026  |ddm|= 0.00698
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00220972
diis-c [-3.79143508e-06 -1.57235422e-03  1.00157235e+00]
  HOMO = -0.120455650708032  LUMO = -0.000382612535805529
  mo_energy =
[-3.22638685e+01 -1.90212555e+00 -1.20455651e-01 -1.20455651e-01
 -1.20455651e-01 -3.82612536e-04 -3.82612536e-04 -3.82612536e-04
  5.39878429e+01  5.99255518e+03]
E1 = -170.98980926627715  E_coul = 50.967482159258886
cycle= 3 E= -120.022327107018  delta_E= -5.97e-08  |g|= 4.81e-05  |ddm|= 0.000125
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=4.2983e-05
diis-c [-1.41300411e-10  3.26069249e-05 -2.17007209e-02  1.02166811e+00]
  HOMO = -0.12046068791752  LUMO = -0.000382612535805547
  mo_energy =
[-3.22639128e+01 -1.90212890e+00 -1.20460688e-01 -1.20460688e-01
 -1.20460688e-01 -3.82612536e-04 -3.82612536e-04 -3.82612536e-04
  5.39878190e+01  5.99255509e+03]
E1 = -170.98980728674073  E_coul = 50.9674801797023
cycle= 4 E= -120.022327107038  delta_E= -2.02e-11  |g|= 2.19e-07  |ddm|= 2.22e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -170.98980728674073  E_coul = 50.9674801797023
  HOMO = -0.120460676916586  LUMO = -0.000382612535805525
  mo_energy =
[-3.22639125e+01 -1.90212889e+00 -1.20460677e-01 -1.20460677e-01
 -1.20460677e-01 -3.82612536e-04 -3.82612536e-04 -3.82612536e-04
  5.39878192e+01  5.99255509e+03]
E1 = -170.98980729780683  E_coul = 50.96748019076832
Extra cycle  E= -120.022327107039  delta_E= -8.53e-14  |g|= 4.13e-09  |ddm|= 6.25e-09
    CPU time for scf_cycle      0.08 sec, wall time      0.08 sec
exp = [4.61731907e+03 6.96469966e+01 1.49745693e+01 9.00028110e-01
 1.27796281e+00 1.29350507e-09]
E = -120.0223271070385
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:25:47 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.31907093        1
[INPUT] 0    0    [1    /1   ]  69.6469965767        1
[INPUT] 0    0    [1    /1   ]  14.9745693299        1
[INPUT] 0    0    [1    /1   ]  0.900028109989       1
[INPUT] 1    0    [1    /1   ]  1.27796281485        1
[INPUT] 1    0    [1    /1   ]  1.29350506897e-09      1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.31907093141, 1.0]], [0, [69.64699657671852, 1.0]], [0, [14.97456932987343, 1.0]], [0, [0.9000281099886478, 1.0]], [1, [1.2779628148508668, 1.0]], [1, [1.293505068968024e-09, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.31907093]
bas 1, expnt(s) = [69.64699658]
bas 2, expnt(s) = [14.97456933]
bas 3, expnt(s) = [0.90002811]
bas 4, expnt(s) = [1.27796281]
bas 5, expnt(s) = [1.29350507e-09]
CPU time:         8.27
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61731907e+03 1.41516617e+03 6.96469966e+01 6.09104515e+01
 1.49745693e+01 1.92322803e+01 9.00028110e-01 2.33457096e+00
 1.27796281e+00 3.96398648e+00 1.29350507e-09 2.26305215e-11]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.268868197475024
cond(S) = 6.080705766955371
E1 = -158.4270804076562  E_coul = 44.98143247317542
init E= -113.445647934481
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.676866909942289  LUMO = -0.000382612535805525
  mo_energy =
[-3.30554705e+01 -2.53114165e+00 -6.76866910e-01 -6.76866910e-01
 -6.76866910e-01 -3.82612536e-04 -3.82612536e-04 -3.82612536e-04
  5.31581753e+01  5.99212785e+03]
E1 = -170.99846114815125  E_coul = 50.97632284879653
cycle= 1 E= -120.022138299355  delta_E= -6.58  |g|= 0.388  |ddm|= 0.435
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.665471
diis-c [-0.442851  1.      ]
  HOMO = -0.120159404570892  LUMO = -0.000382612535805529
  mo_energy =
[-3.22606053e+01 -1.90191698e+00 -1.20159405e-01 -1.20159405e-01
 -1.20159405e-01 -3.82612536e-04 -3.82612536e-04 -3.82612536e-04
  5.39898619e+01  5.99256434e+03]
E1 = -170.98994578535132  E_coul = 50.967618738042574
cycle= 2 E= -120.022327047309  delta_E= -0.000189  |g|= 0.0026  |ddm|= 0.00698
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00220972
diis-c [-3.79143508e-06 -1.57235422e-03  1.00157235e+00]
  HOMO = -0.120455650708032  LUMO = -0.000382612535805529
  mo_energy =
[-3.22638685e+01 -1.90212555e+00 -1.20455651e-01 -1.20455651e-01
 -1.20455651e-01 -3.82612536e-04 -3.82612536e-04 -3.82612536e-04
  5.39878429e+01  5.99255518e+03]
E1 = -170.98980926627715  E_coul = 50.967482159258886
cycle= 3 E= -120.022327107018  delta_E= -5.97e-08  |g|= 4.81e-05  |ddm|= 0.000125
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=4.2983e-05
diis-c [-1.41300411e-10  3.26069249e-05 -2.17007209e-02  1.02166811e+00]
  HOMO = -0.12046068791752  LUMO = -0.000382612535805547
  mo_energy =
[-3.22639128e+01 -1.90212890e+00 -1.20460688e-01 -1.20460688e-01
 -1.20460688e-01 -3.82612536e-04 -3.82612536e-04 -3.82612536e-04
  5.39878190e+01  5.99255509e+03]
E1 = -170.98980728674073  E_coul = 50.9674801797023
cycle= 4 E= -120.022327107038  delta_E= -2.02e-11  |g|= 2.19e-07  |ddm|= 2.22e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -170.98980728674073  E_coul = 50.9674801797023
  HOMO = -0.120460676916586  LUMO = -0.000382612535805525
  mo_energy =
[-3.22639125e+01 -1.90212889e+00 -1.20460677e-01 -1.20460677e-01
 -1.20460677e-01 -3.82612536e-04 -3.82612536e-04 -3.82612536e-04
  5.39878192e+01  5.99255509e+03]
E1 = -170.98980729780683  E_coul = 50.96748019076832
Extra cycle  E= -120.022327107039  delta_E= -8.53e-14  |g|= 4.13e-09  |ddm|= 6.25e-09
    CPU time for scf_cycle      0.08 sec, wall time      0.08 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 6.080705766955371
E1 = -170.98980729780683  E_coul = 50.96748019076832
init E= -120.022327107039
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.120460676782928  LUMO = -0.000382612535805525
  mo_energy =
[-3.22639125e+01 -1.90212889e+00 -1.20460677e-01 -1.20460677e-01
 -1.20460677e-01 -3.82612536e-04 -3.82612536e-04 -3.82612536e-04
  5.39878193e+01  5.99255509e+03]
E1 = -170.98980729798257  E_coul = 50.96748019094413
cycle= 1 E= -120.022327107038  delta_E= 7.11e-14  |g|= 8.34e-11  |ddm|= 1.04e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -170.98980729798257  E_coul = 50.96748019094413
  HOMO = -0.120460676781789  LUMO = -0.000382612535805544
  mo_energy =
[-3.22639125e+01 -1.90212889e+00 -1.20460677e-01 -1.20460677e-01
 -1.20460677e-01 -3.82612536e-04 -3.82612536e-04 -3.82612536e-04
  5.39878193e+01  5.99255509e+03]
E1 = -170.98980729798544  E_coul = 50.96748019094695
Extra cycle  E= -120.022327107038  delta_E= -4.26e-14  |g|= 1.75e-12  |ddm|= 1.92e-12
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [4.61731907e+03 6.96469966e+01 1.49745693e+01 9.00028110e-01
 1.27796281e+00 1.29350507e-09]
grad_E = [ 1.70908573e-04 -8.96095928e-02  1.45707804e-01 -4.79375938e-01
 -1.16856334e-01 -2.54463297e-10]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:25:50 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.31864827        1
[INPUT] 0    0    [1    /1   ]  69.8724183317        1
[INPUT] 0    0    [1    /1   ]  14.5926413509        1
[INPUT] 0    0    [1    /1   ]  0.948021171829       1
[INPUT] 1    0    [1    /1   ]  1.35242421376        1
[INPUT] 1    0    [1    /1   ]  1.99089089186e-09      1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.318648274205, 1.0]], [0, [69.87241833167826, 1.0]], [0, [14.59264135087125, 1.0]], [0, [0.9480211718290169, 1.0]], [1, [1.3524242137579574, 1.0]], [1, [1.990890891859437e-09, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.31864827]
bas 1, expnt(s) = [69.87241833]
bas 2, expnt(s) = [14.59264135]
bas 3, expnt(s) = [0.94802117]
bas 4, expnt(s) = [1.35242421]
bas 5, expnt(s) = [1.99089089e-09]
CPU time:        10.95
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61731865e+03 1.41516608e+03 6.98724183e+01 6.10582504e+01
 1.45926414e+01 1.88632038e+01 9.48021172e-01 2.42732848e+00
 1.35242421e+00 4.25476487e+00 1.99089089e-09 3.87966045e-11]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.264829981944814
cond(S) = 5.9979349285863774
E1 = -159.80696926519065  E_coul = 45.93898480565776
init E= -113.867984459533
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.613084045397255  LUMO = -0.000474676765301996
  mo_energy =
[-3.28826833e+01 -2.45942893e+00 -6.13084045e-01 -6.13084045e-01
 -6.13084045e-01 -4.74676765e-04 -4.74676765e-04 -4.74676765e-04
  5.25954252e+01  5.99221587e+03]
E1 = -172.23883739476278  E_coul = 52.14034736253083
cycle= 1 E= -120.098490032232  delta_E= -6.23  |g|= 0.379  |ddm|= 0.431
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.650672
diis-c [-0.42337362  1.        ]
  HOMO = -0.0361839045856254  LUMO = -0.000474676765301946
  mo_energy =
[-3.20589250e+01 -1.81168327e+00 -3.61839046e-02 -3.61839046e-02
 -3.61839046e-02 -4.74676765e-04 -4.74676765e-04 -4.74676765e-04
  5.34493883e+01  5.99264395e+03]
E1 = -172.22977518059503  E_coul = 52.131104956312285
cycle= 2 E= -120.098670224283  delta_E= -0.00018  |g|= 0.00247  |ddm|= 0.00687
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00206924
diis-c [-3.23579740e-06 -1.57426532e-03  1.00157427e+00]
  HOMO = -0.0364905196916096  LUMO = -0.00047467676530195
  mo_energy =
[-3.20624179e+01 -1.81190047e+00 -3.64905197e-02 -3.64905197e-02
 -3.64905197e-02 -4.74676765e-04 -4.74676765e-04 -4.74676765e-04
  5.34471408e+01  5.99263327e+03]
E1 = -172.22962904324814  E_coul = 52.13095876421273
cycle= 3 E= -120.098670279035  delta_E= -5.48e-08  |g|= 4.47e-05  |ddm|= 0.000122
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.90603e-05
diis-c [-1.51669554e-10  3.19673797e-05 -2.10685774e-02  1.02103661e+00]
  HOMO = -0.0364957089789231  LUMO = -0.000474676765301944
  mo_energy =
[-3.20624661e+01 -1.81190394e+00 -3.64957090e-02 -3.64957090e-02
 -3.64957090e-02 -4.74676765e-04 -4.74676765e-04 -4.74676765e-04
  5.34471130e+01  5.99263316e+03]
E1 = -172.22962688916843  E_coul = 52.13095661011506
cycle= 4 E= -120.098670279053  delta_E= -1.8e-11  |g|= 2.26e-07  |ddm|= 2.15e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -172.22962688916843  E_coul = 52.13095661011506
  HOMO = -0.0364957009299491  LUMO = -0.000474676765301957
  mo_energy =
[-3.20624658e+01 -1.81190393e+00 -3.64957009e-02 -3.64957009e-02
 -3.64957009e-02 -4.74676765e-04 -4.74676765e-04 -4.74676765e-04
  5.34471133e+01  5.99263316e+03]
E1 = -172.22962689886467  E_coul = 52.13095661981125
Extra cycle  E= -120.098670279053  delta_E= -2.84e-14  |g|= 4.51e-09  |ddm|= 5.65e-09
    CPU time for scf_cycle      0.08 sec, wall time      0.08 sec
exp = [4.61731865e+03 6.98724183e+01 1.45926414e+01 9.48021172e-01
 1.35242421e+00 1.99089089e-09]
E = -120.09867027905341
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:25:50 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.31864827        1
[INPUT] 0    0    [1    /1   ]  69.8724183317        1
[INPUT] 0    0    [1    /1   ]  14.5926413509        1
[INPUT] 0    0    [1    /1   ]  0.948021171829       1
[INPUT] 1    0    [1    /1   ]  1.35242421376        1
[INPUT] 1    0    [1    /1   ]  1.99089089186e-09      1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.318648274205, 1.0]], [0, [69.87241833167826, 1.0]], [0, [14.59264135087125, 1.0]], [0, [0.9480211718290169, 1.0]], [1, [1.3524242137579574, 1.0]], [1, [1.990890891859437e-09, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.31864827]
bas 1, expnt(s) = [69.87241833]
bas 2, expnt(s) = [14.59264135]
bas 3, expnt(s) = [0.94802117]
bas 4, expnt(s) = [1.35242421]
bas 5, expnt(s) = [1.99089089e-09]
CPU time:        11.10
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61731865e+03 1.41516608e+03 6.98724183e+01 6.10582504e+01
 1.45926414e+01 1.88632038e+01 9.48021172e-01 2.42732848e+00
 1.35242421e+00 4.25476487e+00 1.99089089e-09 3.87966045e-11]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.264829981944814
cond(S) = 5.9979349285863774
E1 = -159.80696926519065  E_coul = 45.93898480565776
init E= -113.867984459533
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.613084045397255  LUMO = -0.000474676765301996
  mo_energy =
[-3.28826833e+01 -2.45942893e+00 -6.13084045e-01 -6.13084045e-01
 -6.13084045e-01 -4.74676765e-04 -4.74676765e-04 -4.74676765e-04
  5.25954252e+01  5.99221587e+03]
E1 = -172.23883739476278  E_coul = 52.14034736253083
cycle= 1 E= -120.098490032232  delta_E= -6.23  |g|= 0.379  |ddm|= 0.431
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.650672
diis-c [-0.42337362  1.        ]
  HOMO = -0.0361839045856254  LUMO = -0.000474676765301946
  mo_energy =
[-3.20589250e+01 -1.81168327e+00 -3.61839046e-02 -3.61839046e-02
 -3.61839046e-02 -4.74676765e-04 -4.74676765e-04 -4.74676765e-04
  5.34493883e+01  5.99264395e+03]
E1 = -172.22977518059503  E_coul = 52.131104956312285
cycle= 2 E= -120.098670224283  delta_E= -0.00018  |g|= 0.00247  |ddm|= 0.00687
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00206924
diis-c [-3.23579740e-06 -1.57426532e-03  1.00157427e+00]
  HOMO = -0.0364905196916096  LUMO = -0.00047467676530195
  mo_energy =
[-3.20624179e+01 -1.81190047e+00 -3.64905197e-02 -3.64905197e-02
 -3.64905197e-02 -4.74676765e-04 -4.74676765e-04 -4.74676765e-04
  5.34471408e+01  5.99263327e+03]
E1 = -172.22962904324814  E_coul = 52.13095876421273
cycle= 3 E= -120.098670279035  delta_E= -5.48e-08  |g|= 4.47e-05  |ddm|= 0.000122
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.90603e-05
diis-c [-1.51669554e-10  3.19673797e-05 -2.10685774e-02  1.02103661e+00]
  HOMO = -0.0364957089789231  LUMO = -0.000474676765301944
  mo_energy =
[-3.20624661e+01 -1.81190394e+00 -3.64957090e-02 -3.64957090e-02
 -3.64957090e-02 -4.74676765e-04 -4.74676765e-04 -4.74676765e-04
  5.34471130e+01  5.99263316e+03]
E1 = -172.22962688916843  E_coul = 52.13095661011506
cycle= 4 E= -120.098670279053  delta_E= -1.8e-11  |g|= 2.26e-07  |ddm|= 2.15e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -172.22962688916843  E_coul = 52.13095661011506
  HOMO = -0.0364957009299491  LUMO = -0.000474676765301957
  mo_energy =
[-3.20624658e+01 -1.81190393e+00 -3.64957009e-02 -3.64957009e-02
 -3.64957009e-02 -4.74676765e-04 -4.74676765e-04 -4.74676765e-04
  5.34471133e+01  5.99263316e+03]
E1 = -172.22962689886467  E_coul = 52.13095661981125
Extra cycle  E= -120.098670279053  delta_E= -2.84e-14  |g|= 4.51e-09  |ddm|= 5.65e-09
    CPU time for scf_cycle      0.08 sec, wall time      0.08 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 5.9979349285863774
E1 = -172.22962689886467  E_coul = 52.13095661981125
init E= -120.098670279053
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.0364957008633429  LUMO = -0.000474676765301947
  mo_energy =
[-3.20624658e+01 -1.81190393e+00 -3.64957009e-02 -3.64957009e-02
 -3.64957009e-02 -4.74676765e-04 -4.74676765e-04 -4.74676765e-04
  5.34471133e+01  5.99263316e+03]
E1 = -172.22962689901314  E_coul = 52.13095661995986
cycle= 1 E= -120.098670279053  delta_E= 1.28e-13  |g|= 9.62e-11  |ddm|= 1.03e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -172.22962689901314  E_coul = 52.13095661995986
  HOMO = -0.0364957008637514  LUMO = -0.000474676765301955
  mo_energy =
[-3.20624658e+01 -1.81190393e+00 -3.64957009e-02 -3.64957009e-02
 -3.64957009e-02 -4.74676765e-04 -4.74676765e-04 -4.74676765e-04
  5.34471133e+01  5.99263316e+03]
E1 = -172.2296268990155  E_coul = 52.13095661996218
Extra cycle  E= -120.098670279053  delta_E= -4.26e-14  |g|= 2.09e-12  |ddm|= 2.22e-12
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
exp = [4.61731865e+03 6.98724183e+01 1.45926414e+01 9.48021172e-01
 1.35242421e+00 1.99089089e-09]
grad_E = [ 1.70520565e-04 -8.33496035e-02  1.03022429e-01 -1.65883918e-01
  2.74416913e-01 -1.67387140e-09]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:25:53 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.31684893        1
[INPUT] 0    0    [1    /1   ]  70.8196393951        1
[INPUT] 0    0    [1    /1   ]  13.0511712395        1
[INPUT] 0    0    [1    /1   ]  1.18243203506        1
[INPUT] 1    0    [1    /1   ]  1.09799865463        1
[INPUT] 1    0    [1    /1   ]  7.39312433279e-09      1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.316848931925, 1.0]], [0, [70.81963939509582, 1.0]], [0, [13.051171239508433, 1.0]], [0, [1.1824320350625228, 1.0]], [1, [1.0979986546305414, 1.0]], [1, [7.393124332786216e-09, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.31684893]
bas 1, expnt(s) = [70.8196394]
bas 2, expnt(s) = [13.05117124]
bas 3, expnt(s) = [1.18243204]
bas 4, expnt(s) = [1.09799865]
bas 5, expnt(s) = [7.39312433e-09]
CPU time:        13.82
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61731685e+03 1.41516566e+03 7.08196394e+01 6.16780035e+01
 1.30511712e+01 1.73481089e+01 1.18243204e+00 2.86481884e+00
 1.09799865e+00 3.27896403e+00 7.39312433e-09 1.99995123e-10]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.174454463833346
cond(S) = 5.854163313377821
E1 = -157.59935389309456  E_coul = 43.03745608122335
init E= -114.561897811871
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.786370054728385  LUMO = -0.000914711265239725
  mo_energy =
[-3.35281947e+01 -2.73781478e+00 -7.86370055e-01 -7.86370055e-01
 -7.86370055e-01 -9.14711265e-04 -9.14711265e-04 -9.14711265e-04
  4.90163255e+01  5.99127033e+03]
E1 = -169.57412203481127  E_coul = 49.52949192136961
cycle= 1 E= -120.044630113442  delta_E= -5.48  |g|= 0.338  |ddm|= 0.456
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.591259
diis-c [-0.3495871  1.       ]
  HOMO = -0.188237099918895  LUMO = -0.00091471126523973
  mo_energy =
[-3.26602863e+01 -2.03262499e+00 -1.88237100e-01 -1.88237100e-01
 -1.88237100e-01 -9.14711265e-04 -9.14711265e-04 -9.14711265e-04
  4.98915172e+01  5.99161346e+03]
E1 = -169.56604038595637  E_coul = 49.52130180393497
cycle= 2 E= -120.044738582021  delta_E= -0.000108  |g|= 0.00171  |ddm|= 0.00486
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00172684
diis-c [-1.82303868e-06 -1.82408229e-03  1.00182408e+00]
  HOMO = -0.188380270133395  LUMO = -0.000914711265239749
  mo_energy =
[-3.26637749e+01 -2.03281015e+00 -1.88380270e-01 -1.88380270e-01
 -1.88380270e-01 -9.14711265e-04 -9.14711265e-04 -9.14711265e-04
  4.98888730e+01  5.99159874e+03]
E1 = -169.56592098880392  E_coul = 49.52118238561487
cycle= 3 E= -120.044738603189  delta_E= -2.12e-08  |g|= 2.15e-05  |ddm|= 7.14e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.90538e-05
diis-c [-3.37469642e-13  2.00399519e-05 -1.41085934e-02  1.01408855e+00]
  HOMO = -0.188382149486861  LUMO = -0.00091471126523973
  mo_energy =
[-3.26638199e+01 -2.03281255e+00 -1.88382149e-01 -1.88382149e-01
 -1.88382149e-01 -9.14711265e-04 -9.14711265e-04 -9.14711265e-04
  4.98888390e+01  5.99159855e+03]
E1 = -169.5659194349117  E_coul = 49.52118083171915
cycle= 4 E= -120.044738603193  delta_E= -3.51e-12  |g|= 1.56e-08  |ddm|= 9.37e-07
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -169.5659194349117  E_coul = 49.52118083171915
  HOMO = -0.188382150755725  LUMO = -0.00091471126523973
  mo_energy =
[-3.26638199e+01 -2.03281255e+00 -1.88382151e-01 -1.88382151e-01
 -1.88382151e-01 -9.14711265e-04 -9.14711265e-04 -9.14711265e-04
  4.98888390e+01  5.99159855e+03]
E1 = -169.5659194342905  E_coul = 49.52118083109802
Extra cycle  E= -120.044738603192  delta_E= 8.53e-14  |g|= 4.01e-10  |ddm|= 7.17e-10
    CPU time for scf_cycle      0.08 sec, wall time      0.08 sec
exp = [4.61731685e+03 7.08196394e+01 1.30511712e+01 1.18243204e+00
 1.09799865e+00 7.39312433e-09]
E = -120.04473860319247
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:25:53 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.31786979        1
[INPUT] 0    0    [1    /1   ]  70.2822348808        1
[INPUT] 0    0    [1    /1   ]  13.9257221005        1
[INPUT] 0    0    [1    /1   ]  1.04943936738        1
[INPUT] 1    0    [1    /1   ]  1.24234663137        1
[INPUT] 1    0    [1    /1   ]  4.32817492373e-09      1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.317869786191, 1.0]], [0, [70.28223488077516, 1.0]], [0, [13.92572210047421, 1.0]], [0, [1.0494393673815718, 1.0]], [1, [1.242346631374548, 1.0]], [1, [4.3281749237291295e-09, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.31786979]
bas 1, expnt(s) = [70.28223488]
bas 2, expnt(s) = [13.9257221]
bas 3, expnt(s) = [1.04943937]
bas 4, expnt(s) = [1.24234663]
bas 5, expnt(s) = [4.32817492e-09]
CPU time:        13.97
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61731787e+03 1.41516590e+03 7.02822349e+01 6.13266436e+01
 1.39257221e+01 1.82128671e+01 1.04943937e+00 2.61958828e+00
 1.24234663e+00 3.82637804e+00 4.32817492e-09 1.02415431e-10]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.248418514920099
cond(S) = 5.908312929832102
E1 = -159.28461375715995  E_coul = 44.94276158789238
init E= -114.341852169268
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.672046288131222  LUMO = -0.000699881455046625
  mo_energy =
[-3.31421798e+01 -2.56159837e+00 -6.72046288e-01 -6.72046288e-01
 -6.72046288e-01 -6.99881455e-04 -6.99881455e-04 -6.99881455e-04
  5.11047803e+01  5.99183805e+03]
E1 = -171.28237203157988  E_coul = 51.107794005491066
cycle= 1 E= -120.174578026089  delta_E= -5.83  |g|= 0.358  |ddm|= 0.426
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.623722
diis-c [-0.38902966  1.        ]
  HOMO = -0.101386003427203  LUMO = -0.000699881455046608
  mo_energy =
[-3.23238855e+01 -1.90541260e+00 -1.01386003e-01 -1.01386003e-01
 -1.01386003e-01 -6.99881455e-04 -6.99881455e-04 -6.99881455e-04
  5.19417686e+01  5.99220515e+03]
E1 = -171.27381317448234  E_coul = 51.0991050828818
cycle= 2 E= -120.174708091601  delta_E= -0.00013  |g|= 0.00195  |ddm|= 0.0058
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00164877
diis-c [-1.76665345e-06 -1.56659971e-03  1.00156660e+00]
  HOMO = -0.101614599164118  LUMO = -0.000699881455046601
  mo_energy =
[-3.23273494e+01 -1.90561512e+00 -1.01614599e-01 -1.01614599e-01
 -1.01614599e-01 -6.99881455e-04 -6.99881455e-04 -6.99881455e-04
  5.19393714e+01  5.99219284e+03]
E1 = -171.27367706713363  E_coul = 51.09896894224285
cycle= 3 E= -120.174708124891  delta_E= -3.33e-08  |g|= 3.12e-05  |ddm|= 9.84e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=2.5003e-05
diis-c [-1.00600258e-10  2.67821718e-05 -1.75577263e-02  1.01753094e+00]
  HOMO = -0.101618329135558  LUMO = -0.000699881455046633
  mo_energy =
[-3.23273974e+01 -1.90561823e+00 -1.01618329e-01 -1.01618329e-01
 -1.01618329e-01 -6.99881455e-04 -6.99881455e-04 -6.99881455e-04
  5.19393402e+01  5.99219270e+03]
E1 = -171.27367507188632  E_coul = 51.09896694698632
cycle= 4 E= -120.1747081249  delta_E= -9.21e-12  |g|= 2.06e-07  |ddm|= 1.64e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -171.27367507188632  E_coul = 51.09896694698632
  HOMO = -0.101618334485732  LUMO = -0.000699881455046603
  mo_energy =
[-3.23273973e+01 -1.90561824e+00 -1.01618334e-01 -1.01618334e-01
 -1.01618334e-01 -6.99881455e-04 -6.99881455e-04 -6.99881455e-04
  5.19393403e+01  5.99219270e+03]
E1 = -171.2736750736816  E_coul = 51.098966948781595
Extra cycle  E= -120.1747081249  delta_E= -1.42e-14  |g|= 4.92e-09  |ddm|= 5.41e-09
    CPU time for scf_cycle      0.08 sec, wall time      0.09 sec
exp = [4.61731787e+03 7.02822349e+01 1.39257221e+01 1.04943937e+00
 1.24234663e+00 4.32817492e-09]
E = -120.17470812490001
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:25:53 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.31786979        1
[INPUT] 0    0    [1    /1   ]  70.2822348808        1
[INPUT] 0    0    [1    /1   ]  13.9257221005        1
[INPUT] 0    0    [1    /1   ]  1.04943936738        1
[INPUT] 1    0    [1    /1   ]  1.24234663137        1
[INPUT] 1    0    [1    /1   ]  4.32817492373e-09      1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.317869786191, 1.0]], [0, [70.28223488077516, 1.0]], [0, [13.92572210047421, 1.0]], [0, [1.0494393673815718, 1.0]], [1, [1.242346631374548, 1.0]], [1, [4.3281749237291295e-09, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.31786979]
bas 1, expnt(s) = [70.28223488]
bas 2, expnt(s) = [13.9257221]
bas 3, expnt(s) = [1.04943937]
bas 4, expnt(s) = [1.24234663]
bas 5, expnt(s) = [4.32817492e-09]
CPU time:        14.15
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61731787e+03 1.41516590e+03 7.02822349e+01 6.13266436e+01
 1.39257221e+01 1.82128671e+01 1.04943937e+00 2.61958828e+00
 1.24234663e+00 3.82637804e+00 4.32817492e-09 1.02415431e-10]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.248418514920099
cond(S) = 5.908312929832102
E1 = -159.28461375715995  E_coul = 44.94276158789238
init E= -114.341852169268
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.672046288131222  LUMO = -0.000699881455046625
  mo_energy =
[-3.31421798e+01 -2.56159837e+00 -6.72046288e-01 -6.72046288e-01
 -6.72046288e-01 -6.99881455e-04 -6.99881455e-04 -6.99881455e-04
  5.11047803e+01  5.99183805e+03]
E1 = -171.28237203157988  E_coul = 51.107794005491066
cycle= 1 E= -120.174578026089  delta_E= -5.83  |g|= 0.358  |ddm|= 0.426
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.623722
diis-c [-0.38902966  1.        ]
  HOMO = -0.101386003427203  LUMO = -0.000699881455046608
  mo_energy =
[-3.23238855e+01 -1.90541260e+00 -1.01386003e-01 -1.01386003e-01
 -1.01386003e-01 -6.99881455e-04 -6.99881455e-04 -6.99881455e-04
  5.19417686e+01  5.99220515e+03]
E1 = -171.27381317448234  E_coul = 51.0991050828818
cycle= 2 E= -120.174708091601  delta_E= -0.00013  |g|= 0.00195  |ddm|= 0.0058
    CPU time for cycle= 2      0.02 sec, wall time      0.03 sec
diis-norm(errvec)=0.00164877
diis-c [-1.76665345e-06 -1.56659971e-03  1.00156660e+00]
  HOMO = -0.101614599164118  LUMO = -0.000699881455046601
  mo_energy =
[-3.23273494e+01 -1.90561512e+00 -1.01614599e-01 -1.01614599e-01
 -1.01614599e-01 -6.99881455e-04 -6.99881455e-04 -6.99881455e-04
  5.19393714e+01  5.99219284e+03]
E1 = -171.27367706713363  E_coul = 51.09896894224285
cycle= 3 E= -120.174708124891  delta_E= -3.33e-08  |g|= 3.12e-05  |ddm|= 9.84e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.03 sec
diis-norm(errvec)=2.5003e-05
diis-c [-1.00600258e-10  2.67821718e-05 -1.75577263e-02  1.01753094e+00]
  HOMO = -0.101618329135558  LUMO = -0.000699881455046633
  mo_energy =
[-3.23273974e+01 -1.90561823e+00 -1.01618329e-01 -1.01618329e-01
 -1.01618329e-01 -6.99881455e-04 -6.99881455e-04 -6.99881455e-04
  5.19393402e+01  5.99219270e+03]
E1 = -171.27367507188632  E_coul = 51.09896694698632
cycle= 4 E= -120.1747081249  delta_E= -9.21e-12  |g|= 2.06e-07  |ddm|= 1.64e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.03 sec
E1 = -171.27367507188632  E_coul = 51.09896694698632
  HOMO = -0.101618334485732  LUMO = -0.000699881455046603
  mo_energy =
[-3.23273973e+01 -1.90561824e+00 -1.01618334e-01 -1.01618334e-01
 -1.01618334e-01 -6.99881455e-04 -6.99881455e-04 -6.99881455e-04
  5.19393403e+01  5.99219270e+03]
E1 = -171.2736750736816  E_coul = 51.098966948781595
Extra cycle  E= -120.1747081249  delta_E= -1.42e-14  |g|= 4.92e-09  |ddm|= 5.41e-09
    CPU time for scf_cycle      0.12 sec, wall time      0.15 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 5.908312929832102
E1 = -171.2736750736816  E_coul = 51.098966948781595
init E= -120.1747081249
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.101618334662525  LUMO = -0.000699881455046601
  mo_energy =
[-3.23273973e+01 -1.90561824e+00 -1.01618335e-01 -1.01618335e-01
 -1.01618335e-01 -6.99881455e-04 -6.99881455e-04 -6.99881455e-04
  5.19393403e+01  5.99219270e+03]
E1 = -171.27367507369308  E_coul = 51.09896694879314
cycle= 1 E= -120.1747081249  delta_E= 5.68e-14  |g|= 1.19e-10  |ddm|= 1.39e-10
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
E1 = -171.27367507369308  E_coul = 51.09896694879314
  HOMO = -0.101618334667584  LUMO = -0.000699881455046641
  mo_energy =
[-3.23273973e+01 -1.90561824e+00 -1.01618335e-01 -1.01618335e-01
 -1.01618335e-01 -6.99881455e-04 -6.99881455e-04 -6.99881455e-04
  5.19393403e+01  5.99219270e+03]
E1 = -171.27367507369294  E_coul = 51.09896694879291
Extra cycle  E= -120.1747081249  delta_E= -8.53e-14  |g|= 2.96e-12  |ddm|= 3.57e-12
    CPU time for scf_cycle      0.14 sec, wall time      0.15 sec
exp = [4.61731787e+03 7.02822349e+01 1.39257221e+01 1.04943937e+00
 1.24234663e+00 4.32817492e-09]
grad_E = [ 1.70170896e-04 -7.11787894e-02  1.69444419e-02  1.86766791e-01
 -1.82827376e-01 -1.86578144e-09]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:25:57 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.317141          1
[INPUT] 0    0    [1    /1   ]  70.6458834747        1
[INPUT] 0    0    [1    /1   ]  13.4408524328        1
[INPUT] 0    0    [1    /1   ]  1.00558962495        1
[INPUT] 1    0    [1    /1   ]  1.30641447509        1
[INPUT] 1    0    [1    /1   ]  8.11306810745e-09      1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.317141000371, 1.0]], [0, [70.64588347467965, 1.0]], [0, [13.440852432838001, 1.0]], [0, [1.005589624950891, 1.0]], [1, [1.306414475086803, 1.0]], [1, [8.113068107451734e-09, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.317141]
bas 1, expnt(s) = [70.64588347]
bas 2, expnt(s) = [13.44085243]
bas 3, expnt(s) = [1.00558962]
bas 4, expnt(s) = [1.30641448]
bas 5, expnt(s) = [8.11306811e-09]
CPU time:        17.55
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61731714e+03 1.41516573e+03 7.06458835e+01 6.15644735e+01
 1.34408524e+01 1.77351609e+01 1.00558962e+00 2.53705926e+00
 1.30641448e+00 4.07460602e+00 8.11306811e-09 2.24628985e-10]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.26020376652325
cond(S) = 5.659767264778531
E1 = -160.35048211784897  E_coul = 45.58817731615001
init E= -114.762304801699
    CPU time for initialize scf      0.02 sec, wall time      0.03 sec
  HOMO = -0.633189589489605  LUMO = -0.000958213237629235
  mo_energy =
[-3.30181930e+01 -2.48966700e+00 -6.33189589e-01 -6.33189589e-01
 -6.33189589e-01 -9.58213238e-04 -9.58213238e-04 -9.58213238e-04
  4.98362661e+01  5.99187424e+03]
E1 = -171.8781629857649  E_coul = 51.67839280422829
cycle= 1 E= -120.199770181537  delta_E= -5.44  |g|= 0.352  |ddm|= 0.437
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.599784
diis-c [-0.35974099  1.        ]
  HOMO = -0.0615189187064526  LUMO = -0.000958213237629205
  mo_energy =
[-3.22346705e+01 -1.84154881e+00 -6.15189187e-02 -6.15189187e-02
 -6.15189187e-02 -9.58213238e-04 -9.58213238e-04 -9.58213238e-04
  5.06494527e+01  5.99210983e+03]
E1 = -171.86794246586487  E_coul = 51.667994775976915
cycle= 2 E= -120.199947689888  delta_E= -0.000178  |g|= 0.00226  |ddm|= 0.00683
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00186742
diis-c [-2.53177242e-06 -1.63239465e-03  1.00163239e+00]
  HOMO = -0.0618152344183599  LUMO = -0.000958213237629205
  mo_energy =
[-3.22387541e+01 -1.84178520e+00 -6.18152344e-02 -6.18152344e-02
 -6.18152344e-02 -9.58213238e-04 -9.58213238e-04 -9.58213238e-04
  5.06466334e+01  5.99209553e+03]
E1 = -171.86778157819612  E_coul = 51.66783384104201
cycle= 3 E= -120.199947737154  delta_E= -4.73e-08  |g|= 3.8e-05  |ddm|= 0.000116
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.19914e-05
diis-c [-1.84351309e-10  2.93337257e-05 -1.85693656e-02  1.01854003e+00]
  HOMO = -0.0618200814411587  LUMO = -0.000958213237629206
  mo_energy =
[-3.22388092e+01 -1.84178881e+00 -6.18200814e-02 -6.18200814e-02
 -6.18200814e-02 -9.58213238e-04 -9.58213238e-04 -9.58213238e-04
  5.06465983e+01  5.99209536e+03]
E1 = -171.8677792392934  E_coul = 51.6678315021253
cycle= 4 E= -120.199947737168  delta_E= -1.4e-11  |g|= 2.61e-07  |ddm|= 1.98e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -171.8677792392934  E_coul = 51.6678315021253
  HOMO = -0.0618200850872003  LUMO = -0.00095821323762922
  mo_energy =
[-3.22388090e+01 -1.84178881e+00 -6.18200851e-02 -6.18200851e-02
 -6.18200851e-02 -9.58213238e-04 -9.58213238e-04 -9.58213238e-04
  5.06465984e+01  5.99209537e+03]
E1 = -171.8677792434211  E_coul = 51.66783150625302
Extra cycle  E= -120.199947737168  delta_E= 4.26e-14  |g|= 6.02e-09  |ddm|= 6.37e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [4.61731714e+03 7.06458835e+01 1.34408524e+01 1.00558962e+00
 1.30641448e+00 8.11306811e-09]
E = -120.19994773716807
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:25:57 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.317141          1
[INPUT] 0    0    [1    /1   ]  70.6458834747        1
[INPUT] 0    0    [1    /1   ]  13.4408524328        1
[INPUT] 0    0    [1    /1   ]  1.00558962495        1
[INPUT] 1    0    [1    /1   ]  1.30641447509        1
[INPUT] 1    0    [1    /1   ]  8.11306810745e-09      1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.317141000371, 1.0]], [0, [70.64588347467965, 1.0]], [0, [13.440852432838001, 1.0]], [0, [1.005589624950891, 1.0]], [1, [1.306414475086803, 1.0]], [1, [8.113068107451734e-09, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.317141]
bas 1, expnt(s) = [70.64588347]
bas 2, expnt(s) = [13.44085243]
bas 3, expnt(s) = [1.00558962]
bas 4, expnt(s) = [1.30641448]
bas 5, expnt(s) = [8.11306811e-09]
CPU time:        17.76
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61731714e+03 1.41516573e+03 7.06458835e+01 6.15644735e+01
 1.34408524e+01 1.77351609e+01 1.00558962e+00 2.53705926e+00
 1.30641448e+00 4.07460602e+00 8.11306811e-09 2.24628985e-10]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.26020376652325
cond(S) = 5.659767264778531
E1 = -160.35048211784897  E_coul = 45.58817731615001
init E= -114.762304801699
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.633189589489605  LUMO = -0.000958213237629235
  mo_energy =
[-3.30181930e+01 -2.48966700e+00 -6.33189589e-01 -6.33189589e-01
 -6.33189589e-01 -9.58213238e-04 -9.58213238e-04 -9.58213238e-04
  4.98362661e+01  5.99187424e+03]
E1 = -171.8781629857649  E_coul = 51.67839280422829
cycle= 1 E= -120.199770181537  delta_E= -5.44  |g|= 0.352  |ddm|= 0.437
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.599784
diis-c [-0.35974099  1.        ]
  HOMO = -0.0615189187064526  LUMO = -0.000958213237629205
  mo_energy =
[-3.22346705e+01 -1.84154881e+00 -6.15189187e-02 -6.15189187e-02
 -6.15189187e-02 -9.58213238e-04 -9.58213238e-04 -9.58213238e-04
  5.06494527e+01  5.99210983e+03]
E1 = -171.86794246586487  E_coul = 51.667994775976915
cycle= 2 E= -120.199947689888  delta_E= -0.000178  |g|= 0.00226  |ddm|= 0.00683
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00186742
diis-c [-2.53177242e-06 -1.63239465e-03  1.00163239e+00]
  HOMO = -0.0618152344183599  LUMO = -0.000958213237629205
  mo_energy =
[-3.22387541e+01 -1.84178520e+00 -6.18152344e-02 -6.18152344e-02
 -6.18152344e-02 -9.58213238e-04 -9.58213238e-04 -9.58213238e-04
  5.06466334e+01  5.99209553e+03]
E1 = -171.86778157819612  E_coul = 51.66783384104201
cycle= 3 E= -120.199947737154  delta_E= -4.73e-08  |g|= 3.8e-05  |ddm|= 0.000116
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.19914e-05
diis-c [-1.84351309e-10  2.93337257e-05 -1.85693656e-02  1.01854003e+00]
  HOMO = -0.0618200814411587  LUMO = -0.000958213237629206
  mo_energy =
[-3.22388092e+01 -1.84178881e+00 -6.18200814e-02 -6.18200814e-02
 -6.18200814e-02 -9.58213238e-04 -9.58213238e-04 -9.58213238e-04
  5.06465983e+01  5.99209536e+03]
E1 = -171.8677792392934  E_coul = 51.6678315021253
cycle= 4 E= -120.199947737168  delta_E= -1.4e-11  |g|= 2.61e-07  |ddm|= 1.98e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -171.8677792392934  E_coul = 51.6678315021253
  HOMO = -0.0618200850872003  LUMO = -0.00095821323762922
  mo_energy =
[-3.22388090e+01 -1.84178881e+00 -6.18200851e-02 -6.18200851e-02
 -6.18200851e-02 -9.58213238e-04 -9.58213238e-04 -9.58213238e-04
  5.06465984e+01  5.99209537e+03]
E1 = -171.8677792434211  E_coul = 51.66783150625302
Extra cycle  E= -120.199947737168  delta_E= 4.26e-14  |g|= 6.02e-09  |ddm|= 6.37e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 5.659767264778531
E1 = -171.8677792434211  E_coul = 51.66783150625302
init E= -120.199947737168
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.0618200852720338  LUMO = -0.000958213237629214
  mo_energy =
[-3.22388090e+01 -1.84178881e+00 -6.18200853e-02 -6.18200853e-02
 -6.18200853e-02 -9.58213238e-04 -9.58213238e-04 -9.58213238e-04
  5.06465984e+01  5.99209537e+03]
E1 = -171.86777924345864  E_coul = 51.66783150629067
cycle= 1 E= -120.199947737168  delta_E= 9.95e-14  |g|= 1.44e-10  |ddm|= 1.64e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -171.86777924345864  E_coul = 51.66783150629067
  HOMO = -0.0618200852780504  LUMO = -0.000958213237629213
  mo_energy =
[-3.22388090e+01 -1.84178881e+00 -6.18200853e-02 -6.18200853e-02
 -6.18200853e-02 -9.58213238e-04 -9.58213238e-04 -9.58213238e-04
  5.06465984e+01  5.99209537e+03]
E1 = -171.8677792434587  E_coul = 51.66783150629065
Extra cycle  E= -120.199947737168  delta_E= -7.11e-14  |g|= 3.48e-12  |ddm|= 4.24e-12
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
exp = [4.61731714e+03 7.06458835e+01 1.34408524e+01 1.00558962e+00
 1.30641448e+00 8.11306811e-09]
grad_E = [ 1.68841202e-04 -6.11366494e-02 -4.88924302e-02  6.61868675e-02
  8.39234437e-02 -8.09321610e-09]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:26:00 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.31698397        1
[INPUT] 0    0    [1    /1   ]  70.7012293654        1
[INPUT] 0    0    [1    /1   ]  13.4967569621        1
[INPUT] 0    0    [1    /1   ]  0.993488401405       1
[INPUT] 1    0    [1    /1   ]  1.29785603698        1
[INPUT] 1    0    [1    /1   ]  1.5649591527e-08      1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.3169839671245, 1.0]], [0, [70.70122936539113, 1.0]], [0, [13.496756962068675, 1.0]], [0, [0.9934884014046457, 1.0]], [1, [1.297856036982902, 1.0]], [1, [1.5649591527008928e-08, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.31698397]
bas 1, expnt(s) = [70.70122937]
bas 2, expnt(s) = [13.49675696]
bas 3, expnt(s) = [0.9934884]
bas 4, expnt(s) = [1.29785604]
bas 5, expnt(s) = [1.56495915e-08]
CPU time:        20.86
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61731698e+03 1.41516569e+03 7.07012294e+01 6.16006434e+01
 1.34967570e+01 1.77904566e+01 9.93488401e-01 2.51412650e+00
 1.29785604e+00 4.04126700e+00 1.56495915e-08 5.10638024e-10]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.26191653638465
cond(S) = 5.6515391418307335
E1 = -160.21685373940193  E_coul = 45.46829287346122
init E= -114.748560865941
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.641123489125387  LUMO = -0.00133081452992235
  mo_energy =
[-3.30469861e+01 -2.49942312e+00 -6.41123489e-01 -6.41123489e-01
 -6.41123489e-01 -1.33081453e-03 -1.33081453e-03 -1.33081453e-03
  4.99546209e+01  5.99204560e+03]
E1 = -171.7230136121317  E_coul = 51.516333388169286
cycle= 1 E= -120.206680223962  delta_E= -5.46  |g|= 0.353  |ddm|= 0.438
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.600586
diis-c [-0.36070389  1.        ]
  HOMO = -0.0732170717918947  LUMO = -0.00133081452992206
  mo_energy =
[-3.22705318e+01 -1.85507910e+00 -7.32170718e-02 -7.32170718e-02
 -7.32170718e-02 -1.33081453e-03 -1.33081453e-03 -1.33081453e-03
  5.07621680e+01  5.99227643e+03]
E1 = -171.7128278491923  E_coul = 51.50596752067331
cycle= 2 E= -120.206860328519  delta_E= -0.00018  |g|= 0.00229  |ddm|= 0.00688
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.0018941
diis-c [-2.63250897e-06 -1.62989125e-03  1.00162989e+00]
  HOMO = -0.0735151466335149  LUMO = -0.00133081452992206
  mo_energy =
[-3.22745947e+01 -1.85531477e+00 -7.35151466e-02 -7.35151466e-02
 -7.35151466e-02 -1.33081453e-03 -1.33081453e-03 -1.33081453e-03
  5.07593764e+01  5.99226235e+03]
E1 = -171.71266739182343  E_coul = 51.505807014590935
cycle= 3 E= -120.206860377232  delta_E= -4.87e-08  |g|= 3.9e-05  |ddm|= 0.000118
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=3.31584e-05
diis-c [-1.90128321e-10  2.99080950e-05 -1.89650140e-02  1.01893511e+00]
  HOMO = -0.0735200427062895  LUMO = -0.00133081452992205
  mo_energy =
[-3.22746495e+01 -1.85531839e+00 -7.35200427e-02 -7.35200427e-02
 -7.35200427e-02 -1.33081453e-03 -1.33081453e-03 -1.33081453e-03
  5.07593417e+01  5.99226219e+03]
E1 = -171.71266505814896  E_coul = 51.50580468090192
cycle= 4 E= -120.206860377247  delta_E= -1.46e-11  |g|= 2.6e-07  |ddm|= 2.01e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -171.71266505814896  E_coul = 51.50580468090192
  HOMO = -0.0735200447443202  LUMO = -0.00133081452992206
  mo_energy =
[-3.22746493e+01 -1.85531839e+00 -7.35200447e-02 -7.35200447e-02
 -7.35200447e-02 -1.33081453e-03 -1.33081453e-03 -1.33081453e-03
  5.07593419e+01  5.99226219e+03]
E1 = -171.71266506320958  E_coul = 51.505804685962374
Extra cycle  E= -120.206860377247  delta_E= -1.71e-13  |g|= 5.9e-09  |ddm|= 6.15e-09
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
exp = [4.61731698e+03 7.07012294e+01 1.34967570e+01 9.93488401e-01
 1.29785604e+00 1.56495915e-08]
E = -120.20686037724721
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:26:00 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.31698397        1
[INPUT] 0    0    [1    /1   ]  70.7012293654        1
[INPUT] 0    0    [1    /1   ]  13.4967569621        1
[INPUT] 0    0    [1    /1   ]  0.993488401405       1
[INPUT] 1    0    [1    /1   ]  1.29785603698        1
[INPUT] 1    0    [1    /1   ]  1.5649591527e-08      1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.3169839671245, 1.0]], [0, [70.70122936539113, 1.0]], [0, [13.496756962068675, 1.0]], [0, [0.9934884014046457, 1.0]], [1, [1.297856036982902, 1.0]], [1, [1.5649591527008928e-08, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.31698397]
bas 1, expnt(s) = [70.70122937]
bas 2, expnt(s) = [13.49675696]
bas 3, expnt(s) = [0.9934884]
bas 4, expnt(s) = [1.29785604]
bas 5, expnt(s) = [1.56495915e-08]
CPU time:        21.12
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61731698e+03 1.41516569e+03 7.07012294e+01 6.16006434e+01
 1.34967570e+01 1.77904566e+01 9.93488401e-01 2.51412650e+00
 1.29785604e+00 4.04126700e+00 1.56495915e-08 5.10638024e-10]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.26191653638465
cond(S) = 5.6515391418307335
E1 = -160.21685373940193  E_coul = 45.46829287346122
init E= -114.748560865941
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.641123489125387  LUMO = -0.00133081452992235
  mo_energy =
[-3.30469861e+01 -2.49942312e+00 -6.41123489e-01 -6.41123489e-01
 -6.41123489e-01 -1.33081453e-03 -1.33081453e-03 -1.33081453e-03
  4.99546209e+01  5.99204560e+03]
E1 = -171.7230136121317  E_coul = 51.516333388169286
cycle= 1 E= -120.206680223962  delta_E= -5.46  |g|= 0.353  |ddm|= 0.438
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.600586
diis-c [-0.36070389  1.        ]
  HOMO = -0.0732170717918947  LUMO = -0.00133081452992206
  mo_energy =
[-3.22705318e+01 -1.85507910e+00 -7.32170718e-02 -7.32170718e-02
 -7.32170718e-02 -1.33081453e-03 -1.33081453e-03 -1.33081453e-03
  5.07621680e+01  5.99227643e+03]
E1 = -171.7128278491923  E_coul = 51.50596752067331
cycle= 2 E= -120.206860328519  delta_E= -0.00018  |g|= 0.00229  |ddm|= 0.00688
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.0018941
diis-c [-2.63250897e-06 -1.62989125e-03  1.00162989e+00]
  HOMO = -0.0735151466335149  LUMO = -0.00133081452992206
  mo_energy =
[-3.22745947e+01 -1.85531477e+00 -7.35151466e-02 -7.35151466e-02
 -7.35151466e-02 -1.33081453e-03 -1.33081453e-03 -1.33081453e-03
  5.07593764e+01  5.99226235e+03]
E1 = -171.71266739182343  E_coul = 51.505807014590935
cycle= 3 E= -120.206860377232  delta_E= -4.87e-08  |g|= 3.9e-05  |ddm|= 0.000118
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=3.31584e-05
diis-c [-1.90128321e-10  2.99080950e-05 -1.89650140e-02  1.01893511e+00]
  HOMO = -0.0735200427062895  LUMO = -0.00133081452992205
  mo_energy =
[-3.22746495e+01 -1.85531839e+00 -7.35200427e-02 -7.35200427e-02
 -7.35200427e-02 -1.33081453e-03 -1.33081453e-03 -1.33081453e-03
  5.07593417e+01  5.99226219e+03]
E1 = -171.71266505814896  E_coul = 51.50580468090192
cycle= 4 E= -120.206860377247  delta_E= -1.46e-11  |g|= 2.6e-07  |ddm|= 2.01e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -171.71266505814896  E_coul = 51.50580468090192
  HOMO = -0.0735200447443202  LUMO = -0.00133081452992206
  mo_energy =
[-3.22746493e+01 -1.85531839e+00 -7.35200447e-02 -7.35200447e-02
 -7.35200447e-02 -1.33081453e-03 -1.33081453e-03 -1.33081453e-03
  5.07593419e+01  5.99226219e+03]
E1 = -171.71266506320958  E_coul = 51.505804685962374
Extra cycle  E= -120.206860377247  delta_E= -1.71e-13  |g|= 5.9e-09  |ddm|= 6.15e-09
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 5.6515391418307335
E1 = -171.71266506320958  E_coul = 51.505804685962374
init E= -120.206860377247
    CPU time for initialize scf      0.06 sec, wall time      0.09 sec
  HOMO = -0.0735200448978119  LUMO = -0.00133081452992205
  mo_energy =
[-3.22746493e+01 -1.85531839e+00 -7.35200449e-02 -7.35200449e-02
 -7.35200449e-02 -1.33081453e-03 -1.33081453e-03 -1.33081453e-03
  5.07593419e+01  5.99226219e+03]
E1 = -171.71266506326353  E_coul = 51.50580468601639
cycle= 1 E= -120.206860377247  delta_E= 7.11e-14  |g|= 1.4e-10  |ddm|= 1.55e-10
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
E1 = -171.71266506326353  E_coul = 51.50580468601639
  HOMO = -0.0735200449031709  LUMO = -0.00133081452992207
  mo_energy =
[-3.22746493e+01 -1.85531839e+00 -7.35200449e-02 -7.35200449e-02
 -7.35200449e-02 -1.33081453e-03 -1.33081453e-03 -1.33081453e-03
  5.07593419e+01  5.99226219e+03]
E1 = -171.71266506326376  E_coul = 51.50580468601664
Extra cycle  E= -120.206860377247  delta_E= 1.42e-14  |g|= 3.53e-12  |ddm|= 4e-12
    CPU time for scf_cycle      0.16 sec, wall time      0.19 sec
exp = [4.61731698e+03 7.07012294e+01 1.34967570e+01 9.93488401e-01
 1.29785604e+00 1.56495915e-08]
grad_E = [ 1.68820383e-04 -6.18225536e-02 -4.25604506e-02  7.72577132e-03
  3.40031260e-02 -1.82642734e-08]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:26:05 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.31539455        1
[INPUT] 0    0    [1    /1   ]  71.3092905171        1
[INPUT] 0    0    [1    /1   ]  13.7221767966        1
[INPUT] 0    0    [1    /1   ]  0.944754678805       1
[INPUT] 1    0    [1    /1   ]  1.26333647183        1
[INPUT] 1    0    [1    /1   ]  1.31378609111e-07      1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.315394546037, 1.0]], [0, [71.30929051710334, 1.0]], [0, [13.72217679656919, 1.0]], [0, [0.9447546788053387, 1.0]], [1, [1.2633364718279527, 1.0]], [1, [1.313786091108304e-07, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.31539455]
bas 1, expnt(s) = [71.30929052]
bas 2, expnt(s) = [13.7221768]
bas 3, expnt(s) = [0.94475468]
bas 4, expnt(s) = [1.26333647]
bas 5, expnt(s) = [1.31378609e-07]
CPU time:        24.94
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61731539e+03 1.41516533e+03 7.13092905e+01 6.19975619e+01
 1.37221768e+01 1.80128438e+01 9.44754679e-01 2.42105309e+00
 1.26333647e+00 3.90735783e+00 1.31378609e-07 7.29693062e-09]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.26603279687231
cond(S) = 5.5920462307490775
E1 = -159.72621065562117  E_coul = 44.952198973673745
init E= -114.774011681947
    CPU time for initialize scf      0.03 sec, wall time      0.06 sec
  HOMO = -0.675524847855395  LUMO = -0.00385570798083112
  mo_energy =
[-3.31787582e+01 -2.53776116e+00 -6.75524848e-01 -6.75524848e-01
 -6.75524848e-01 -3.85570798e-03 -3.85570798e-03 -3.85570798e-03
  5.06363562e+01  5.99355431e+03]
E1 = -171.093608405029  E_coul = 50.84962179334901
cycle= 1 E= -120.24398661168  delta_E= -5.47  |g|= 0.354  |ddm|= 0.445
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.598904
diis-c [-0.35868655  1.        ]
  HOMO = -0.120514917238158  LUMO = -0.00385570798082913
  mo_energy =
[-3.24288121e+01 -1.90692014e+00 -1.20514917e-01 -1.20514917e-01
 -1.20514917e-01 -3.85570798e-03 -3.85570798e-03 -3.85570798e-03
  5.14232215e+01  5.99376354e+03]
E1 = -171.08358957736087  E_coul = 50.83941068300127
cycle= 2 E= -120.24417889436  delta_E= -0.000192  |g|= 0.00242  |ddm|= 0.00705
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00201925
diis-c [-3.11355676e-06 -1.64192308e-03  1.00164192e+00]
  HOMO = -0.120818024900212  LUMO = -0.00385570798082914
  mo_energy =
[-3.24327867e+01 -1.90715171e+00 -1.20818025e-01 -1.20818025e-01
 -1.20818025e-01 -3.85570798e-03 -3.85570798e-03 -3.85570798e-03
  5.14205315e+01  5.99375033e+03]
E1 = -171.08343266873953  E_coul = 50.83925371996906
cycle= 3 E= -120.24417894877  delta_E= -5.44e-08  |g|= 4.26e-05  |ddm|= 0.000122
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.76192e-05
diis-c [-2.03900920e-10  3.16448263e-05 -2.01477591e-02  1.02011611e+00]
  HOMO = -0.12082302913125  LUMO = -0.00385570798082914
  mo_energy =
[-3.24328397e+01 -1.90715528e+00 -1.20823029e-01 -1.20823029e-01
 -1.20823029e-01 -3.85570798e-03 -3.85570798e-03 -3.85570798e-03
  5.14204991e+01  5.99375020e+03]
E1 = -171.08343041152764  E_coul = 50.839251462740044
cycle= 4 E= -120.244178948788  delta_E= -1.71e-11  |g|= 2.53e-07  |ddm|= 2.1e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -171.08343041152764  E_coul = 50.839251462740044
  HOMO = -0.120823025536473  LUMO = -0.00385570798082914
  mo_energy =
[-3.24328394e+01 -1.90715528e+00 -1.20823026e-01 -1.20823026e-01
 -1.20823026e-01 -3.85570798e-03 -3.85570798e-03 -3.85570798e-03
  5.14204994e+01  5.99375020e+03]
E1 = -171.08343041962968  E_coul = 50.83925147084208
Extra cycle  E= -120.244178948788  delta_E=    0  |g|= 5.29e-09  |ddm|= 5.7e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.13 sec
exp = [4.61731539e+03 7.13092905e+01 1.37221768e+01 9.44754679e-01
 1.26333647e+00 1.31378609e-07]
E = -120.2441789487876
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:26:05 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.31539455        1
[INPUT] 0    0    [1    /1   ]  71.3092905171        1
[INPUT] 0    0    [1    /1   ]  13.7221767966        1
[INPUT] 0    0    [1    /1   ]  0.944754678805       1
[INPUT] 1    0    [1    /1   ]  1.26333647183        1
[INPUT] 1    0    [1    /1   ]  1.31378609111e-07      1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.315394546037, 1.0]], [0, [71.30929051710334, 1.0]], [0, [13.72217679656919, 1.0]], [0, [0.9447546788053387, 1.0]], [1, [1.2633364718279527, 1.0]], [1, [1.313786091108304e-07, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.31539455]
bas 1, expnt(s) = [71.30929052]
bas 2, expnt(s) = [13.7221768]
bas 3, expnt(s) = [0.94475468]
bas 4, expnt(s) = [1.26333647]
bas 5, expnt(s) = [1.31378609e-07]
CPU time:        25.19
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61731539e+03 1.41516533e+03 7.13092905e+01 6.19975619e+01
 1.37221768e+01 1.80128438e+01 9.44754679e-01 2.42105309e+00
 1.26333647e+00 3.90735783e+00 1.31378609e-07 7.29693062e-09]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.26603279687231
cond(S) = 5.5920462307490775
E1 = -159.72621065562117  E_coul = 44.952198973673745
init E= -114.774011681947
    CPU time for initialize scf      0.02 sec, wall time      0.03 sec
  HOMO = -0.675524847855395  LUMO = -0.00385570798083112
  mo_energy =
[-3.31787582e+01 -2.53776116e+00 -6.75524848e-01 -6.75524848e-01
 -6.75524848e-01 -3.85570798e-03 -3.85570798e-03 -3.85570798e-03
  5.06363562e+01  5.99355431e+03]
E1 = -171.093608405029  E_coul = 50.84962179334901
cycle= 1 E= -120.24398661168  delta_E= -5.47  |g|= 0.354  |ddm|= 0.445
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.598904
diis-c [-0.35868655  1.        ]
  HOMO = -0.120514917238158  LUMO = -0.00385570798082913
  mo_energy =
[-3.24288121e+01 -1.90692014e+00 -1.20514917e-01 -1.20514917e-01
 -1.20514917e-01 -3.85570798e-03 -3.85570798e-03 -3.85570798e-03
  5.14232215e+01  5.99376354e+03]
E1 = -171.08358957736087  E_coul = 50.83941068300127
cycle= 2 E= -120.24417889436  delta_E= -0.000192  |g|= 0.00242  |ddm|= 0.00705
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00201925
diis-c [-3.11355676e-06 -1.64192308e-03  1.00164192e+00]
  HOMO = -0.120818024900212  LUMO = -0.00385570798082914
  mo_energy =
[-3.24327867e+01 -1.90715171e+00 -1.20818025e-01 -1.20818025e-01
 -1.20818025e-01 -3.85570798e-03 -3.85570798e-03 -3.85570798e-03
  5.14205315e+01  5.99375033e+03]
E1 = -171.08343266873953  E_coul = 50.83925371996906
cycle= 3 E= -120.24417894877  delta_E= -5.44e-08  |g|= 4.26e-05  |ddm|= 0.000122
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.76192e-05
diis-c [-2.03900920e-10  3.16448263e-05 -2.01477591e-02  1.02011611e+00]
  HOMO = -0.12082302913125  LUMO = -0.00385570798082914
  mo_energy =
[-3.24328397e+01 -1.90715528e+00 -1.20823029e-01 -1.20823029e-01
 -1.20823029e-01 -3.85570798e-03 -3.85570798e-03 -3.85570798e-03
  5.14204991e+01  5.99375020e+03]
E1 = -171.08343041152764  E_coul = 50.839251462740044
cycle= 4 E= -120.244178948788  delta_E= -1.71e-11  |g|= 2.53e-07  |ddm|= 2.1e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -171.08343041152764  E_coul = 50.839251462740044
  HOMO = -0.120823025536473  LUMO = -0.00385570798082914
  mo_energy =
[-3.24328394e+01 -1.90715528e+00 -1.20823026e-01 -1.20823026e-01
 -1.20823026e-01 -3.85570798e-03 -3.85570798e-03 -3.85570798e-03
  5.14204994e+01  5.99375020e+03]
E1 = -171.08343041962968  E_coul = 50.83925147084208
Extra cycle  E= -120.244178948788  delta_E=    0  |g|= 5.29e-09  |ddm|= 5.7e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 5.5920462307490775
E1 = -171.08343041962968  E_coul = 50.83925147084208
init E= -120.244178948788
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.12082302557681  LUMO = -0.00385570798082914
  mo_energy =
[-3.24328394e+01 -1.90715528e+00 -1.20823026e-01 -1.20823026e-01
 -1.20823026e-01 -3.85570798e-03 -3.85570798e-03 -3.85570798e-03
  5.14204994e+01  5.99375020e+03]
E1 = -171.0834304197374  E_coul = 50.83925147094991
cycle= 1 E= -120.244178948787  delta_E= 1.14e-13  |g|= 1.19e-10  |ddm|= 1.24e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -171.0834304197374  E_coul = 50.83925147094991
  HOMO = -0.12082302557972  LUMO = -0.00385570798082914
  mo_energy =
[-3.24328394e+01 -1.90715528e+00 -1.20823026e-01 -1.20823026e-01
 -1.20823026e-01 -3.85570798e-03 -3.85570798e-03 -3.85570798e-03
  5.14204994e+01  5.99375020e+03]
E1 = -171.0834304197388  E_coul = 50.83925147095123
Extra cycle  E= -120.244178948788  delta_E= -5.68e-14  |g|= 2.75e-12  |ddm|= 3.04e-12
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [4.61731539e+03 7.13092905e+01 1.37221768e+01 9.44754679e-01
 1.26333647e+00 1.31378609e-07]
grad_E = [ 1.68623341e-04 -6.27341138e-02 -2.37735246e-02 -2.43161720e-01
 -1.74297483e-01 -2.73890331e-07]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:26:08 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.31169051        1
[INPUT] 0    0    [1    /1   ]  72.7464680148        1
[INPUT] 0    0    [1    /1   ]  14.088343001         1
[INPUT] 0    0    [1    /1   ]  0.896426715769       1
[INPUT] 1    0    [1    /1   ]  1.22519604237        1
[INPUT] 1    0    [1    /1   ]  8.97674396144e-07      1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.3116905094275, 1.0]], [0, [72.74646801477346, 1.0]], [0, [14.088343001046017, 1.0]], [0, [0.8964267157689777, 1.0]], [1, [1.225196042366065, 1.0]], [1, [8.976743961436148e-07, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.31169051]
bas 1, expnt(s) = [72.74646801]
bas 2, expnt(s) = [14.088343]
bas 3, expnt(s) = [0.89642672]
bas 4, expnt(s) = [1.22519604]
bas 5, expnt(s) = [8.97674396e-07]
CPU time:        28.23
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61731169e+03 1.41516448e+03 7.27464680e+01 6.29323513e+01
 1.40883430e+01 1.83721491e+01 8.96426716e-01 2.32756125e+00
 1.22519604e+00 3.76046347e+00 8.97674396e-07 8.06088899e-08]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.264620325646526
cond(S) = 5.518479452236162
E1 = -159.24059417315001  E_coul = 44.33871630386225
init E= -114.901877869288
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.716502865240847  LUMO = -0.0100772378970356
  mo_energy =
[-3.33505803e+01 -2.58033406e+00 -7.16502865e-01 -7.16502865e-01
 -7.16502865e-01 -1.00772379e-02 -1.00772379e-02 -1.00772379e-02
  5.21789415e+01  5.99707326e+03]
E1 = -170.44048356281937  E_coul = 50.131769465538305
cycle= 1 E= -120.308714097281  delta_E= -5.41  |g|= 0.352  |ddm|= 0.454
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.592081
diis-c [-0.35056041  1.        ]
  HOMO = -0.170480309849411  LUMO = -0.0100772378968783
  mo_energy =
[-3.26176358e+01 -1.95949395e+00 -1.70480310e-01 -1.70480310e-01
 -1.70480310e-01 -1.00772379e-02 -1.00772379e-02 -1.00772379e-02
  5.29531503e+01  5.99728323e+03]
E1 = -170.43097353014585  E_coul = 50.122059456990726
cycle= 2 E= -120.308914073155  delta_E= -0.0002  |g|= 0.00251  |ddm|= 0.00704
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00214097
diis-c [-3.59853421e-06 -1.67924388e-03  1.00167924e+00]
  HOMO = -0.170776148054888  LUMO = -0.0100772378968787
  mo_energy =
[-3.26213936e+01 -1.95971340e+00 -1.70776148e-01 -1.70776148e-01
 -1.70776148e-01 -1.00772379e-02 -1.00772379e-02 -1.00772379e-02
  5.29506338e+01  5.99727130e+03]
E1 = -170.43082778269223  E_coul = 50.12191365214448
cycle= 3 E= -120.308914130548  delta_E= -5.74e-08  |g|= 4.46e-05  |ddm|= 0.000121
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=4.07712e-05
diis-c [-1.91623964e-10  3.23485404e-05 -2.06535047e-02  1.02062116e+00]
  HOMO = -0.170780962388746  LUMO = -0.0100772378968787
  mo_energy =
[-3.26214420e+01 -1.95971673e+00 -1.70780962e-01 -1.70780962e-01
 -1.70780962e-01 -1.00772379e-02 -1.00772379e-02 -1.00772379e-02
  5.29506053e+01  5.99727118e+03]
E1 = -170.43082575881468  E_coul = 50.1219116282489
cycle= 4 E= -120.308914130566  delta_E= -1.8e-11  |g|= 2.33e-07  |ddm|= 2.06e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -170.43082575881468  E_coul = 50.1219116282489
  HOMO = -0.170780954953305  LUMO = -0.0100772378968788
  mo_energy =
[-3.26214417e+01 -1.95971673e+00 -1.70780955e-01 -1.70780955e-01
 -1.70780955e-01 -1.00772379e-02 -1.00772379e-02 -1.00772379e-02
  5.29506055e+01  5.99727118e+03]
E1 = -170.43082576848877  E_coul = 50.12191163792298
Extra cycle  E= -120.308914130566  delta_E= -2.84e-14  |g|= 4.48e-09  |ddm|= 5.55e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
exp = [4.61731169e+03 7.27464680e+01 1.40883430e+01 8.96426716e-01
 1.22519604e+00 8.97674396e-07]
E = -120.3089141305658
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:26:08 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.31169051        1
[INPUT] 0    0    [1    /1   ]  72.7464680148        1
[INPUT] 0    0    [1    /1   ]  14.088343001         1
[INPUT] 0    0    [1    /1   ]  0.896426715769       1
[INPUT] 1    0    [1    /1   ]  1.22519604237        1
[INPUT] 1    0    [1    /1   ]  8.97674396144e-07      1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.3116905094275, 1.0]], [0, [72.74646801477346, 1.0]], [0, [14.088343001046017, 1.0]], [0, [0.8964267157689777, 1.0]], [1, [1.225196042366065, 1.0]], [1, [8.976743961436148e-07, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.31169051]
bas 1, expnt(s) = [72.74646801]
bas 2, expnt(s) = [14.088343]
bas 3, expnt(s) = [0.89642672]
bas 4, expnt(s) = [1.22519604]
bas 5, expnt(s) = [8.97674396e-07]
CPU time:        28.46
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61731169e+03 1.41516448e+03 7.27464680e+01 6.29323513e+01
 1.40883430e+01 1.83721491e+01 8.96426716e-01 2.32756125e+00
 1.22519604e+00 3.76046347e+00 8.97674396e-07 8.06088899e-08]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.264620325646526
cond(S) = 5.518479452236162
E1 = -159.24059417315001  E_coul = 44.33871630386225
init E= -114.901877869288
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.716502865240847  LUMO = -0.0100772378970356
  mo_energy =
[-3.33505803e+01 -2.58033406e+00 -7.16502865e-01 -7.16502865e-01
 -7.16502865e-01 -1.00772379e-02 -1.00772379e-02 -1.00772379e-02
  5.21789415e+01  5.99707326e+03]
E1 = -170.44048356281937  E_coul = 50.131769465538305
cycle= 1 E= -120.308714097281  delta_E= -5.41  |g|= 0.352  |ddm|= 0.454
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.592081
diis-c [-0.35056041  1.        ]
  HOMO = -0.170480309849411  LUMO = -0.0100772378968783
  mo_energy =
[-3.26176358e+01 -1.95949395e+00 -1.70480310e-01 -1.70480310e-01
 -1.70480310e-01 -1.00772379e-02 -1.00772379e-02 -1.00772379e-02
  5.29531503e+01  5.99728323e+03]
E1 = -170.43097353014585  E_coul = 50.122059456990726
cycle= 2 E= -120.308914073155  delta_E= -0.0002  |g|= 0.00251  |ddm|= 0.00704
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00214097
diis-c [-3.59853421e-06 -1.67924388e-03  1.00167924e+00]
  HOMO = -0.170776148054888  LUMO = -0.0100772378968787
  mo_energy =
[-3.26213936e+01 -1.95971340e+00 -1.70776148e-01 -1.70776148e-01
 -1.70776148e-01 -1.00772379e-02 -1.00772379e-02 -1.00772379e-02
  5.29506338e+01  5.99727130e+03]
E1 = -170.43082778269223  E_coul = 50.12191365214448
cycle= 3 E= -120.308914130548  delta_E= -5.74e-08  |g|= 4.46e-05  |ddm|= 0.000121
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=4.07712e-05
diis-c [-1.91623964e-10  3.23485404e-05 -2.06535047e-02  1.02062116e+00]
  HOMO = -0.170780962388746  LUMO = -0.0100772378968787
  mo_energy =
[-3.26214420e+01 -1.95971673e+00 -1.70780962e-01 -1.70780962e-01
 -1.70780962e-01 -1.00772379e-02 -1.00772379e-02 -1.00772379e-02
  5.29506053e+01  5.99727118e+03]
E1 = -170.43082575881468  E_coul = 50.1219116282489
cycle= 4 E= -120.308914130566  delta_E= -1.8e-11  |g|= 2.33e-07  |ddm|= 2.06e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -170.43082575881468  E_coul = 50.1219116282489
  HOMO = -0.170780954953305  LUMO = -0.0100772378968788
  mo_energy =
[-3.26214417e+01 -1.95971673e+00 -1.70780955e-01 -1.70780955e-01
 -1.70780955e-01 -1.00772379e-02 -1.00772379e-02 -1.00772379e-02
  5.29506055e+01  5.99727118e+03]
E1 = -170.43082576848877  E_coul = 50.12191163792298
Extra cycle  E= -120.308914130566  delta_E= -2.84e-14  |g|= 4.48e-09  |ddm|= 5.55e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 5.518479452236162
E1 = -170.43082576848877  E_coul = 50.12191163792298
init E= -120.308914130566
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.17078095490752  LUMO = -0.0100772378968788
  mo_energy =
[-3.26214417e+01 -1.95971673e+00 -1.70780955e-01 -1.70780955e-01
 -1.70780955e-01 -1.00772379e-02 -1.00772379e-02 -1.00772379e-02
  5.29506056e+01  5.99727118e+03]
E1 = -170.43082576862642  E_coul = 50.12191163806057
cycle= 1 E= -120.308914130566  delta_E= -5.68e-14  |g|= 9.34e-11  |ddm|= 9.94e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -170.43082576862642  E_coul = 50.12191163806057
  HOMO = -0.170780954908369  LUMO = -0.0100772378968788
  mo_energy =
[-3.26214417e+01 -1.95971673e+00 -1.70780955e-01 -1.70780955e-01
 -1.70780955e-01 -1.00772379e-02 -1.00772379e-02 -1.00772379e-02
  5.29506056e+01  5.99727118e+03]
E1 = -170.43082576862815  E_coul = 50.121911638062414
Extra cycle  E= -120.308914130566  delta_E= 1.14e-13  |g|= 2.12e-12  |ddm|= 2.15e-12
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [4.61731169e+03 7.27464680e+01 1.40883430e+01 8.96426716e-01
 1.22519604e+00 8.97674396e-07]
grad_E = [ 1.68410762e-04 -6.22271124e-02 -8.50154801e-04 -5.25504461e-01
 -4.10496462e-01 -3.59535586e-06]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:26:12 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.30129427        1
[INPUT] 0    0    [1    /1   ]  76.8028591433        1
[INPUT] 0    0    [1    /1   ]  14.9034224424        1
[INPUT] 0    0    [1    /1   ]  0.842207924808       1
[INPUT] 1    0    [1    /1   ]  1.17167757219        1
[INPUT] 1    0    [1    /1   ]  1.13479730004e-05      1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.301294270353, 1.0]], [0, [76.80285914331213, 1.0]], [0, [14.903422442424821, 1.0]], [0, [0.8422079248075275, 1.0]], [1, [1.1716775721940962, 1.0]], [1, [1.134797300043181e-05, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.30129427]
bas 1, expnt(s) = [76.80285914]
bas 2, expnt(s) = [14.90342244]
bas 3, expnt(s) = [0.84220792]
bas 4, expnt(s) = [1.17167757]
bas 5, expnt(s) = [1.1347973e-05]
CPU time:        31.76
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61730129e+03 1.41516209e+03 7.68028591e+01 6.55462825e+01
 1.49034224e+01 1.91637075e+01 8.42207925e-01 2.22115833e+00
 1.17167757e+00 3.55626846e+00 1.13479730e-05 1.92146403e-06]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.252478061656163
cond(S) = 5.391769299506624
E1 = -158.7634693673928  E_coul = 43.42711959514147
init E= -115.336349772251
    CPU time for initialize scf      0.03 sec, wall time      0.05 sec
  HOMO = -0.776716139305789  LUMO = -0.0026505632470525
  mo_energy =
[-3.36413611e+01 -2.64550689e+00 -7.76716139e-01 -7.76716139e-01
 -7.76716139e-01 -2.65056325e-03 -2.65056325e-03 -2.65056325e-03
  5.64841727e+01  6.00704177e+03]
E1 = -169.6592035689898  E_coul = 49.19089433501602
cycle= 1 E= -120.468309233974  delta_E= -5.13  |g|= 0.343  |ddm|= 0.463
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.57032
diis-c [-0.32526436  1.        ]
  HOMO = -0.234418298140493  LUMO = 2.83700274602561e-05
  mo_energy =
[-3.29063808e+01 -2.02916601e+00 -2.34418298e-01 -2.34418298e-01
 -2.34418298e-01  2.83700275e-05  2.83700275e-05  2.83700275e-05
  5.72615372e+01  6.00731361e+03]
E1 = -169.6511099227061  E_coul = 49.18260914077963
cycle= 2 E= -120.468500781926  delta_E= -0.000192  |g|= 0.0025  |ddm|= 0.00651
    CPU time for cycle= 2      0.02 sec, wall time      0.03 sec
diis-norm(errvec)=0.00220998
diis-c [-3.88578287e-06 -1.75494191e-03  1.00175494e+00]
  HOMO = -0.234676186882414  LUMO = 2.83700266645653e-05
  mo_energy =
[-3.29095715e+01 -2.02935307e+00 -2.34676187e-01 -2.34676187e-01
 -2.34676187e-01  2.83700267e-05  2.83700267e-05  2.83700267e-05
  5.72594098e+01  6.00730409e+03]
E1 = -169.65099386167336  E_coul = 49.182493027682895
cycle= 3 E= -120.46850083399  delta_E= -5.21e-08  |g|= 4.27e-05  |ddm|= 0.000107
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=4.06719e-05
diis-c [-1.40195701e-10  3.15987529e-05 -2.01396481e-02  1.02010805e+00]
  HOMO = -0.234680141869439  LUMO = 2.83700266356226e-05
  mo_energy =
[-3.29096088e+01 -2.02935573e+00 -2.34680142e-01 -2.34680142e-01
 -2.34680142e-01  2.83700266e-05  2.83700266e-05  2.83700266e-05
  5.72593890e+01  6.00730402e+03]
E1 = -169.6509924083166  E_coul = 49.182491574311236
cycle= 4 E= -120.468500834005  delta_E= -1.49e-11  |g|= 1.89e-07  |ddm|= 1.73e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.03 sec
E1 = -169.6509924083166  E_coul = 49.182491574311236
  HOMO = -0.234680133423822  LUMO = 2.83700266358035e-05
  mo_energy =
[-3.29096085e+01 -2.02935572e+00 -2.34680133e-01 -2.34680133e-01
 -2.34680133e-01  2.83700266e-05  2.83700266e-05  2.83700266e-05
  5.72593892e+01  6.00730402e+03]
E1 = -169.65099241720677  E_coul = 49.182491583201305
Extra cycle  E= -120.468500834005  delta_E= -8.53e-14  |g|= 3.26e-09  |ddm|= 4.83e-09
    CPU time for scf_cycle      0.12 sec, wall time      0.17 sec
exp = [4.61730129e+03 7.68028591e+01 1.49034224e+01 8.42207925e-01
 1.17167757e+00 1.13479730e-05]
E = -120.46850083400545
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:26:12 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.30129427        1
[INPUT] 0    0    [1    /1   ]  76.8028591433        1
[INPUT] 0    0    [1    /1   ]  14.9034224424        1
[INPUT] 0    0    [1    /1   ]  0.842207924808       1
[INPUT] 1    0    [1    /1   ]  1.17167757219        1
[INPUT] 1    0    [1    /1   ]  1.13479730004e-05      1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.301294270353, 1.0]], [0, [76.80285914331213, 1.0]], [0, [14.903422442424821, 1.0]], [0, [0.8422079248075275, 1.0]], [1, [1.1716775721940962, 1.0]], [1, [1.134797300043181e-05, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.30129427]
bas 1, expnt(s) = [76.80285914]
bas 2, expnt(s) = [14.90342244]
bas 3, expnt(s) = [0.84220792]
bas 4, expnt(s) = [1.17167757]
bas 5, expnt(s) = [1.1347973e-05]
CPU time:        32.05
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61730129e+03 1.41516209e+03 7.68028591e+01 6.55462825e+01
 1.49034224e+01 1.91637075e+01 8.42207925e-01 2.22115833e+00
 1.17167757e+00 3.55626846e+00 1.13479730e-05 1.92146403e-06]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.252478061656163
cond(S) = 5.391769299506624
E1 = -158.7634693673928  E_coul = 43.42711959514147
init E= -115.336349772251
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.776716139305789  LUMO = -0.0026505632470525
  mo_energy =
[-3.36413611e+01 -2.64550689e+00 -7.76716139e-01 -7.76716139e-01
 -7.76716139e-01 -2.65056325e-03 -2.65056325e-03 -2.65056325e-03
  5.64841727e+01  6.00704177e+03]
E1 = -169.6592035689898  E_coul = 49.19089433501602
cycle= 1 E= -120.468309233974  delta_E= -5.13  |g|= 0.343  |ddm|= 0.463
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.57032
diis-c [-0.32526436  1.        ]
  HOMO = -0.234418298140493  LUMO = 2.83700274602561e-05
  mo_energy =
[-3.29063808e+01 -2.02916601e+00 -2.34418298e-01 -2.34418298e-01
 -2.34418298e-01  2.83700275e-05  2.83700275e-05  2.83700275e-05
  5.72615372e+01  6.00731361e+03]
E1 = -169.6511099227061  E_coul = 49.18260914077963
cycle= 2 E= -120.468500781926  delta_E= -0.000192  |g|= 0.0025  |ddm|= 0.00651
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00220998
diis-c [-3.88578287e-06 -1.75494191e-03  1.00175494e+00]
  HOMO = -0.234676186882414  LUMO = 2.83700266645653e-05
  mo_energy =
[-3.29095715e+01 -2.02935307e+00 -2.34676187e-01 -2.34676187e-01
 -2.34676187e-01  2.83700267e-05  2.83700267e-05  2.83700267e-05
  5.72594098e+01  6.00730409e+03]
E1 = -169.65099386167336  E_coul = 49.182493027682895
cycle= 3 E= -120.46850083399  delta_E= -5.21e-08  |g|= 4.27e-05  |ddm|= 0.000107
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=4.06719e-05
diis-c [-1.40195701e-10  3.15987529e-05 -2.01396481e-02  1.02010805e+00]
  HOMO = -0.234680141869439  LUMO = 2.83700266356226e-05
  mo_energy =
[-3.29096088e+01 -2.02935573e+00 -2.34680142e-01 -2.34680142e-01
 -2.34680142e-01  2.83700266e-05  2.83700266e-05  2.83700266e-05
  5.72593890e+01  6.00730402e+03]
E1 = -169.6509924083166  E_coul = 49.182491574311236
cycle= 4 E= -120.468500834005  delta_E= -1.49e-11  |g|= 1.89e-07  |ddm|= 1.73e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -169.6509924083166  E_coul = 49.182491574311236
  HOMO = -0.234680133423822  LUMO = 2.83700266358035e-05
  mo_energy =
[-3.29096085e+01 -2.02935572e+00 -2.34680133e-01 -2.34680133e-01
 -2.34680133e-01  2.83700266e-05  2.83700266e-05  2.83700266e-05
  5.72593892e+01  6.00730402e+03]
E1 = -169.65099241720677  E_coul = 49.182491583201305
Extra cycle  E= -120.468500834005  delta_E= -8.53e-14  |g|= 3.26e-09  |ddm|= 4.83e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 5.391769299506624
E1 = -169.65099241720677  E_coul = 49.182491583201305
init E= -120.468500834005
    CPU time for initialize scf      0.05 sec, wall time      0.06 sec
  HOMO = -0.23468013333656  LUMO = 2.83700266358025e-05
  mo_energy =
[-3.29096085e+01 -2.02935572e+00 -2.34680133e-01 -2.34680133e-01
 -2.34680133e-01  2.83700266e-05  2.83700266e-05  2.83700266e-05
  5.72593892e+01  6.00730402e+03]
E1 = -169.65099241733446  E_coul = 49.182491583329025
cycle= 1 E= -120.468500834005  delta_E= 1.42e-14  |g|= 6.1e-11  |ddm|= 7.34e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -169.65099241733446  E_coul = 49.182491583329025
  HOMO = -0.234680133336061  LUMO = 2.83700266358045e-05
  mo_energy =
[-3.29096085e+01 -2.02935572e+00 -2.34680133e-01 -2.34680133e-01
 -2.34680133e-01  2.83700266e-05  2.83700266e-05  2.83700266e-05
  5.72593892e+01  6.00730402e+03]
E1 = -169.65099241733625  E_coul = 49.18249158333083
Extra cycle  E= -120.468500834005  delta_E= 1.42e-14  |g|= 1.36e-12  |ddm|= 1.29e-12
    CPU time for scf_cycle      0.13 sec, wall time      0.14 sec
exp = [4.61730129e+03 7.68028591e+01 1.49034224e+01 8.42207925e-01
 1.17167757e+00 1.13479730e-05]
grad_E = [ 1.67969832e-04 -5.80111992e-02  3.66842678e-02 -9.06419420e-01
 -7.47792156e-01 -1.03998600e-04]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:26:16 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.27852935        1
[INPUT] 0    0    [1    /1   ]  85.7121024057        1
[INPUT] 0    0    [1    /1   ]  16.3647138344        1
[INPUT] 0    0    [1    /1   ]  0.818917345223       1
[INPUT] 1    0    [1    /1   ]  1.12729345192        1
[INPUT] 1    0    [1    /1   ]  0.000268879512304      1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.278529353316, 1.0]], [0, [85.71210240573886, 1.0]], [0, [16.36471383439588, 1.0]], [0, [0.8189173452226728, 1.0]], [1, [1.1272934519178894, 1.0]], [1, [0.0002688795123037441, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.27852935]
bas 1, expnt(s) = [85.71210241]
bas 2, expnt(s) = [16.36471383]
bas 3, expnt(s) = [0.81891735]
bas 4, expnt(s) = [1.12729345]
bas 5, expnt(s) = [0.00026888]
CPU time:        35.56
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61727853e+03 1.41515685e+03 8.57121024e+01 7.11699458e+01
 1.63647138e+01 2.05563657e+01 8.18917345e-01 2.17492896e+00
 1.12729345e+00 3.38868050e+00 2.68879512e-04 1.00445742e-04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.234747369096024
cond(S) = 5.200059214551519
E1 = -158.9834026068749  E_coul = 42.693369241399324
init E= -116.290033365476
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.823386938762166  LUMO = -0.0126771114152883
  mo_energy =
[-3.39572353e+01 -2.71893389e+00 -8.23386939e-01 -8.23386939e-01
 -8.23386939e-01 -1.26771114e-02 -1.26771114e-02 -1.26771114e-02
  6.59633614e+01  6.02936415e+03]
E1 = -169.35879441287688  E_coul = 48.57426607195206
cycle= 1 E= -120.784528340925  delta_E= -4.49  |g|= 0.318  |ddm|= 0.458
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.523518
diis-c [-0.27407109  1.        ]
  HOMO = -0.276631315848558  LUMO = 0.000672427399153157
  mo_energy =
[-3.31804583e+01 -2.09485100e+00 -2.76631316e-01 -2.76631316e-01
 -2.76631316e-01  6.72427399e-04  6.72427399e-04  6.72427399e-04
  6.67775773e+01  6.02981881e+03]
E1 = -169.35306766044485  E_coul = 48.568392894475544
cycle= 2 E= -120.784674765969  delta_E= -0.000146  |g|= 0.00217  |ddm|= 0.00578
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00203843
diis-c [-3.25574867e-06 -1.81486711e-03  1.00181487e+00]
  HOMO = -0.276817298479708  LUMO = 0.000672420573585963
  mo_energy =
[-3.31827056e+01 -2.09498880e+00 -2.76817298e-01 -2.76817298e-01
 -2.76817298e-01  6.72420574e-04  6.72420574e-04  6.72420574e-04
  6.67760684e+01  6.02981258e+03]
E1 = -169.35299368403858  E_coul = 48.56831888271359
cycle= 3 E= -120.784674801325  delta_E= -3.54e-08  |g|= 3.35e-05  |ddm|= 0.000185
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.37047e-05
diis-c [-7.56928676e-11  2.90789427e-05 -1.83663633e-02  1.01833728e+00]
  HOMO = -0.276820032290545  LUMO = 0.000672419393409244
  mo_energy =
[-3.31827277e+01 -2.09499078e+00 -2.76820032e-01 -2.76820032e-01
 -2.76820032e-01  6.72419393e-04  6.72419393e-04  6.72419393e-04
  6.67760573e+01  6.02981255e+03]
E1 = -169.3529927867645  E_coul = 48.56831798542391
cycle= 4 E= -120.784674801341  delta_E= -1.56e-11  |g|= 1.55e-07  |ddm|= 1.05e-05
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -169.3529927867645  E_coul = 48.56831798542391
  HOMO = -0.27682003767508  LUMO = 0.000672419339424551
  mo_energy =
[-3.31827275e+01 -2.09499079e+00 -2.76820038e-01 -2.76820038e-01
 -2.76820038e-01  6.72419339e-04  6.72419339e-04  6.72419339e-04
  6.67760575e+01  6.02981255e+03]
E1 = -169.35299278436952  E_coul = 48.56831798302892
Extra cycle  E= -120.784674801341  delta_E=    0  |g|= 6.07e-09  |ddm|= 4.66e-07
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [4.61727853e+03 8.57121024e+01 1.63647138e+01 8.18917345e-01
 1.12729345e+00 2.68879512e-04]
E = -120.7846748013406
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:26:16 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.27852935        1
[INPUT] 0    0    [1    /1   ]  85.7121024057        1
[INPUT] 0    0    [1    /1   ]  16.3647138344        1
[INPUT] 0    0    [1    /1   ]  0.818917345223       1
[INPUT] 1    0    [1    /1   ]  1.12729345192        1
[INPUT] 1    0    [1    /1   ]  0.000268879512304      1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.278529353316, 1.0]], [0, [85.71210240573886, 1.0]], [0, [16.36471383439588, 1.0]], [0, [0.8189173452226728, 1.0]], [1, [1.1272934519178894, 1.0]], [1, [0.0002688795123037441, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.27852935]
bas 1, expnt(s) = [85.71210241]
bas 2, expnt(s) = [16.36471383]
bas 3, expnt(s) = [0.81891735]
bas 4, expnt(s) = [1.12729345]
bas 5, expnt(s) = [0.00026888]
CPU time:        35.85
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61727853e+03 1.41515685e+03 8.57121024e+01 7.11699458e+01
 1.63647138e+01 2.05563657e+01 8.18917345e-01 2.17492896e+00
 1.12729345e+00 3.38868050e+00 2.68879512e-04 1.00445742e-04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.234747369096024
cond(S) = 5.200059214551519
E1 = -158.9834026068749  E_coul = 42.693369241399324
init E= -116.290033365476
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.823386938762166  LUMO = -0.0126771114152883
  mo_energy =
[-3.39572353e+01 -2.71893389e+00 -8.23386939e-01 -8.23386939e-01
 -8.23386939e-01 -1.26771114e-02 -1.26771114e-02 -1.26771114e-02
  6.59633614e+01  6.02936415e+03]
E1 = -169.35879441287688  E_coul = 48.57426607195206
cycle= 1 E= -120.784528340925  delta_E= -4.49  |g|= 0.318  |ddm|= 0.458
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.523518
diis-c [-0.27407109  1.        ]
  HOMO = -0.276631315848558  LUMO = 0.000672427399153157
  mo_energy =
[-3.31804583e+01 -2.09485100e+00 -2.76631316e-01 -2.76631316e-01
 -2.76631316e-01  6.72427399e-04  6.72427399e-04  6.72427399e-04
  6.67775773e+01  6.02981881e+03]
E1 = -169.35306766044485  E_coul = 48.568392894475544
cycle= 2 E= -120.784674765969  delta_E= -0.000146  |g|= 0.00217  |ddm|= 0.00578
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00203843
diis-c [-3.25574867e-06 -1.81486711e-03  1.00181487e+00]
  HOMO = -0.276817298479708  LUMO = 0.000672420573585963
  mo_energy =
[-3.31827056e+01 -2.09498880e+00 -2.76817298e-01 -2.76817298e-01
 -2.76817298e-01  6.72420574e-04  6.72420574e-04  6.72420574e-04
  6.67760684e+01  6.02981258e+03]
E1 = -169.35299368403858  E_coul = 48.56831888271359
cycle= 3 E= -120.784674801325  delta_E= -3.54e-08  |g|= 3.35e-05  |ddm|= 0.000185
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=3.37047e-05
diis-c [-7.56928676e-11  2.90789427e-05 -1.83663633e-02  1.01833728e+00]
  HOMO = -0.276820032290545  LUMO = 0.000672419393409244
  mo_energy =
[-3.31827277e+01 -2.09499078e+00 -2.76820032e-01 -2.76820032e-01
 -2.76820032e-01  6.72419393e-04  6.72419393e-04  6.72419393e-04
  6.67760573e+01  6.02981255e+03]
E1 = -169.3529927867645  E_coul = 48.56831798542391
cycle= 4 E= -120.784674801341  delta_E= -1.56e-11  |g|= 1.55e-07  |ddm|= 1.05e-05
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -169.3529927867645  E_coul = 48.56831798542391
  HOMO = -0.27682003767508  LUMO = 0.000672419339424551
  mo_energy =
[-3.31827275e+01 -2.09499079e+00 -2.76820038e-01 -2.76820038e-01
 -2.76820038e-01  6.72419339e-04  6.72419339e-04  6.72419339e-04
  6.67760575e+01  6.02981255e+03]
E1 = -169.35299278436952  E_coul = 48.56831798302892
Extra cycle  E= -120.784674801341  delta_E=    0  |g|= 6.07e-09  |ddm|= 4.66e-07
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 5.200059214551519
E1 = -169.35299278436952  E_coul = 48.56831798302892
init E= -120.784674801341
    CPU time for initialize scf      0.05 sec, wall time      0.06 sec
  HOMO = -0.276820038313514  LUMO = 0.000672419336053512
  mo_energy =
[-3.31827275e+01 -2.09499079e+00 -2.76820038e-01 -2.76820038e-01
 -2.76820038e-01  6.72419336e-04  6.72419336e-04  6.72419336e-04
  6.67760575e+01  6.02981255e+03]
E1 = -169.35299278394132  E_coul = 48.568317982600774
cycle= 1 E= -120.784674801341  delta_E= 5.68e-14  |g|= 3.63e-10  |ddm|= 2.93e-08
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -169.35299278394132  E_coul = 48.568317982600774
  HOMO = -0.276820038357034  LUMO = 0.000672419335841601
  mo_energy =
[-3.31827275e+01 -2.09499079e+00 -2.76820038e-01 -2.76820038e-01
 -2.76820038e-01  6.72419336e-04  6.72419336e-04  6.72419336e-04
  6.67760575e+01  6.02981255e+03]
E1 = -169.3529927839105  E_coul = 48.56831798257005
Extra cycle  E= -120.78467480134  delta_E= 8.53e-14  |g|= 2.27e-11  |ddm|= 1.84e-09
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
exp = [4.61727853e+03 8.57121024e+01 1.63647138e+01 8.18917345e-01
 1.12729345e+00 2.68879512e-04]
grad_E = [ 1.66390204e-04 -4.74371923e-02  8.40335728e-02 -1.16234176e+00
 -1.01563701e+00 -1.05194215e-02]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:26:20 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.24085467        1
[INPUT] 0    0    [1    /1   ]  100.497366734        1
[INPUT] 0    0    [1    /1   ]  18.2176372614        1
[INPUT] 0    0    [1    /1   ]  0.867456730387       1
[INPUT] 1    0    [1    /1   ]  1.14115793964        1
[INPUT] 1    0    [1    /1   ]  0.0242390877818      1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.240854667767, 1.0]], [0, [100.49736673444828, 1.0]], [0, [18.21763726138825, 1.0]], [0, [0.8674567303865675, 1.0]], [1, [1.14115793963712, 1.0]], [1, [0.024239087781820323, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.24085467]
bas 1, expnt(s) = [100.49736673]
bas 2, expnt(s) = [18.21763726]
bas 3, expnt(s) = [0.86745673]
bas 4, expnt(s) = [1.14115794]
bas 5, expnt(s) = [0.02423909]
CPU time:        39.76
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61724085e+03 1.41514819e+03 1.00497367e+02 8.01919983e+01
 1.82176373e+01 2.22784033e+01 8.67456730e-01 2.27091506e+00
 1.14115794e+00 3.44085671e+00 2.42390878e-02 2.79016401e-02]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.25292062021666
cond(S) = 4.932549055299398
E1 = -160.8492758949435  E_coul = 43.11888391825832
init E= -117.730391976685
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.799362440168712  LUMO = -0.055669471768178
  mo_energy =
[-3.40365967e+01 -2.74137704e+00 -7.99362440e-01 -7.99362440e-01
 -7.99362440e-01 -5.56694718e-02 -5.56694718e-02 -5.56694718e-02
  8.14683746e+01  6.06744372e+03]
E1 = -170.15889392377775  E_coul = 48.87422664271298
cycle= 1 E= -121.284667281065  delta_E= -3.55  |g|= 0.308  |ddm|= 0.435
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.49241
diis-c [-0.2424681  1.       ]
  HOMO = -0.281913750921492  LUMO = 0.0747941377699943
  mo_energy =
[-3.32392760e+01 -2.13462057e+00 -2.81913751e-01 -2.81913751e-01
 -2.81913751e-01  7.47941378e-02  7.47941378e-02  7.47941378e-02
  8.23017066e+01  6.06812092e+03]
E1 = -168.83140757154345  E_coul = 47.515562272189484
cycle= 2 E= -121.315845299354  delta_E= -0.0312  |g|= 0.0189  |ddm|= 0.569
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.0197992
diis-c [-3.19361831e-04  1.70258288e-02  9.82974171e-01]
  HOMO = -0.394434664320687  LUMO = 0.0666051555040186
  mo_energy =
[-3.34364865e+01 -2.26881445e+00 -3.94434664e-01 -3.94434664e-01
 -3.94434664e-01  6.66051555e-02  6.66051555e-02  6.66051555e-02
  8.21058625e+01  6.06792041e+03]
E1 = -168.92546770094157  E_coul = 47.609538972731286
cycle= 3 E= -121.31592872821  delta_E= -8.34e-05  |g|= 0.00176  |ddm|= 0.0292
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00235616
diis-c [-1.15289588e-06 -5.18415456e-04  9.06517103e-02  9.09866705e-01]
  HOMO = -0.389311343049974  LUMO = 0.0671274560559409
  mo_energy =
[-3.34272893e+01 -2.26256159e+00 -3.89311343e-01 -3.89311343e-01
 -3.89311343e-01  6.71274561e-02  6.71274561e-02  6.71274561e-02
  8.21149738e+01  6.06792998e+03]
E1 = -168.9112168796318  E_coul = 47.595285755828264
cycle= 4 E= -121.315931123804  delta_E= -2.4e-06  |g|= 0.000124  |ddm|= 0.00449
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00015417
diis-c [-3.91957411e-11  2.82559977e-07 -2.79933265e-03  4.14776855e-02
  9.61321365e-01]
  HOMO = -0.389669573659093  LUMO = 0.0670933768359842
  mo_energy =
[-3.34279096e+01 -2.26299701e+00 -3.89669574e-01 -3.89669574e-01
 -3.89669574e-01  6.70933768e-02  6.70933768e-02  6.70933768e-02
  8.21143534e+01  6.06792938e+03]
E1 = -168.91203205147139  E_coul = 47.59610091882805
cycle= 5 E= -121.315931132643  delta_E= -8.84e-09  |g|= 9.22e-08  |ddm|= 0.000256
    CPU time for cycle= 5      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=1.09127e-07
diis-c [-8.12932284e-16 -3.68350415e-08  4.17621632e-05 -5.69073064e-04
 -1.39694139e-02  1.01449676e+00]
  HOMO = -0.389669494536229  LUMO = 0.0670933775040752
  mo_energy =
[-3.34279095e+01 -2.26299692e+00 -3.89669495e-01 -3.89669495e-01
 -3.89669495e-01  6.70933775e-02  6.70933775e-02  6.70933775e-02
  8.21143534e+01  6.06792938e+03]
E1 = -168.91203237424148  E_coul = 47.59610124159812
cycle= 6 E= -121.315931132643  delta_E= -2.84e-14  |g|= 2.26e-10  |ddm|= 1.03e-07
    CPU time for cycle= 6      0.02 sec, wall time      0.02 sec
E1 = -168.91203237424148  E_coul = 47.59610124159812
  HOMO = -0.389669495060891  LUMO = 0.067093377485996
  mo_energy =
[-3.34279095e+01 -2.26299692e+00 -3.89669495e-01 -3.89669495e-01
 -3.89669495e-01  6.70933775e-02  6.70933775e-02  6.70933775e-02
  8.21143534e+01  6.06792938e+03]
E1 = -168.91203237311842  E_coul = 47.59610124047508
Extra cycle  E= -121.315931132643  delta_E= 1.42e-14  |g|= 2.65e-11  |ddm|= 3.54e-10
    CPU time for scf_cycle      0.16 sec, wall time      0.17 sec
exp = [4.61724085e+03 1.00497367e+02 1.82176373e+01 8.67456730e-01
 1.14115794e+00 2.42390878e-02]
E = -121.31593113264334
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:26:20 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.24085467        1
[INPUT] 0    0    [1    /1   ]  100.497366734        1
[INPUT] 0    0    [1    /1   ]  18.2176372614        1
[INPUT] 0    0    [1    /1   ]  0.867456730387       1
[INPUT] 1    0    [1    /1   ]  1.14115793964        1
[INPUT] 1    0    [1    /1   ]  0.0242390877818      1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.240854667767, 1.0]], [0, [100.49736673444828, 1.0]], [0, [18.21763726138825, 1.0]], [0, [0.8674567303865675, 1.0]], [1, [1.14115793963712, 1.0]], [1, [0.024239087781820323, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.24085467]
bas 1, expnt(s) = [100.49736673]
bas 2, expnt(s) = [18.21763726]
bas 3, expnt(s) = [0.86745673]
bas 4, expnt(s) = [1.14115794]
bas 5, expnt(s) = [0.02423909]
CPU time:        40.17
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61724085e+03 1.41514819e+03 1.00497367e+02 8.01919983e+01
 1.82176373e+01 2.22784033e+01 8.67456730e-01 2.27091506e+00
 1.14115794e+00 3.44085671e+00 2.42390878e-02 2.79016401e-02]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.25292062021666
cond(S) = 4.932549055299398
E1 = -160.8492758949435  E_coul = 43.11888391825832
init E= -117.730391976685
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.799362440168712  LUMO = -0.055669471768178
  mo_energy =
[-3.40365967e+01 -2.74137704e+00 -7.99362440e-01 -7.99362440e-01
 -7.99362440e-01 -5.56694718e-02 -5.56694718e-02 -5.56694718e-02
  8.14683746e+01  6.06744372e+03]
E1 = -170.15889392377775  E_coul = 48.87422664271298
cycle= 1 E= -121.284667281065  delta_E= -3.55  |g|= 0.308  |ddm|= 0.435
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.49241
diis-c [-0.2424681  1.       ]
  HOMO = -0.281913750921492  LUMO = 0.0747941377699943
  mo_energy =
[-3.32392760e+01 -2.13462057e+00 -2.81913751e-01 -2.81913751e-01
 -2.81913751e-01  7.47941378e-02  7.47941378e-02  7.47941378e-02
  8.23017066e+01  6.06812092e+03]
E1 = -168.83140757154345  E_coul = 47.515562272189484
cycle= 2 E= -121.315845299354  delta_E= -0.0312  |g|= 0.0189  |ddm|= 0.569
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.0197992
diis-c [-3.19361831e-04  1.70258288e-02  9.82974171e-01]
  HOMO = -0.394434664320687  LUMO = 0.0666051555040186
  mo_energy =
[-3.34364865e+01 -2.26881445e+00 -3.94434664e-01 -3.94434664e-01
 -3.94434664e-01  6.66051555e-02  6.66051555e-02  6.66051555e-02
  8.21058625e+01  6.06792041e+03]
E1 = -168.92546770094157  E_coul = 47.609538972731286
cycle= 3 E= -121.31592872821  delta_E= -8.34e-05  |g|= 0.00176  |ddm|= 0.0292
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00235616
diis-c [-1.15289588e-06 -5.18415456e-04  9.06517103e-02  9.09866705e-01]
  HOMO = -0.389311343049974  LUMO = 0.0671274560559409
  mo_energy =
[-3.34272893e+01 -2.26256159e+00 -3.89311343e-01 -3.89311343e-01
 -3.89311343e-01  6.71274561e-02  6.71274561e-02  6.71274561e-02
  8.21149738e+01  6.06792998e+03]
E1 = -168.9112168796318  E_coul = 47.595285755828264
cycle= 4 E= -121.315931123804  delta_E= -2.4e-06  |g|= 0.000124  |ddm|= 0.00449
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00015417
diis-c [-3.91957411e-11  2.82559977e-07 -2.79933265e-03  4.14776855e-02
  9.61321365e-01]
  HOMO = -0.389669573659093  LUMO = 0.0670933768359842
  mo_energy =
[-3.34279096e+01 -2.26299701e+00 -3.89669574e-01 -3.89669574e-01
 -3.89669574e-01  6.70933768e-02  6.70933768e-02  6.70933768e-02
  8.21143534e+01  6.06792938e+03]
E1 = -168.91203205147139  E_coul = 47.59610091882805
cycle= 5 E= -121.315931132643  delta_E= -8.84e-09  |g|= 9.22e-08  |ddm|= 0.000256
    CPU time for cycle= 5      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=1.09127e-07
diis-c [-8.12932284e-16 -3.68350415e-08  4.17621632e-05 -5.69073064e-04
 -1.39694139e-02  1.01449676e+00]
  HOMO = -0.389669494536229  LUMO = 0.0670933775040752
  mo_energy =
[-3.34279095e+01 -2.26299692e+00 -3.89669495e-01 -3.89669495e-01
 -3.89669495e-01  6.70933775e-02  6.70933775e-02  6.70933775e-02
  8.21143534e+01  6.06792938e+03]
E1 = -168.91203237424148  E_coul = 47.59610124159812
cycle= 6 E= -121.315931132643  delta_E= -2.84e-14  |g|= 2.26e-10  |ddm|= 1.03e-07
    CPU time for cycle= 6      0.02 sec, wall time      0.02 sec
E1 = -168.91203237424148  E_coul = 47.59610124159812
  HOMO = -0.389669495060891  LUMO = 0.067093377485996
  mo_energy =
[-3.34279095e+01 -2.26299692e+00 -3.89669495e-01 -3.89669495e-01
 -3.89669495e-01  6.70933775e-02  6.70933775e-02  6.70933775e-02
  8.21143534e+01  6.06792938e+03]
E1 = -168.91203237311842  E_coul = 47.59610124047508
Extra cycle  E= -121.315931132643  delta_E= 1.42e-14  |g|= 2.65e-11  |ddm|= 3.54e-10
    CPU time for scf_cycle      0.15 sec, wall time      0.16 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.932549055299398
E1 = -168.91203237311842  E_coul = 47.59610124047508
init E= -121.315931132643
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.389669495154804  LUMO = 0.0670933774772335
  mo_energy =
[-3.34279095e+01 -2.26299692e+00 -3.89669495e-01 -3.89669495e-01
 -3.89669495e-01  6.70933775e-02  6.70933775e-02  6.70933775e-02
  8.21143534e+01  6.06792938e+03]
E1 = -168.9120323733204  E_coul = 47.59610124067698
cycle= 1 E= -121.315931132643  delta_E= -7.11e-14  |g|= 4.4e-12  |ddm|= 6.35e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -168.9120323733204  E_coul = 47.59610124067698
  HOMO = -0.389669495137922  LUMO = 0.067093377478807
  mo_energy =
[-3.34279095e+01 -2.26299692e+00 -3.89669495e-01 -3.89669495e-01
 -3.89669495e-01  6.70933775e-02  6.70933775e-02  6.70933775e-02
  8.21143534e+01  6.06792938e+03]
E1 = -168.91203237328386  E_coul = 47.596101240640536
Extra cycle  E= -121.315931132643  delta_E= 8.53e-14  |g|= 8.71e-13  |ddm|= 1.15e-11
    CPU time for scf_cycle      0.15 sec, wall time      0.15 sec
exp = [4.61724085e+03 1.00497367e+02 1.82176373e+01 8.67456730e-01
 1.14115794e+00 2.42390878e-02]
grad_E = [ 1.61019980e-04 -3.13853908e-02  1.14149343e-01 -1.03807198e+00
 -1.06510635e+00 -5.74040544e+00]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:26:24 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4587.75923679        1
[INPUT] 0    0    [1    /1   ]  11670.4740057        1
[INPUT] 0    0    [1    /1   ]  1467.29462396        1
[INPUT] 0    0    [1    /1   ]  38.8529093364        1
[INPUT] 1    0    [1    /1   ]  12.1372457392        1
[INPUT] 1    0    [1    /1   ]  40.7022527795        1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4587.759236791982, 1.0]], [0, [11670.474005671977, 1.0]], [0, [1467.2946239583864, 1.0]], [0, [38.852909336437506, 1.0]], [1, [12.137245739191417, 1.0]], [1, [40.70225277954493, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4587.75923679]
bas 1, expnt(s) = [11670.47400567]
bas 2, expnt(s) = [1467.29462396]
bas 3, expnt(s) = [38.85290934]
bas 4, expnt(s) = [12.13724574]
bas 5, expnt(s) = [40.70225278]
CPU time:        43.90
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [    0.             0.             0.             0.
     0.             0.             0.             0.
     0.             0.             0.             0.
     0.             0.             0.             0.
     0.             0.             0.             0.
     0.             0.             0.             0.
  4587.75923679  1408.36585706 11670.47400567  2836.81749071
  1467.29462396   598.96717009    38.85290934    39.31720915
    12.13724574    66.08982073    40.70225278   299.92139779]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 3.309525268670719
cond(S) = 44.54697039907115
E1 = -70.92596905994307  E_coul = 16.695804529509182
init E= -54.2301645304339
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec

WARN: HOMO 78.8130405890786 == LUMO 78.8130405890786

  mo_energy =
[-3.17804847e+01  2.98933157e+00  2.98933157e+00  2.98933157e+00
  7.88130406e+01  7.88130406e+01  7.88130406e+01  1.47393017e+03
  9.35733107e+03  3.41007675e+04]
E1 = 4.608831973602491  E_coul = 154.18411176649775
cycle= 1 E= 158.7929437401  delta_E=  213  |g|= 8.94  |ddm|= 5.58
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=9.81955
diis-c [-96.42361244   1.        ]
  HOMO = 99.6866058754785  LUMO = 103.388051637778
  mo_energy =
[-4.92712488e+00  2.04120672e+01  2.04120672e+01  2.06790590e+01
  9.96866059e+01  1.03388052e+02  1.03388052e+02  1.50522993e+03
  9.38865581e+03  3.41320739e+04]
E1 = 5.680243716303447  E_coul = 152.65394251231345
cycle= 2 E= 158.334186228617  delta_E= -0.459  |g|= 0.152  |ddm|= 0.27
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.168657
diis-c [-0.01410746 -0.01234548  1.01234548]
  HOMO = 99.4500802562448  LUMO = 103.198222310321
  mo_energy =
[-5.20781251e+00  2.03325916e+01  2.03325916e+01  2.05770620e+01
  9.94500803e+01  1.03198222e+02  1.03198222e+02  1.50481172e+03
  9.38822308e+03  3.41316376e+04]
E1 = 5.704471677719508  E_coul = 152.62959010395954
cycle= 3 E= 158.334061781679  delta_E= -0.000124  |g|= 0.000939  |ddm|= 0.00455
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00123375
diis-c [-1.82488150e-08  7.43356025e-05 -9.80568088e-03  1.00973135e+00]
  HOMO = 99.4492163006193  LUMO = 103.197468846884
  mo_energy =
[-5.20882696e+00  2.03323525e+01  2.03323525e+01  2.05766703e+01
  9.94492163e+01  1.03197469e+02  1.03197469e+02  1.50481050e+03
  9.38822214e+03  3.41316368e+04]
E1 = 5.704599247515211  E_coul = 152.6294625306666
cycle= 4 E= 158.334061778182  delta_E= -3.5e-09  |g|= 4.88e-07  |ddm|= 2.4e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=5.23989e-07
diis-c [-1.94552118e-15 -2.25939552e-08  7.17248768e-06 -4.82283287e-04
  1.00047513e+00]
  HOMO = 99.4492157332488  LUMO = 103.197468677392
  mo_energy =
[-5.20882770e+00  2.03323520e+01  2.03323520e+01  2.05766701e+01
  9.94492157e+01  1.03197469e+02  1.03197469e+02  1.50481050e+03
  9.38822213e+03  3.41316368e+04]
E1 = 5.70459916741293  E_coul = 152.62946261076897
cycle= 5 E= 158.334061778182  delta_E= 1.14e-13  |g|= 1.39e-10  |ddm|= 1.5e-08
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = 5.70459916741293  E_coul = 152.62946261076897
  HOMO = 99.4492157334025  LUMO = 103.197468677432
  mo_energy =
[-5.20882770e+00  2.03323520e+01  2.03323520e+01  2.05766701e+01
  9.94492157e+01  1.03197469e+02  1.03197469e+02  1.50481050e+03
  9.38822213e+03  3.41316368e+04]
E1 = 5.704599167435963  E_coul = 152.62946261074595
Extra cycle  E= 158.334061778182  delta_E=    0  |g|= 3.47e-12  |ddm|= 4.27e-12
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
exp = [ 4587.75923679 11670.47400567  1467.29462396    38.85290934
    12.13724574    40.70225278]
E = 158.3340617781819
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:26:25 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4607.9096767         1
[INPUT] 0    0    [1    /1   ]  3762.49147815        1
[INPUT] 0    0    [1    /1   ]  476.862590304        1
[INPUT] 0    0    [1    /1   ]  12.8901693169        1
[INPUT] 1    0    [1    /1   ]  4.62151144658        1
[INPUT] 1    0    [1    /1   ]  12.8991697166        1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4607.909676703873, 1.0]], [0, [3762.491478146595, 1.0]], [0, [476.8625903037966, 1.0]], [0, [12.890169316905455, 1.0]], [1, [4.621511446577006, 1.0]], [1, [12.899169716583714, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4607.9096767]
bas 1, expnt(s) = [3762.49147815]
bas 2, expnt(s) = [476.8625903]
bas 3, expnt(s) = [12.89016932]
bas 4, expnt(s) = [4.62151145]
bas 5, expnt(s) = [12.89916972]
CPU time:        44.21
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [   0.            0.            0.            0.            0.
    0.            0.            0.            0.            0.
    0.            0.            0.            0.            0.
    0.            0.            0.            0.            0.
    0.            0.            0.            0.         4607.9096767
 1413.00270224 3762.49147815 1213.72882995  476.8625903   257.81605837
   12.89016932   17.18735276    4.62151145   19.76807745   12.89916972
   71.31593634]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 5.342601709664642
cond(S) = 424.773443244455
E1 = -1.5078287092169322  E_coul = 25.292764719299996
init E= 23.7849360100831
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec

WARN: HOMO 19.1591233534649 == LUMO 19.1591233534649

  mo_energy =
[-2.92140891e+01 -2.54101364e+00 -2.54101364e+00 -2.54101364e+00
  1.91591234e+01  1.91591234e+01  1.91591234e+01  4.02281912e+02
  4.55445068e+03  1.73024922e+04]
E1 = -135.50616932001523  E_coul = 94.78766330908425
cycle= 1 E= -40.718506010931  delta_E= -64.5  |g|=  4.9  |ddm|= 6.85
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=5.14747
diis-c [-26.4964964   1.       ]
  HOMO = 27.511971972317  LUMO = 29.4572117706772
  mo_energy =
[-1.74511586e+01  5.53700220e+00  5.53700220e+00  5.69952786e+00
  2.75119720e+01  2.94572118e+01  2.94572118e+01  4.15328612e+02
  4.56524914e+03  1.73128608e+04]
E1 = -134.08599474197538  E_coul = 92.9595186467424
cycle= 2 E= -41.126476095233  delta_E= -0.408  |g|= 0.118  |ddm|= 0.52
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.134698
diis-c [-0.01802346 -0.00213531  1.00213531]
  HOMO = 27.2689733598889  LUMO = 29.2655873933133
  mo_energy =
[-1.77749765e+01  5.42825231e+00  5.42825231e+00  5.56396771e+00
  2.72689734e+01  2.92655874e+01  2.92655874e+01  4.14827311e+02
  4.56471313e+03  1.73123185e+04]
E1 = -134.0494612724721  E_coul = 92.92279682252833
cycle= 3 E= -41.1266644499438  delta_E= -0.000188  |g|= 0.00305  |ddm|= 0.0115
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00391776
diis-c [-1.61309428e-07  1.38398397e-04 -2.98932950e-02  1.02975490e+00]
  HOMO = 27.264473930261  LUMO = 29.2618967279337
  mo_energy =
[-1.77809443e+01  5.42635765e+00  5.42635765e+00  5.56140182e+00
  2.72644739e+01  2.92618967e+01  2.92618967e+01  4.14818961e+02
  4.56470545e+03  1.73123110e+04]
E1 = -134.04861545861536  E_coul = 92.921950909616
cycle= 4 E= -41.1266645489994  delta_E= -9.91e-08  |g|= 1.6e-06  |ddm|= 0.000267
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.58607e-06
diis-c [-8.83890315e-16  1.91989915e-08  3.58689038e-05 -9.05064510e-04
  1.00086918e+00]
  HOMO = 27.2644735428204  LUMO = 29.2618973530102
  mo_energy =
[-1.77809450e+01  5.42635663e+00  5.42635663e+00  5.56140170e+00
  2.72644735e+01  2.92618974e+01  2.92618974e+01  4.14818959e+02
  4.56470544e+03  1.73123110e+04]
E1 = -134.0486160737693  E_coul = 92.92195152476988
cycle= 5 E= -41.1266645489994  delta_E= -5.68e-14  |g|= 4.4e-10  |ddm|= 1.92e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -134.0486160737693  E_coul = 92.92195152476988
  HOMO = 27.264473542581  LUMO = 29.2618973530877
  mo_energy =
[-1.77809450e+01  5.42635663e+00  5.42635663e+00  5.56140170e+00
  2.72644735e+01  2.92618974e+01  2.92618974e+01  4.14818959e+02
  4.56470544e+03  1.73123110e+04]
E1 = -134.04861607389654  E_coul = 92.92195152489708
Extra cycle  E= -41.1266645489995  delta_E= -4.26e-14  |g|= 8.2e-12  |ddm|= 3.92e-11
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [4607.9096767  3762.49147815  476.8625903    12.89016932    4.62151145
   12.89916972]
E = -41.12666454899946
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:26:25 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4614.18190834        1
[INPUT] 0    0    [1    /1   ]  1300.97210557        1
[INPUT] 0    0    [1    /1   ]  168.57060438         1
[INPUT] 0    0    [1    /1   ]  4.80874180985        1
[INPUT] 1    0    [1    /1   ]  2.28208726399        1
[INPUT] 1    0    [1    /1   ]  4.24489824613        1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4614.181908342776, 1.0]], [0, [1300.972105570996, 1.0]], [0, [168.57060438015992, 1.0]], [0, [4.808741809854505, 1.0]], [1, [2.2820872639858596, 1.0]], [1, [4.244898246130231, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4614.18190834]
bas 1, expnt(s) = [1300.97210557]
bas 2, expnt(s) = [168.57060438]
bas 3, expnt(s) = [4.80874181]
bas 4, expnt(s) = [2.28208726]
bas 5, expnt(s) = [4.24489825]
CPU time:        44.50
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61418191e+03 1.41444498e+03 1.30097211e+03 5.47288110e+02
 1.68570604e+02 1.18195627e+02 4.80874181e+00 8.20424496e+00
 2.28208726e+00 8.18275789e+00 4.24489825e+00 1.77753638e+01]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 6.976579578843173
cond(S) = 18.23663129406824
E1 = 2.11850944586951  E_coul = 32.856648601197335
init E= 34.9751580470668
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec

WARN: HOMO 5.67671328506846 == LUMO 5.67671328506846

  mo_energy =
[-2.13170418e+01 -2.44327735e+00 -2.44327735e+00 -2.44327735e+00
  5.67671329e+00  5.67671329e+00  5.67671329e+00  7.75177284e+01
  1.79754716e+03  1.02029541e+04]
E1 = -137.90712055429066  E_coul = 64.06015376072067
cycle= 1 E= -73.84696679357  delta_E= -109  |g|= 1.61  |ddm|= 16.8
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.40946
diis-c [-1.98658212  1.        ]
  HOMO = 8.44432129853197  LUMO = 9.46773653587751
  mo_energy =
[-1.72459865e+01  1.24646490e+00  1.24646490e+00  1.35891048e+00
  8.44432130e+00  9.46773654e+00  9.46773654e+00  8.14892871e+01
  1.79661361e+03  1.02011723e+04]
E1 = -136.90797262977378  E_coul = 62.94454830926665
cycle= 2 E= -73.9634243205071  delta_E= -0.116  |g|= 0.0976  |ddm|= 0.647
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.135347
diis-c [-0.01543845 -0.03974644  1.03974644]
  HOMO = 8.33256839689918  LUMO = 9.38152491665045
  mo_energy =
[-1.74467279e+01  1.16347266e+00  1.16347266e+00  1.25544981e+00
  8.33256840e+00  9.38152492e+00  9.38152492e+00  8.11999335e+01
  1.79630946e+03  1.02008697e+04]
E1 = -136.87371518734534  E_coul = 62.910129124632526
cycle= 3 E= -73.9635860627128  delta_E= -0.000162  |g|= 0.000291  |ddm|= 0.0235
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000302717
diis-c [-1.36793097e-08 -1.56593149e-05 -1.98445610e-03  1.00200012e+00]
  HOMO = 8.33345299435769  LUMO = 9.38213561844359
  mo_energy =
[-1.74448578e+01  1.16421850e+00  1.16421850e+00  1.25619613e+00
  8.33345299e+00  9.38213562e+00  9.38213562e+00  8.12047559e+01
  1.79631921e+03  1.02008808e+04]
E1 = -136.8735387630508  E_coul = 62.90995269712179
cycle= 4 E= -73.963586065929  delta_E= -3.22e-09  |g|= 7.95e-06  |ddm|= 0.000115
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.07763e-05
diis-c [-9.49378837e-15  1.40722937e-07 -7.54073888e-05 -2.46492801e-03
  1.00254019e+00]
  HOMO = 8.33344392455196  LUMO = 9.38212816926677
  mo_energy =
[-1.74448740e+01  1.16421214e+00  1.16421214e+00  1.25618765e+00
  8.33344392e+00  9.38212817e+00  9.38212817e+00  8.12047329e+01
  1.79631918e+03  1.02008808e+04]
E1 = -136.87353582412194  E_coul = 62.909949758191814
cycle= 5 E= -73.9635860659301  delta_E= -1.12e-12  |g|= 5e-09  |ddm|= 2e-06
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -136.87353582412194  E_coul = 62.909949758191814
  HOMO = 8.33344391909667  LUMO = 9.38212816508512
  mo_energy =
[-1.74448740e+01  1.16421214e+00  1.16421214e+00  1.25618764e+00
  8.33344392e+00  9.38212817e+00  9.38212817e+00  8.12047329e+01
  1.79631918e+03  1.02008808e+04]
E1 = -136.8735358224106  E_coul = 62.90994975648044
Extra cycle  E= -73.9635860659301  delta_E= -1.42e-14  |g|= 2.05e-10  |ddm|= 1.17e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [4.61418191e+03 1.30097211e+03 1.68570604e+02 4.80874181e+00
 2.28208726e+00 4.24489825e+00]
E = -73.96358606593014
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:26:25 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4616.45493785        1
[INPUT] 0    0    [1    /1   ]  408.928174143        1
[INPUT] 0    0    [1    /1   ]  56.846927445         1
[INPUT] 0    0    [1    /1   ]  1.88006757505        1
[INPUT] 1    0    [1    /1   ]  1.43429009921        1
[INPUT] 1    0    [1    /1   ]  1.10862784657        1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4616.454937851434, 1.0]], [0, [408.9281741425134, 1.0]], [0, [56.846927445023724, 1.0]], [0, [1.880067575046056, 1.0]], [1, [1.434290099207146, 1.0]], [1, [1.108627846570097, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4616.45493785]
bas 1, expnt(s) = [408.92817414]
bas 2, expnt(s) = [56.84692745]
bas 3, expnt(s) = [1.88006758]
bas 4, expnt(s) = [1.4342901]
bas 5, expnt(s) = [1.10862785]
CPU time:        44.81
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61645494e+03 1.41496753e+03 4.08928174e+02 2.29747238e+02
 5.68469274e+01 5.23052487e+01 1.88006758e+00 4.05644058e+00
 1.43429010e+00 4.57910543e+00 1.10862785e+00 3.31868950e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 8.64816155553866
cond(S) = 96.75630710472475
E1 = -119.71609496176707  E_coul = 42.67345808492955
init E= -77.0426368768375
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = 0.430855326770588  LUMO = 2.37528435709221
  mo_energy =
[-2.58591493e+01 -1.11023206e+00 -1.11023206e+00 -1.11023206e+00
  4.30855327e-01  2.37528436e+00  2.37528436e+00  2.37528436e+00
  4.94956201e+02  7.07198545e+03]
E1 = -158.6103644406478  E_coul = 59.702155796795765
cycle= 1 E= -98.908208643852  delta_E= -21.9  |g|= 1.08  |ddm|= 1.15
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.639444
diis-c [-0.40888857  1.        ]
  HOMO = 2.32806068862715  LUMO = 3.60716074677432
  mo_energy =
[-2.26185663e+01  2.05923118e-01  2.05923118e-01  2.05923118e-01
  2.32806069e+00  3.60716075e+00  3.60716075e+00  3.60716075e+00
  5.00947668e+02  7.08038580e+03]
E1 = -156.84638312998683  E_coul = 57.79944788096259
cycle= 2 E= -99.0469352490242  delta_E= -0.139  |g|= 0.0251  |ddm|= 2.02
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0256347
diis-c [-4.22194355e-04  2.34213497e-02  9.76578650e-01]
  HOMO = 2.0869385478527  LUMO = 3.52173344664656
  mo_energy =
[-2.29532986e+01  8.82945423e-02  8.82945423e-02  8.82945423e-02
  2.08693855e+00  3.52173345e+00  3.52173345e+00  3.52173345e+00
  5.00580740e+02  7.08002057e+03]
E1 = -156.86464185061965  E_coul = 57.817692974502286
cycle= 3 E= -99.0469488761174  delta_E= -1.36e-05  |g|= 0.000411  |ddm|= 0.0212
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00044055
diis-c [-2.51703843e-09 -3.11288292e-05 -1.78109251e-02  1.01784205e+00]
  HOMO = 2.08359002405745  LUMO = 3.52060478710205
  mo_energy =
[-2.29579453e+01  8.66201636e-02  8.66201636e-02  8.66201636e-02
  2.08359002e+00  3.52060479e+00  3.52060479e+00  3.52060479e+00
  5.00575684e+02  7.08001570e+03]
E1 = -156.86482742158887  E_coul = 57.817878543984214
cycle= 4 E= -99.0469488776046  delta_E= -1.49e-09  |g|= 1.23e-06  |ddm|= 0.000214
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.15462e-06
diis-c [-1.96145304e-14  2.30545800e-07  3.34006942e-05 -4.34684952e-03
  1.00431322e+00]
  HOMO = 2.08357938904218  LUMO = 3.52060053452332
  mo_energy =
[-2.29579599e+01  8.66152270e-02  8.66152270e-02  8.66152270e-02
  2.08357939e+00  3.52060053e+00  3.52060053e+00  3.52060053e+00
  5.00575668e+02  7.08001569e+03]
E1 = -156.86482868457261  E_coul = 57.8178798069679
cycle= 5 E= -99.0469488776047  delta_E= -5.68e-14  |g|= 9.48e-09  |ddm|= 1.47e-06
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -156.86482868457261  E_coul = 57.8178798069679
  HOMO = 2.08357947353474  LUMO = 3.52060056805531
  mo_energy =
[-2.29579598e+01  8.66152662e-02  8.66152662e-02  8.66152662e-02
  2.08357947e+00  3.52060057e+00  3.52060057e+00  3.52060057e+00
  5.00575668e+02  7.08001569e+03]
E1 = -156.8648286747451  E_coul = 57.8178797971404
Extra cycle  E= -99.0469488776047  delta_E=    0  |g|= 1.17e-10  |ddm|= 1.14e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [4.61645494e+03 4.08928174e+02 5.68469274e+01 1.88006758e+00
 1.43429010e+00 1.10862785e+00]
E = -99.0469488776047
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:26:25 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.09700738        1
[INPUT] 0    0    [1    /1   ]  156.949822013        1
[INPUT] 0    0    [1    /1   ]  25.2880019077        1
[INPUT] 0    0    [1    /1   ]  1.0527960903         1
[INPUT] 1    0    [1    /1   ]  1.19481026532        1
[INPUT] 1    0    [1    /1   ]  0.222716044168       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.097007383834, 1.0]], [0, [156.94982201308224, 1.0]], [0, [25.28800190771843, 1.0]], [0, [1.0527960903006666, 1.0]], [1, [1.1948102653172932, 1.0]], [1, [0.22271604416820706, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.09700738]
bas 1, expnt(s) = [156.94982201]
bas 2, expnt(s) = [25.28800191]
bas 3, expnt(s) = [1.05279609]
bas 4, expnt(s) = [1.19481027]
bas 5, expnt(s) = [0.22271604]
CPU time:        45.10
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61709701e+03 1.41511513e+03 1.56949822e+02 1.12030338e+02
 2.52880019e+01 2.84905551e+01 1.05279609e+00 2.62587000e+00
 1.19481027e+00 3.64424926e+00 2.22716044e-01 4.46348185e-01]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.382264218150453
cond(S) = 4.479140214548938
E1 = -161.73517490498327  E_coul = 43.8047259769725
init E= -117.930448928011
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.883814814787314  LUMO = 0.60945188636269
  mo_energy =
[-3.36190507e+01 -2.78215403e+00 -8.83814815e-01 -8.83814815e-01
 -8.83814815e-01  6.09451886e-01  6.09451886e-01  6.09451886e-01
  1.47110234e+02  6.22718130e+03]
E1 = -168.83473099284708  E_coul = 46.95845755726546
cycle= 1 E= -121.876273435582  delta_E= -3.95  |g|= 0.341  |ddm|= 0.628
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.470816
diis-c [-0.2216675  1.       ]
  HOMO = -0.625873844316434  LUMO = 0.873070081420498
  mo_energy =
[-3.31225414e+01 -2.47063917e+00 -6.25873844e-01 -6.25873844e-01
 -6.25873844e-01  8.73070081e-01  8.73070081e-01  8.73070081e-01
  1.47815285e+02  6.22845815e+03]
E1 = -167.76180990042417  E_coul = 45.86495872416606
cycle= 2 E= -121.896851176258  delta_E= -0.0206  |g|= 0.0435  |ddm|= 0.296
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0532317
diis-c [-0.00127137  0.07765431  0.92234569]
  HOMO = -0.698016556436129  LUMO = 0.842797053278891
  mo_energy =
[-3.33008105e+01 -2.57897597e+00 -6.98016556e-01 -6.98016556e-01
 -6.98016556e-01  8.42797053e-01  8.42797053e-01  8.42797053e-01
  1.47637005e+02  6.22828100e+03]
E1 = -167.91332322878526  E_coul = 46.0160227365924
cycle= 3 E= -121.897300492193  delta_E= -0.000449  |g|= 0.00286  |ddm|= 0.0396
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0035411
diis-c [-4.10601361e-08 -2.84821504e-04  6.06413155e-02  9.39643506e-01]
  HOMO = -0.693999920180218  LUMO = 0.844679783058715
  mo_energy =
[-3.32905708e+01 -2.57278559e+00 -6.93999920e-01 -6.93999920e-01
 -6.93999920e-01  8.44679783e-01  8.44679783e-01  8.44679783e-01
  1.47647299e+02  6.22829184e+03]
E1 = -167.90373056256402  E_coul = 46.006427993577724
cycle= 4 E= -121.897302568986  delta_E= -2.08e-06  |g|= 5.63e-06  |ddm|= 0.00253
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=6.25328e-06
diis-c [-8.44089258e-14  2.48960847e-06 -8.28401873e-04 -1.10556878e-02
  1.01188160e+00]
  HOMO = -0.694011157335299  LUMO = 0.844676395969516
  mo_energy =
[-3.32905957e+01 -2.57280138e+00 -6.94011157e-01 -6.94011157e-01
 -6.94011157e-01  8.44676396e-01  8.44676396e-01  8.44676396e-01
  1.47647274e+02  6.22829182e+03]
E1 = -167.90374398325517  E_coul = 46.0064414142646
cycle= 5 E= -121.897302568991  delta_E= -4.26e-12  |g|= 3.93e-08  |ddm|= 3.52e-06
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -167.90374398325517  E_coul = 46.0064414142646
  HOMO = -0.694011160148197  LUMO = 0.844676372717902
  mo_energy =
[-3.32905957e+01 -2.57280141e+00 -6.94011160e-01 -6.94011160e-01
 -6.94011160e-01  8.44676373e-01  8.44676373e-01  8.44676373e-01
  1.47647274e+02  6.22829182e+03]
E1 = -167.90374414223675  E_coul = 46.00644157324635
Extra cycle  E= -121.89730256899  delta_E= 1.71e-13  |g|= 6.49e-09  |ddm|= 4.19e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [4.61709701e+03 1.56949822e+02 2.52880019e+01 1.05279609e+00
 1.19481027e+00 2.22716044e-01]
E = -121.8973025689904
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:26:26 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.09700738        1
[INPUT] 0    0    [1    /1   ]  156.949822013        1
[INPUT] 0    0    [1    /1   ]  25.2880019077        1
[INPUT] 0    0    [1    /1   ]  1.0527960903         1
[INPUT] 1    0    [1    /1   ]  1.19481026532        1
[INPUT] 1    0    [1    /1   ]  0.222716044168       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.097007383834, 1.0]], [0, [156.94982201308224, 1.0]], [0, [25.28800190771843, 1.0]], [0, [1.0527960903006666, 1.0]], [1, [1.1948102653172932, 1.0]], [1, [0.22271604416820706, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.09700738]
bas 1, expnt(s) = [156.94982201]
bas 2, expnt(s) = [25.28800191]
bas 3, expnt(s) = [1.05279609]
bas 4, expnt(s) = [1.19481027]
bas 5, expnt(s) = [0.22271604]
CPU time:        45.40
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61709701e+03 1.41511513e+03 1.56949822e+02 1.12030338e+02
 2.52880019e+01 2.84905551e+01 1.05279609e+00 2.62587000e+00
 1.19481027e+00 3.64424926e+00 2.22716044e-01 4.46348185e-01]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.382264218150453
cond(S) = 4.479140214548938
E1 = -161.73517490498327  E_coul = 43.8047259769725
init E= -117.930448928011
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.883814814787314  LUMO = 0.60945188636269
  mo_energy =
[-3.36190507e+01 -2.78215403e+00 -8.83814815e-01 -8.83814815e-01
 -8.83814815e-01  6.09451886e-01  6.09451886e-01  6.09451886e-01
  1.47110234e+02  6.22718130e+03]
E1 = -168.83473099284708  E_coul = 46.95845755726546
cycle= 1 E= -121.876273435582  delta_E= -3.95  |g|= 0.341  |ddm|= 0.628
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.470816
diis-c [-0.2216675  1.       ]
  HOMO = -0.625873844316434  LUMO = 0.873070081420498
  mo_energy =
[-3.31225414e+01 -2.47063917e+00 -6.25873844e-01 -6.25873844e-01
 -6.25873844e-01  8.73070081e-01  8.73070081e-01  8.73070081e-01
  1.47815285e+02  6.22845815e+03]
E1 = -167.76180990042417  E_coul = 45.86495872416606
cycle= 2 E= -121.896851176258  delta_E= -0.0206  |g|= 0.0435  |ddm|= 0.296
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0532317
diis-c [-0.00127137  0.07765431  0.92234569]
  HOMO = -0.698016556436129  LUMO = 0.842797053278891
  mo_energy =
[-3.33008105e+01 -2.57897597e+00 -6.98016556e-01 -6.98016556e-01
 -6.98016556e-01  8.42797053e-01  8.42797053e-01  8.42797053e-01
  1.47637005e+02  6.22828100e+03]
E1 = -167.91332322878526  E_coul = 46.0160227365924
cycle= 3 E= -121.897300492193  delta_E= -0.000449  |g|= 0.00286  |ddm|= 0.0396
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0035411
diis-c [-4.10601361e-08 -2.84821504e-04  6.06413155e-02  9.39643506e-01]
  HOMO = -0.693999920180218  LUMO = 0.844679783058715
  mo_energy =
[-3.32905708e+01 -2.57278559e+00 -6.93999920e-01 -6.93999920e-01
 -6.93999920e-01  8.44679783e-01  8.44679783e-01  8.44679783e-01
  1.47647299e+02  6.22829184e+03]
E1 = -167.90373056256402  E_coul = 46.006427993577724
cycle= 4 E= -121.897302568986  delta_E= -2.08e-06  |g|= 5.63e-06  |ddm|= 0.00253
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=6.25328e-06
diis-c [-8.44089258e-14  2.48960847e-06 -8.28401873e-04 -1.10556878e-02
  1.01188160e+00]
  HOMO = -0.694011157335299  LUMO = 0.844676395969516
  mo_energy =
[-3.32905957e+01 -2.57280138e+00 -6.94011157e-01 -6.94011157e-01
 -6.94011157e-01  8.44676396e-01  8.44676396e-01  8.44676396e-01
  1.47647274e+02  6.22829182e+03]
E1 = -167.90374398325517  E_coul = 46.0064414142646
cycle= 5 E= -121.897302568991  delta_E= -4.26e-12  |g|= 3.93e-08  |ddm|= 3.52e-06
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -167.90374398325517  E_coul = 46.0064414142646
  HOMO = -0.694011160148197  LUMO = 0.844676372717902
  mo_energy =
[-3.32905957e+01 -2.57280141e+00 -6.94011160e-01 -6.94011160e-01
 -6.94011160e-01  8.44676373e-01  8.44676373e-01  8.44676373e-01
  1.47647274e+02  6.22829182e+03]
E1 = -167.90374414223675  E_coul = 46.00644157324635
Extra cycle  E= -121.89730256899  delta_E= 1.71e-13  |g|= 6.49e-09  |ddm|= 4.19e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.479140214548938
E1 = -167.90374414223675  E_coul = 46.00644157324635
init E= -121.89730256899
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.694011148796603  LUMO = 0.844676377664258
  mo_energy =
[-3.32905957e+01 -2.57280139e+00 -6.94011149e-01 -6.94011149e-01
 -6.94011149e-01  8.44676378e-01  8.44676378e-01  8.44676378e-01
  1.47647274e+02  6.22829182e+03]
E1 = -167.90374411775318  E_coul = 46.00644154876266
cycle= 1 E= -121.897302568991  delta_E= -1.14e-13  |g|= 9.92e-10  |ddm|= 6.44e-09
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -167.90374411775318  E_coul = 46.00644154876266
  HOMO = -0.694011150542328  LUMO = 0.844676376903577
  mo_energy =
[-3.32905957e+01 -2.57280139e+00 -6.94011151e-01 -6.94011151e-01
 -6.94011151e-01  8.44676377e-01  8.44676377e-01  8.44676377e-01
  1.47647274e+02  6.22829182e+03]
E1 = -167.90374412152227  E_coul = 46.006441552531776
Extra cycle  E= -121.89730256899  delta_E= 2.84e-14  |g|= 1.53e-10  |ddm|= 9.92e-10
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [4.61709701e+03 1.56949822e+02 2.52880019e+01 1.05279609e+00
 1.19481027e+00 2.22716044e-01]
grad_E = [ 1.33646238e-04 -1.16032454e-02  3.24133913e-01 -6.36044938e-01
 -2.51095122e+00 -2.72176588e-01]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:26:29 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.12236066        1
[INPUT] 0    0    [1    /1   ]  147.125906664        1
[INPUT] 0    0    [1    /1   ]  22.7825609024        1
[INPUT] 0    0    [1    /1   ]  0.951880236553       1
[INPUT] 1    0    [1    /1   ]  1.45957955059        1
[INPUT] 1    0    [1    /1   ]  0.188657164339       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.122360657269, 1.0]], [0, [147.125906663729, 1.0]], [0, [22.782560902369017, 1.0]], [0, [0.9518802365530257, 1.0]], [1, [1.4595795505890499, 1.0]], [1, [0.18865716433898938, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.12236066]
bas 1, expnt(s) = [147.12590666]
bas 2, expnt(s) = [22.7825609]
bas 3, expnt(s) = [0.95188024]
bas 4, expnt(s) = [1.45957955]
bas 5, expnt(s) = [0.18865716]
CPU time:        48.52
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61712236e+03 1.41512096e+03 1.47125907e+02 1.06728864e+02
 2.27825609e+01 2.63461360e+01 9.51880237e-01 2.43473532e+00
 1.45957955e+00 4.68025057e+00 1.88657164e-01 3.62723773e-01]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.557972135030575
cond(S) = 4.302567027989082
E1 = -166.86298952128598  E_coul = 46.778223428911225
init E= -120.084766092375
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.748066358359124  LUMO = 0.615345853185945
  mo_energy =
[-3.33013809e+01 -2.46364259e+00 -7.48066358e-01 -7.48066358e-01
 -7.48066358e-01  6.15345853e-01  6.15345853e-01  6.15345853e-01
  1.31341574e+02  6.19571319e+03]
E1 = -169.71440078587537  E_coul = 46.89272403206139
cycle= 1 E= -122.821676753814  delta_E= -2.74  |g|= 0.193  |ddm|= 0.823
    CPU time for cycle= 1      0.02 sec, wall time      0.04 sec
diis-norm(errvec)=0.307128
diis-c [-0.09432741  1.        ]
  HOMO = -0.72134407043615  LUMO = 0.740746766735562
  mo_energy =
[-3.33507971e+01 -2.45069277e+00 -7.21344070e-01 -7.21344070e-01
 -7.21344070e-01  7.40746767e-01  7.40746767e-01  7.40746767e-01
  1.31406015e+02  6.19600651e+03]
E1 = -169.31812973946444  E_coul = 46.49502583596127
cycle= 2 E= -122.823103903503  delta_E= -0.00143  |g|= 0.0262  |ddm|= 0.0813
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.0344672
diis-c [-0.00098003  0.04507167  0.95492833]
  HOMO = -0.749229295631602  LUMO = 0.728226615837091
  mo_energy =
[-3.34180884e+01 -2.48941413e+00 -7.49229296e-01 -7.49229296e-01
 -7.49229296e-01  7.28226616e-01  7.28226616e-01  7.28226616e-01
  1.31338785e+02  6.19593961e+03]
E1 = -169.44071655470896  E_coul = 46.61746023268852
cycle= 3 E= -122.82325632202  delta_E= -0.000152  |g|= 0.00684  |ddm|= 0.0249
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00902483
diis-c [-4.73608384e-09 -3.09809168e-04  2.06844220e-01  7.93465589e-01]
  HOMO = -0.743427198745818  LUMO = 0.730850453228803
  mo_energy =
[-3.34039877e+01 -2.48134469e+00 -7.43427199e-01 -7.43427199e-01
 -7.43427199e-01  7.30850453e-01  7.30850453e-01  7.30850453e-01
  1.31352906e+02  6.19595401e+03]
E1 = -169.41526551018626  E_coul = 46.591997884664956
cycle= 4 E= -122.823267625521  delta_E= -1.13e-05  |g|= 1.59e-06  |ddm|= 0.00518
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=1.8125e-06
diis-c [-4.48534599e-13  5.84409860e-06 -3.72209057e-03 -1.44112971e-02
  1.01812754e+00]
  HOMO = -0.743431282469487  LUMO = 0.730851043671528
  mo_energy =
[-3.34039945e+01 -2.48134852e+00 -7.43431282e-01 -7.43431282e-01
 -7.43431282e-01  7.30851044e-01  7.30851044e-01  7.30851044e-01
  1.31352899e+02  6.19595401e+03]
E1 = -169.4152614268301  E_coul = 46.59199380130862
cycle= 5 E= -122.823267625521  delta_E= -1.85e-13  |g|= 6.88e-08  |ddm|= 8.38e-07
    CPU time for cycle= 5      0.02 sec, wall time      0.02 sec
E1 = -169.4152614268301  E_coul = 46.59199380130862
  HOMO = -0.743431273579062  LUMO = 0.730851004631675
  mo_energy =
[-3.34039946e+01 -2.48134854e+00 -7.43431274e-01 -7.43431274e-01
 -7.43431274e-01  7.30851005e-01  7.30851005e-01  7.30851005e-01
  1.31352899e+02  6.19595401e+03]
E1 = -169.4152617736822  E_coul = 46.591994148160666
Extra cycle  E= -122.823267625522  delta_E= -4.26e-14  |g|= 2.27e-08  |ddm|= 7.06e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.14 sec
exp = [4.61712236e+03 1.47125907e+02 2.27825609e+01 9.51880237e-01
 1.45957955e+00 1.88657164e-01]
E = -122.82326762552154
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:26:29 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.12236066        1
[INPUT] 0    0    [1    /1   ]  147.125906664        1
[INPUT] 0    0    [1    /1   ]  22.7825609024        1
[INPUT] 0    0    [1    /1   ]  0.951880236553       1
[INPUT] 1    0    [1    /1   ]  1.45957955059        1
[INPUT] 1    0    [1    /1   ]  0.188657164339       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.122360657269, 1.0]], [0, [147.125906663729, 1.0]], [0, [22.782560902369017, 1.0]], [0, [0.9518802365530257, 1.0]], [1, [1.4595795505890499, 1.0]], [1, [0.18865716433898938, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.12236066]
bas 1, expnt(s) = [147.12590666]
bas 2, expnt(s) = [22.7825609]
bas 3, expnt(s) = [0.95188024]
bas 4, expnt(s) = [1.45957955]
bas 5, expnt(s) = [0.18865716]
CPU time:        48.85
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61712236e+03 1.41512096e+03 1.47125907e+02 1.06728864e+02
 2.27825609e+01 2.63461360e+01 9.51880237e-01 2.43473532e+00
 1.45957955e+00 4.68025057e+00 1.88657164e-01 3.62723773e-01]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.557972135030575
cond(S) = 4.302567027989082
E1 = -166.86298952128598  E_coul = 46.778223428911225
init E= -120.084766092375
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.748066358359124  LUMO = 0.615345853185945
  mo_energy =
[-3.33013809e+01 -2.46364259e+00 -7.48066358e-01 -7.48066358e-01
 -7.48066358e-01  6.15345853e-01  6.15345853e-01  6.15345853e-01
  1.31341574e+02  6.19571319e+03]
E1 = -169.71440078587537  E_coul = 46.89272403206139
cycle= 1 E= -122.821676753814  delta_E= -2.74  |g|= 0.193  |ddm|= 0.823
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.307128
diis-c [-0.09432741  1.        ]
  HOMO = -0.72134407043615  LUMO = 0.740746766735562
  mo_energy =
[-3.33507971e+01 -2.45069277e+00 -7.21344070e-01 -7.21344070e-01
 -7.21344070e-01  7.40746767e-01  7.40746767e-01  7.40746767e-01
  1.31406015e+02  6.19600651e+03]
E1 = -169.31812973946444  E_coul = 46.49502583596127
cycle= 2 E= -122.823103903503  delta_E= -0.00143  |g|= 0.0262  |ddm|= 0.0813
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0344672
diis-c [-0.00098003  0.04507167  0.95492833]
  HOMO = -0.749229295631602  LUMO = 0.728226615837091
  mo_energy =
[-3.34180884e+01 -2.48941413e+00 -7.49229296e-01 -7.49229296e-01
 -7.49229296e-01  7.28226616e-01  7.28226616e-01  7.28226616e-01
  1.31338785e+02  6.19593961e+03]
E1 = -169.44071655470896  E_coul = 46.61746023268852
cycle= 3 E= -122.82325632202  delta_E= -0.000152  |g|= 0.00684  |ddm|= 0.0249
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00902483
diis-c [-4.73608384e-09 -3.09809168e-04  2.06844220e-01  7.93465589e-01]
  HOMO = -0.743427198745818  LUMO = 0.730850453228803
  mo_energy =
[-3.34039877e+01 -2.48134469e+00 -7.43427199e-01 -7.43427199e-01
 -7.43427199e-01  7.30850453e-01  7.30850453e-01  7.30850453e-01
  1.31352906e+02  6.19595401e+03]
E1 = -169.41526551018626  E_coul = 46.591997884664956
cycle= 4 E= -122.823267625521  delta_E= -1.13e-05  |g|= 1.59e-06  |ddm|= 0.00518
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=1.8125e-06
diis-c [-4.48534599e-13  5.84409860e-06 -3.72209057e-03 -1.44112971e-02
  1.01812754e+00]
  HOMO = -0.743431282469487  LUMO = 0.730851043671528
  mo_energy =
[-3.34039945e+01 -2.48134852e+00 -7.43431282e-01 -7.43431282e-01
 -7.43431282e-01  7.30851044e-01  7.30851044e-01  7.30851044e-01
  1.31352899e+02  6.19595401e+03]
E1 = -169.4152614268301  E_coul = 46.59199380130862
cycle= 5 E= -122.823267625521  delta_E= -1.85e-13  |g|= 6.88e-08  |ddm|= 8.38e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -169.4152614268301  E_coul = 46.59199380130862
  HOMO = -0.743431273579062  LUMO = 0.730851004631675
  mo_energy =
[-3.34039946e+01 -2.48134854e+00 -7.43431274e-01 -7.43431274e-01
 -7.43431274e-01  7.30851005e-01  7.30851005e-01  7.30851005e-01
  1.31352899e+02  6.19595401e+03]
E1 = -169.4152617736822  E_coul = 46.591994148160666
Extra cycle  E= -122.823267625522  delta_E= -4.26e-14  |g|= 2.27e-08  |ddm|= 7.06e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.302567027989082
E1 = -169.4152617736822  E_coul = 46.591994148160666
init E= -122.823267625522
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.743431248116431  LUMO = 0.73085101610962
  mo_energy =
[-3.34039945e+01 -2.48134850e+00 -7.43431248e-01 -7.43431248e-01
 -7.43431248e-01  7.30851016e-01  7.30851016e-01  7.30851016e-01
  1.31352899e+02  6.19595401e+03]
E1 = -169.41526166209155  E_coul = 46.591994036570135
cycle= 1 E= -122.823267625521  delta_E= 1.14e-13  |g|= 7.3e-09  |ddm|= 2.27e-08
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -169.41526166209155  E_coul = 46.591994036570135
  HOMO = -0.74343125630246  LUMO = 0.73085101241959
  mo_energy =
[-3.34039945e+01 -2.48134852e+00 -7.43431256e-01 -7.43431256e-01
 -7.43431256e-01  7.30851012e-01  7.30851012e-01  7.30851012e-01
  1.31352899e+02  6.19595401e+03]
E1 = -169.41526169797714  E_coul = 46.59199407245569
Extra cycle  E= -122.823267625521  delta_E= -2.84e-14  |g|= 2.35e-09  |ddm|= 7.3e-09
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [4.61712236e+03 1.47125907e+02 2.27825609e+01 9.51880237e-01
 1.45957955e+00 1.88657164e-01]
grad_E = [ 1.32063722e-04 -6.24136651e-03  1.87334314e-01 -8.87990769e-01
 -1.31638528e+00 -3.34885440e+00]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:26:32 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.11756614        1
[INPUT] 0    0    [1    /1   ]  149.168360836        1
[INPUT] 0    0    [1    /1   ]  21.099914135         1
[INPUT] 0    0    [1    /1   ]  0.990723002297       1
[INPUT] 1    0    [1    /1   ]  1.80241870107        1
[INPUT] 1    0    [1    /1   ]  0.21725606987        1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.117566143282, 1.0]], [0, [149.16836083608214, 1.0]], [0, [21.09991413497067, 1.0]], [0, [0.990723002297367, 1.0]], [1, [1.8024187010706796, 1.0]], [1, [0.2172560698700817, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.11756614]
bas 1, expnt(s) = [149.16836084]
bas 2, expnt(s) = [21.09991413]
bas 3, expnt(s) = [0.990723]
bas 4, expnt(s) = [1.8024187]
bas 5, expnt(s) = [0.21725607]
CPU time:        51.95
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61711757e+03 1.41511985e+03 1.49168361e+02 1.07838183e+02
 2.10999141e+01 2.48728494e+01 9.90723002e-01 2.50887607e+00
 1.80241870e+00 6.09261869e+00 2.17256070e-01 4.32712351e-01]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.646216139508386
cond(S) = 4.074561389540637
E1 = -170.96858608447945  E_coul = 49.37588324818877
init E= -121.592702836291
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.659019997715071  LUMO = 0.857800509862206
  mo_energy =
[-3.28408114e+01 -2.22441800e+00 -6.59019998e-01 -6.59019998e-01
 -6.59019998e-01  8.57800510e-01  8.57800510e-01  8.57800510e-01
  1.28084194e+02  6.19811022e+03]
E1 = -170.23117901222733  E_coul = 46.782028377366785
cycle= 1 E= -123.449150634861  delta_E= -1.86  |g|= 0.242  |ddm|= 1.02
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.352163
diis-c [-0.12401894  1.        ]
  HOMO = -0.819720395141139  LUMO = 0.859471537295228
  mo_energy =
[-3.34100999e+01 -2.46999680e+00 -8.19720395e-01 -8.19720395e-01
 -8.19720395e-01  8.59471537e-01  8.59471537e-01  8.59471537e-01
  1.27565457e+02  6.19752051e+03]
E1 = -171.24196642711567  E_coul = 47.786357971275194
cycle= 2 E= -123.45560845584  delta_E= -0.00646  |g|= 0.0849  |ddm|= 0.174
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.113166
diis-c [-0.00337346  0.21851896  0.78148104]
  HOMO = -0.762900514240223  LUMO = 0.891211528782807
  mo_energy =
[-3.32656099e+01 -2.39122013e+00 -7.62900514e-01 -7.62900514e-01
 -7.62900514e-01  8.91211529e-01  8.91211529e-01  8.91211529e-01
  1.27709994e+02  6.19766611e+03]
E1 = -170.906534130436  E_coul = 47.44948364367463
cycle= 3 E= -123.457050486761  delta_E= -0.00144  |g|= 0.00974  |ddm|= 0.0585
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0129909
diis-c [-2.94722340e-08 -7.87864021e-04  1.01360637e-01  8.99427227e-01]
  HOMO = -0.768828586768431  LUMO = 0.888039108702806
  mo_energy =
[-3.32806466e+01 -2.39934852e+00 -7.68828587e-01 -7.68828587e-01
 -7.68828587e-01  8.88039109e-01  8.88039109e-01  8.88039109e-01
  1.27694864e+02  6.19765030e+03]
E1 = -170.9410376924558  E_coul = 47.48396817894118
cycle= 4 E= -123.457069513515  delta_E= -1.9e-05  |g|= 3.7e-06  |ddm|= 0.00598
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=4.33986e-06
diis-c [-3.70949227e-12  8.85819814e-06 -1.72411451e-03 -1.53923071e-02
  1.01710756e+00]
  HOMO = -0.768840370764913  LUMO = 0.888041120026529
  mo_energy =
[-3.32806687e+01 -2.39935879e+00 -7.68840371e-01 -7.68840371e-01
 -7.68840371e-01  8.88041120e-01  8.88041120e-01  8.88041120e-01
  1.27694841e+02  6.19765027e+03]
E1 = -170.9410423334307  E_coul = 47.483972819915635
cycle= 5 E= -123.457069513515  delta_E= -4.26e-13  |g|= 1.25e-07  |ddm|= 8.02e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -170.9410423334307  E_coul = 47.483972819915635
  HOMO = -0.768840294302616  LUMO = 0.88804101701871
  mo_energy =
[-3.32806687e+01 -2.39935878e+00 -7.68840294e-01 -7.68840294e-01
 -7.68840294e-01  8.88041017e-01  8.88041017e-01  8.88041017e-01
  1.27694841e+02  6.19765027e+03]
E1 = -170.94104298414757  E_coul = 47.48397347063258
Extra cycle  E= -123.457069513515  delta_E= 5.68e-14  |g|= 5.54e-08  |ddm|= 1.13e-07
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [4.61711757e+03 1.49168361e+02 2.10999141e+01 9.90723002e-01
 1.80241870e+00 2.17256070e-01]
E = -123.457069513515
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:26:33 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.11756614        1
[INPUT] 0    0    [1    /1   ]  149.168360836        1
[INPUT] 0    0    [1    /1   ]  21.099914135         1
[INPUT] 0    0    [1    /1   ]  0.990723002297       1
[INPUT] 1    0    [1    /1   ]  1.80241870107        1
[INPUT] 1    0    [1    /1   ]  0.21725606987        1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.117566143282, 1.0]], [0, [149.16836083608214, 1.0]], [0, [21.09991413497067, 1.0]], [0, [0.990723002297367, 1.0]], [1, [1.8024187010706796, 1.0]], [1, [0.2172560698700817, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.11756614]
bas 1, expnt(s) = [149.16836084]
bas 2, expnt(s) = [21.09991413]
bas 3, expnt(s) = [0.990723]
bas 4, expnt(s) = [1.8024187]
bas 5, expnt(s) = [0.21725607]
CPU time:        52.27
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61711757e+03 1.41511985e+03 1.49168361e+02 1.07838183e+02
 2.10999141e+01 2.48728494e+01 9.90723002e-01 2.50887607e+00
 1.80241870e+00 6.09261869e+00 2.17256070e-01 4.32712351e-01]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.646216139508386
cond(S) = 4.074561389540637
E1 = -170.96858608447945  E_coul = 49.37588324818877
init E= -121.592702836291
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.659019997715071  LUMO = 0.857800509862206
  mo_energy =
[-3.28408114e+01 -2.22441800e+00 -6.59019998e-01 -6.59019998e-01
 -6.59019998e-01  8.57800510e-01  8.57800510e-01  8.57800510e-01
  1.28084194e+02  6.19811022e+03]
E1 = -170.23117901222733  E_coul = 46.782028377366785
cycle= 1 E= -123.449150634861  delta_E= -1.86  |g|= 0.242  |ddm|= 1.02
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.352163
diis-c [-0.12401894  1.        ]
  HOMO = -0.819720395141139  LUMO = 0.859471537295228
  mo_energy =
[-3.34100999e+01 -2.46999680e+00 -8.19720395e-01 -8.19720395e-01
 -8.19720395e-01  8.59471537e-01  8.59471537e-01  8.59471537e-01
  1.27565457e+02  6.19752051e+03]
E1 = -171.24196642711567  E_coul = 47.786357971275194
cycle= 2 E= -123.45560845584  delta_E= -0.00646  |g|= 0.0849  |ddm|= 0.174
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.113166
diis-c [-0.00337346  0.21851896  0.78148104]
  HOMO = -0.762900514240223  LUMO = 0.891211528782807
  mo_energy =
[-3.32656099e+01 -2.39122013e+00 -7.62900514e-01 -7.62900514e-01
 -7.62900514e-01  8.91211529e-01  8.91211529e-01  8.91211529e-01
  1.27709994e+02  6.19766611e+03]
E1 = -170.906534130436  E_coul = 47.44948364367463
cycle= 3 E= -123.457050486761  delta_E= -0.00144  |g|= 0.00974  |ddm|= 0.0585
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0129909
diis-c [-2.94722340e-08 -7.87864021e-04  1.01360637e-01  8.99427227e-01]
  HOMO = -0.768828586768431  LUMO = 0.888039108702806
  mo_energy =
[-3.32806466e+01 -2.39934852e+00 -7.68828587e-01 -7.68828587e-01
 -7.68828587e-01  8.88039109e-01  8.88039109e-01  8.88039109e-01
  1.27694864e+02  6.19765030e+03]
E1 = -170.9410376924558  E_coul = 47.48396817894118
cycle= 4 E= -123.457069513515  delta_E= -1.9e-05  |g|= 3.7e-06  |ddm|= 0.00598
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=4.33986e-06
diis-c [-3.70949227e-12  8.85819814e-06 -1.72411451e-03 -1.53923071e-02
  1.01710756e+00]
  HOMO = -0.768840370764913  LUMO = 0.888041120026529
  mo_energy =
[-3.32806687e+01 -2.39935879e+00 -7.68840371e-01 -7.68840371e-01
 -7.68840371e-01  8.88041120e-01  8.88041120e-01  8.88041120e-01
  1.27694841e+02  6.19765027e+03]
E1 = -170.9410423334307  E_coul = 47.483972819915635
cycle= 5 E= -123.457069513515  delta_E= -4.26e-13  |g|= 1.25e-07  |ddm|= 8.02e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -170.9410423334307  E_coul = 47.483972819915635
  HOMO = -0.768840294302616  LUMO = 0.88804101701871
  mo_energy =
[-3.32806687e+01 -2.39935878e+00 -7.68840294e-01 -7.68840294e-01
 -7.68840294e-01  8.88041017e-01  8.88041017e-01  8.88041017e-01
  1.27694841e+02  6.19765027e+03]
E1 = -170.94104298414757  E_coul = 47.48397347063258
Extra cycle  E= -123.457069513515  delta_E= 5.68e-14  |g|= 5.54e-08  |ddm|= 1.13e-07
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.074561389540637
E1 = -170.94104298414757  E_coul = 47.48397347063258
init E= -123.457069513515
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.768840247385155  LUMO = 0.888041043229754
  mo_energy =
[-3.32806686e+01 -2.39935872e+00 -7.68840247e-01 -7.68840247e-01
 -7.68840247e-01  8.88041043e-01  8.88041043e-01  8.88041043e-01
  1.27694841e+02  6.19765027e+03]
E1 = -170.94104270317425  E_coul = 47.48397318965922
cycle= 1 E= -123.457069513515  delta_E= -2.84e-14  |g|= 2.39e-08  |ddm|= 4.87e-08
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -170.94104270317425  E_coul = 47.48397318965922
  HOMO = -0.768840267636934  LUMO = 0.888041031915902
  mo_energy =
[-3.32806686e+01 -2.39935875e+00 -7.68840268e-01 -7.68840268e-01
 -7.68840268e-01  8.88041032e-01  8.88041032e-01  8.88041032e-01
  1.27694841e+02  6.19765027e+03]
E1 = -170.9410428244837  E_coul = 47.483973310968665
Extra cycle  E= -123.457069513515  delta_E= -1.42e-14  |g|= 1.03e-08  |ddm|= 2.1e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
exp = [4.61711757e+03 1.49168361e+02 2.10999141e+01 9.90723002e-01
 1.80241870e+00 2.17256070e-01]
grad_E = [ 1.21960366e-04  5.34484379e-03  1.77068067e-02 -4.96598086e-01
 -5.74337600e-01 -4.66695994e+00]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:26:36 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.08147944        1
[INPUT] 0    0    [1    /1   ]  163.389795805        1
[INPUT] 0    0    [1    /1   ]  21.3474198714        1
[INPUT] 0    0    [1    /1   ]  1.05154752221        1
[INPUT] 1    0    [1    /1   ]  2.26096970096        1
[INPUT] 1    0    [1    /1   ]  0.307020663472       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.08147944186, 1.0]], [0, [163.38979580492554, 1.0]], [0, [21.347419871415894, 1.0]], [0, [1.0515475222081705, 1.0]], [1, [2.260969700964053, 1.0]], [1, [0.3070206634719275, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.08147944]
bas 1, expnt(s) = [163.3897958]
bas 2, expnt(s) = [21.34741987]
bas 3, expnt(s) = [1.05154752]
bas 4, expnt(s) = [2.2609697]
bas 5, expnt(s) = [0.30702066]
CPU time:        55.17
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61708148e+03 1.41511156e+03 1.63389796e+02 1.15460577e+02
 2.13474199e+01 2.50913523e+01 1.05154752e+00 2.62353403e+00
 2.26096970e+00 8.08821749e+00 3.07020663e-01 6.66720640e-01]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.738079759972173
cond(S) = 3.9050329301269495
E1 = -173.7887063581203  E_coul = 51.41678087742372
init E= -122.371925480697
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.638634053780621  LUMO = 1.42261797571904
  mo_energy =
[-3.23140984e+01 -2.04177649e+00 -6.38634054e-01 -6.38634054e-01
 -6.38634054e-01  1.42261798e+00  1.42261798e+00  1.42261798e+00
  1.40909753e+02  6.23750838e+03]
E1 = -171.57613756653  E_coul = 47.67692778320123
cycle= 1 E= -123.899209783329  delta_E= -1.53  |g|= 0.378  |ddm|= 0.992
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.51209
diis-c [-0.26223642  1.        ]
  HOMO = -0.865435473784475  LUMO = 1.31419413167127
  mo_energy =
[-3.31313604e+01 -2.39768960e+00 -8.65435474e-01 -8.65435474e-01
 -8.65435474e-01  1.31419413e+00  1.31419413e+00  1.31419413e+00
  1.40128109e+02  6.23658523e+03]
E1 = -173.09381467277996  E_coul = 49.17770719536591
cycle= 2 E= -123.916107477414  delta_E= -0.0169  |g|= 0.144  |ddm|= 0.243
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.18965
diis-c [-0.00268434  0.26367467  0.73632533]
  HOMO = -0.788447229260578  LUMO = 1.37167562115952
  mo_energy =
[-3.29156892e+01 -2.28879211e+00 -7.88447229e-01 -7.88447229e-01
 -7.88447229e-01  1.37167562e+00  1.37167562e+00  1.37167562e+00
  1.40344674e+02  6.23680381e+03]
E1 = -172.6496553970425  E_coul = 48.73026883025646
cycle= 3 E= -123.919386566786  delta_E= -0.00328  |g|= 0.00444  |ddm|= 0.0722
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00585264
diis-c [-5.33902749e-08 -1.48317786e-03  2.63120587e-02  9.75171119e-01]
  HOMO = -0.791024882054705  LUMO = 1.37015722201841
  mo_energy =
[-3.29226371e+01 -2.29218947e+00 -7.91024882e-01 -7.91024882e-01
 -7.91024882e-01  1.37015722e+00  1.37015722e+00  1.37015722e+00
  1.40337531e+02  6.23679567e+03]
E1 = -172.66289994739057  E_coul = 48.74351030578962
cycle= 4 E= -123.919389641601  delta_E= -3.07e-06  |g|= 5.54e-06  |ddm|= 0.00214
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=7.23207e-06
diis-c [-1.67862608e-13  6.51539284e-06 -2.57380404e-04 -1.00340382e-02
  1.01028490e+00]
  HOMO = -0.791029870646182  LUMO = 1.37015672659591
  mo_energy =
[-3.29226483e+01 -2.29219453e+00 -7.91029871e-01 -7.91029871e-01
 -7.91029871e-01  1.37015673e+00  1.37015673e+00  1.37015673e+00
  1.40337518e+02  6.23679565e+03]
E1 = -172.6629144021923  E_coul = 48.74352476058768
cycle= 5 E= -123.919389641605  delta_E= -3.67e-12  |g|= 2.18e-08  |ddm|= 2.33e-06
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -172.6629144021923  E_coul = 48.74352476058768
  HOMO = -0.791029856292618  LUMO = 1.37015669745861
  mo_energy =
[-3.29226483e+01 -2.29219453e+00 -7.91029856e-01 -7.91029856e-01
 -7.91029856e-01  1.37015670e+00  1.37015670e+00  1.37015670e+00
  1.40337518e+02  6.23679565e+03]
E1 = -172.66291449561058  E_coul = 48.743524854006
Extra cycle  E= -123.919389641605  delta_E= 4.26e-14  |g|= 8.96e-09  |ddm|= 1.51e-08
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [4.61708148e+03 1.63389796e+02 2.13474199e+01 1.05154752e+00
 2.26096970e+00 3.07020663e-01]
E = -123.91938964160458
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:26:36 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.08147944        1
[INPUT] 0    0    [1    /1   ]  163.389795805        1
[INPUT] 0    0    [1    /1   ]  21.3474198714        1
[INPUT] 0    0    [1    /1   ]  1.05154752221        1
[INPUT] 1    0    [1    /1   ]  2.26096970096        1
[INPUT] 1    0    [1    /1   ]  0.307020663472       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.08147944186, 1.0]], [0, [163.38979580492554, 1.0]], [0, [21.347419871415894, 1.0]], [0, [1.0515475222081705, 1.0]], [1, [2.260969700964053, 1.0]], [1, [0.3070206634719275, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.08147944]
bas 1, expnt(s) = [163.3897958]
bas 2, expnt(s) = [21.34741987]
bas 3, expnt(s) = [1.05154752]
bas 4, expnt(s) = [2.2609697]
bas 5, expnt(s) = [0.30702066]
CPU time:        55.50
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61708148e+03 1.41511156e+03 1.63389796e+02 1.15460577e+02
 2.13474199e+01 2.50913523e+01 1.05154752e+00 2.62353403e+00
 2.26096970e+00 8.08821749e+00 3.07020663e-01 6.66720640e-01]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.738079759972173
cond(S) = 3.9050329301269495
E1 = -173.7887063581203  E_coul = 51.41678087742372
init E= -122.371925480697
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.638634053780621  LUMO = 1.42261797571904
  mo_energy =
[-3.23140984e+01 -2.04177649e+00 -6.38634054e-01 -6.38634054e-01
 -6.38634054e-01  1.42261798e+00  1.42261798e+00  1.42261798e+00
  1.40909753e+02  6.23750838e+03]
E1 = -171.57613756653  E_coul = 47.67692778320123
cycle= 1 E= -123.899209783329  delta_E= -1.53  |g|= 0.378  |ddm|= 0.992
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.51209
diis-c [-0.26223642  1.        ]
  HOMO = -0.865435473784475  LUMO = 1.31419413167127
  mo_energy =
[-3.31313604e+01 -2.39768960e+00 -8.65435474e-01 -8.65435474e-01
 -8.65435474e-01  1.31419413e+00  1.31419413e+00  1.31419413e+00
  1.40128109e+02  6.23658523e+03]
E1 = -173.09381467277996  E_coul = 49.17770719536591
cycle= 2 E= -123.916107477414  delta_E= -0.0169  |g|= 0.144  |ddm|= 0.243
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.18965
diis-c [-0.00268434  0.26367467  0.73632533]
  HOMO = -0.788447229260578  LUMO = 1.37167562115952
  mo_energy =
[-3.29156892e+01 -2.28879211e+00 -7.88447229e-01 -7.88447229e-01
 -7.88447229e-01  1.37167562e+00  1.37167562e+00  1.37167562e+00
  1.40344674e+02  6.23680381e+03]
E1 = -172.6496553970425  E_coul = 48.73026883025646
cycle= 3 E= -123.919386566786  delta_E= -0.00328  |g|= 0.00444  |ddm|= 0.0722
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00585264
diis-c [-5.33902749e-08 -1.48317786e-03  2.63120587e-02  9.75171119e-01]
  HOMO = -0.791024882054705  LUMO = 1.37015722201841
  mo_energy =
[-3.29226371e+01 -2.29218947e+00 -7.91024882e-01 -7.91024882e-01
 -7.91024882e-01  1.37015722e+00  1.37015722e+00  1.37015722e+00
  1.40337531e+02  6.23679567e+03]
E1 = -172.66289994739057  E_coul = 48.74351030578962
cycle= 4 E= -123.919389641601  delta_E= -3.07e-06  |g|= 5.54e-06  |ddm|= 0.00214
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=7.23207e-06
diis-c [-1.67862608e-13  6.51539284e-06 -2.57380404e-04 -1.00340382e-02
  1.01028490e+00]
  HOMO = -0.791029870646182  LUMO = 1.37015672659591
  mo_energy =
[-3.29226483e+01 -2.29219453e+00 -7.91029871e-01 -7.91029871e-01
 -7.91029871e-01  1.37015673e+00  1.37015673e+00  1.37015673e+00
  1.40337518e+02  6.23679565e+03]
E1 = -172.6629144021923  E_coul = 48.74352476058768
cycle= 5 E= -123.919389641605  delta_E= -3.67e-12  |g|= 2.18e-08  |ddm|= 2.33e-06
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -172.6629144021923  E_coul = 48.74352476058768
  HOMO = -0.791029856292618  LUMO = 1.37015669745861
  mo_energy =
[-3.29226483e+01 -2.29219453e+00 -7.91029856e-01 -7.91029856e-01
 -7.91029856e-01  1.37015670e+00  1.37015670e+00  1.37015670e+00
  1.40337518e+02  6.23679565e+03]
E1 = -172.66291449561058  E_coul = 48.743524854006
Extra cycle  E= -123.919389641605  delta_E= 4.26e-14  |g|= 8.96e-09  |ddm|= 1.51e-08
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 3.9050329301269495
E1 = -172.66291449561058  E_coul = 48.743524854006
init E= -123.919389641605
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.791029849828546  LUMO = 1.37015670228732
  mo_energy =
[-3.29226483e+01 -2.29219453e+00 -7.91029850e-01 -7.91029850e-01
 -7.91029850e-01  1.37015670e+00  1.37015670e+00  1.37015670e+00
  1.40337518e+02  6.23679565e+03]
E1 = -172.6629144578293  E_coul = 48.74352481622464
cycle= 1 E= -123.919389641605  delta_E= -7.11e-14  |g|= 3.62e-09  |ddm|= 6.1e-09
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -172.6629144578293  E_coul = 48.74352481622464
  HOMO = -0.791029852442202  LUMO = 1.3701567003349
  mo_energy =
[-3.29226483e+01 -2.29219453e+00 -7.91029852e-01 -7.91029852e-01
 -7.91029852e-01  1.37015670e+00  1.37015670e+00  1.37015670e+00
  1.40337518e+02  6.23679565e+03]
E1 = -172.66291447310803  E_coul = 48.74352483150333
Extra cycle  E= -123.919389641605  delta_E= -5.68e-14  |g|= 1.47e-09  |ddm|= 2.47e-09
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
exp = [4.61708148e+03 1.63389796e+02 2.13474199e+01 1.05154752e+00
 2.26096970e+00 3.07020663e-01]
grad_E = [ 1.07418363e-04  1.23068495e-02 -4.29468751e-02 -1.24613257e-01
 -2.79588878e-01 -3.82988519e+00]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:26:39 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.04380896        1
[INPUT] 0    0    [1    /1   ]  178.10691976         1
[INPUT] 0    0    [1    /1   ]  22.19639904          1
[INPUT] 0    0    [1    /1   ]  1.09374208512        1
[INPUT] 1    0    [1    /1   ]  2.79242996163        1
[INPUT] 1    0    [1    /1   ]  0.41677824176        1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.043808963092, 1.0]], [0, [178.1069197601753, 1.0]], [0, [22.196399040011936, 1.0]], [0, [1.0937420851245665, 1.0]], [1, [2.7924299616342347, 1.0]], [1, [0.4167782417596819, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.04380896]
bas 1, expnt(s) = [178.10691976]
bas 2, expnt(s) = [22.19639904]
bas 3, expnt(s) = [1.09374209]
bas 4, expnt(s) = [2.79242996]
bas 5, expnt(s) = [0.41677824]
CPU time:        58.31
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61704381e+03 1.41510290e+03 1.78106920e+02 1.23175864e+02
 2.21963990e+01 2.58360976e+01 1.09374209e+00 2.70209875e+00
 2.79242996e+00 1.05308216e+01 4.16778242e-01 9.76935048e-01]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.799700062539458
cond(S) = 3.812851258946939
E1 = -175.5559681335843  E_coul = 52.77853764153037
init E= -122.777430492054
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.640915799619936  LUMO = 2.113527681698
  mo_energy =
[-3.19039282e+01 -1.91666221e+00 -6.40915800e-01 -6.40915800e-01
 -6.40915800e-01  2.11352768e+00  2.11352768e+00  2.11352768e+00
  1.56356847e+02  6.28029308e+03]
E1 = -173.5008958829768  E_coul = 49.29362378566954
cycle= 1 E= -124.207272097307  delta_E= -1.43  |g|= 0.368  |ddm|= 0.842
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.490672
diis-c [-0.24075947  1.        ]
  HOMO = -0.840274283114483  LUMO = 1.96012181101159
  mo_energy =
[-3.26996568e+01 -2.24690124e+00 -8.40274283e-01 -8.40274283e-01
 -8.40274283e-01  1.96012181e+00  1.96012181e+00  1.96012181e+00
  1.55605239e+02  6.27943583e+03]
E1 = -174.70115453935475  E_coul = 50.479996483283905
cycle= 2 E= -124.221158056071  delta_E= -0.0139  |g|= 0.12  |ddm|= 0.187
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.156505
diis-c [-0.00176727  0.23569088  0.76430912]
  HOMO = -0.779554069630128  LUMO = 2.01767565672588
  mo_energy =
[-3.25132868e+01 -2.16001349e+00 -7.79554070e-01 -7.79554070e-01
 -7.79554070e-01  2.01767566e+00  2.01767566e+00  2.01767566e+00
  1.55793289e+02  6.27962575e+03]
E1 = -174.39021785812716  E_coul = 50.16722004496442
cycle= 3 E= -124.222997813163  delta_E= -0.00184  |g|= 0.00309  |ddm|= 0.0489
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00403185
diis-c [-3.29214899e-08 -1.71951037e-03  2.01413006e-02  9.81578210e-01]
  HOMO = -0.781200448501351  LUMO = 2.016394703469
  mo_energy =
[-3.25181686e+01 -2.16222007e+00 -7.81200449e-01 -7.81200449e-01
 -7.81200449e-01  2.01639470e+00  2.01639470e+00  2.01639470e+00
  1.55788193e+02  6.27961976e+03]
E1 = -174.39799137223542  E_coul = 50.17499235474444
cycle= 4 E= -124.222999017491  delta_E= -1.2e-06  |g|= 2.76e-06  |ddm|= 0.00122
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.62727e-06
diis-c [-2.55826608e-15  4.78239303e-06 -1.52068789e-04 -7.24810220e-03
  1.00739539e+00]
  HOMO = -0.781201896825308  LUMO = 2.01639395534859
  mo_energy =
[-3.25181729e+01 -2.16222182e+00 -7.81201897e-01 -7.81201897e-01
 -7.81201897e-01  2.01639396e+00  2.01639396e+00  2.01639396e+00
  1.55788188e+02  6.27961975e+03]
E1 = -174.3979971916224  E_coul = 50.17499817413068
cycle= 5 E= -124.222999017492  delta_E= -7.39e-13  |g|= 1.93e-09  |ddm|= 9.15e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -174.3979971916224  E_coul = 50.17499817413068
  HOMO = -0.781201892529802  LUMO = 2.01639394779684
  mo_energy =
[-3.25181729e+01 -2.16222182e+00 -7.81201893e-01 -7.81201893e-01
 -7.81201893e-01  2.01639395e+00  2.01639395e+00  2.01639395e+00
  1.55788188e+02  6.27961975e+03]
E1 = -174.39799719816097  E_coul = 50.174998180669235
Extra cycle  E= -124.222999017492  delta_E=    0  |g|= 6.61e-10  |ddm|= 1.03e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [4.61704381e+03 1.78106920e+02 2.21963990e+01 1.09374209e+00
 2.79242996e+00 4.16778242e-01]
E = -124.22299901749173
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:26:39 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.04380896        1
[INPUT] 0    0    [1    /1   ]  178.10691976         1
[INPUT] 0    0    [1    /1   ]  22.19639904          1
[INPUT] 0    0    [1    /1   ]  1.09374208512        1
[INPUT] 1    0    [1    /1   ]  2.79242996163        1
[INPUT] 1    0    [1    /1   ]  0.41677824176        1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.043808963092, 1.0]], [0, [178.1069197601753, 1.0]], [0, [22.196399040011936, 1.0]], [0, [1.0937420851245665, 1.0]], [1, [2.7924299616342347, 1.0]], [1, [0.4167782417596819, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.04380896]
bas 1, expnt(s) = [178.10691976]
bas 2, expnt(s) = [22.19639904]
bas 3, expnt(s) = [1.09374209]
bas 4, expnt(s) = [2.79242996]
bas 5, expnt(s) = [0.41677824]
CPU time:        58.65
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61704381e+03 1.41510290e+03 1.78106920e+02 1.23175864e+02
 2.21963990e+01 2.58360976e+01 1.09374209e+00 2.70209875e+00
 2.79242996e+00 1.05308216e+01 4.16778242e-01 9.76935048e-01]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.799700062539458
cond(S) = 3.812851258946939
E1 = -175.5559681335843  E_coul = 52.77853764153037
init E= -122.777430492054
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.640915799619936  LUMO = 2.113527681698
  mo_energy =
[-3.19039282e+01 -1.91666221e+00 -6.40915800e-01 -6.40915800e-01
 -6.40915800e-01  2.11352768e+00  2.11352768e+00  2.11352768e+00
  1.56356847e+02  6.28029308e+03]
E1 = -173.5008958829768  E_coul = 49.29362378566954
cycle= 1 E= -124.207272097307  delta_E= -1.43  |g|= 0.368  |ddm|= 0.842
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.490672
diis-c [-0.24075947  1.        ]
  HOMO = -0.840274283114483  LUMO = 1.96012181101159
  mo_energy =
[-3.26996568e+01 -2.24690124e+00 -8.40274283e-01 -8.40274283e-01
 -8.40274283e-01  1.96012181e+00  1.96012181e+00  1.96012181e+00
  1.55605239e+02  6.27943583e+03]
E1 = -174.70115453935475  E_coul = 50.479996483283905
cycle= 2 E= -124.221158056071  delta_E= -0.0139  |g|= 0.12  |ddm|= 0.187
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.156505
diis-c [-0.00176727  0.23569088  0.76430912]
  HOMO = -0.779554069630128  LUMO = 2.01767565672588
  mo_energy =
[-3.25132868e+01 -2.16001349e+00 -7.79554070e-01 -7.79554070e-01
 -7.79554070e-01  2.01767566e+00  2.01767566e+00  2.01767566e+00
  1.55793289e+02  6.27962575e+03]
E1 = -174.39021785812716  E_coul = 50.16722004496442
cycle= 3 E= -124.222997813163  delta_E= -0.00184  |g|= 0.00309  |ddm|= 0.0489
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00403185
diis-c [-3.29214899e-08 -1.71951037e-03  2.01413006e-02  9.81578210e-01]
  HOMO = -0.781200448501351  LUMO = 2.016394703469
  mo_energy =
[-3.25181686e+01 -2.16222007e+00 -7.81200449e-01 -7.81200449e-01
 -7.81200449e-01  2.01639470e+00  2.01639470e+00  2.01639470e+00
  1.55788193e+02  6.27961976e+03]
E1 = -174.39799137223542  E_coul = 50.17499235474444
cycle= 4 E= -124.222999017491  delta_E= -1.2e-06  |g|= 2.76e-06  |ddm|= 0.00122
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.62727e-06
diis-c [-2.55826608e-15  4.78239303e-06 -1.52068789e-04 -7.24810220e-03
  1.00739539e+00]
  HOMO = -0.781201896825308  LUMO = 2.01639395534859
  mo_energy =
[-3.25181729e+01 -2.16222182e+00 -7.81201897e-01 -7.81201897e-01
 -7.81201897e-01  2.01639396e+00  2.01639396e+00  2.01639396e+00
  1.55788188e+02  6.27961975e+03]
E1 = -174.3979971916224  E_coul = 50.17499817413068
cycle= 5 E= -124.222999017492  delta_E= -7.39e-13  |g|= 1.93e-09  |ddm|= 9.15e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -174.3979971916224  E_coul = 50.17499817413068
  HOMO = -0.781201892529802  LUMO = 2.01639394779684
  mo_energy =
[-3.25181729e+01 -2.16222182e+00 -7.81201893e-01 -7.81201893e-01
 -7.81201893e-01  2.01639395e+00  2.01639395e+00  2.01639395e+00
  1.55788188e+02  6.27961975e+03]
E1 = -174.39799719816097  E_coul = 50.174998180669235
Extra cycle  E= -124.222999017492  delta_E=    0  |g|= 6.61e-10  |ddm|= 1.03e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 3.812851258946939
E1 = -174.39799719816097  E_coul = 50.174998180669235
init E= -124.222999017492
    CPU time for initialize scf      0.04 sec, wall time      0.05 sec
  HOMO = -0.78120189209381  LUMO = 2.01639394820914
  mo_energy =
[-3.25181729e+01 -2.16222182e+00 -7.81201892e-01 -7.81201892e-01
 -7.81201892e-01  2.01639395e+00  2.01639395e+00  2.01639395e+00
  1.55788188e+02  6.27961975e+03]
E1 = -174.3979971959204  E_coul = 50.17499817842864
cycle= 1 E= -124.222999017492  delta_E= -2.84e-14  |g|= 2.26e-10  |ddm|= 3.51e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -174.3979971959204  E_coul = 50.17499817842864
  HOMO = -0.781201892243025  LUMO = 2.01639394806803
  mo_energy =
[-3.25181729e+01 -2.16222182e+00 -7.81201892e-01 -7.81201892e-01
 -7.81201892e-01  2.01639395e+00  2.01639395e+00  2.01639395e+00
  1.55788188e+02  6.27961975e+03]
E1 = -174.39799719668738  E_coul = 50.17499817919564
Extra cycle  E= -124.222999017492  delta_E= 1.42e-14  |g|= 7.74e-11  |ddm|= 1.2e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [4.61704381e+03 1.78106920e+02 2.21963990e+01 1.09374209e+00
 2.79242996e+00 4.16778242e-01]
grad_E = [ 9.56487299e-05  1.42479268e-02 -3.35866376e-02  1.19764654e-01
 -1.42057912e-01 -2.76217406e+00]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:26:42 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.02478577        1
[INPUT] 0    0    [1    /1   ]  185.419927918        1
[INPUT] 0    0    [1    /1   ]  22.498901584         1
[INPUT] 0    0    [1    /1   ]  1.10319404903        1
[INPUT] 1    0    [1    /1   ]  3.29961532707        1
[INPUT] 1    0    [1    /1   ]  0.513577205534       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.024785765867, 1.0]], [0, [185.41992791782263, 1.0]], [0, [22.498901583976853, 1.0]], [0, [1.1031940490267511, 1.0]], [1, [3.299615327074339, 1.0]], [1, [0.5135772055339067, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.02478577]
bas 1, expnt(s) = [185.41992792]
bas 2, expnt(s) = [22.49890158]
bas 3, expnt(s) = [1.10319405]
bas 4, expnt(s) = [3.29961533]
bas 5, expnt(s) = [0.51357721]
CPU time:        61.47
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61702479e+03 1.41509853e+03 1.85419928e+02 1.26949890e+02
 2.24989016e+01 2.60997298e+01 1.10319405e+00 2.71959327e+00
 3.29961533e+00 1.29736905e+01 5.13577206e-01 1.26835717e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.828688543671245
cond(S) = 3.7586124501029916
E1 = -176.58266077035358  E_coul = 53.526757423266176
init E= -123.055903347087
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.645335054977477  LUMO = 2.74769182646896
  mo_energy =
[-3.16687866e+01 -1.85077196e+00 -6.45335055e-01 -6.45335055e-01
 -6.45335055e-01  2.74769183e+00  2.74769183e+00  2.74769183e+00
  1.63757836e+02  6.30161202e+03]
E1 = -175.02242787736378  E_coul = 50.625435883573786
cycle= 1 E= -124.39699199379  delta_E= -1.34  |g|= 0.316  |ddm|= 0.705
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.420076
diis-c [-0.17646408  1.        ]
  HOMO = -0.799708504557118  LUMO = 2.59366460129824
  mo_energy =
[-3.23743695e+01 -2.11854455e+00 -7.99708505e-01 -7.99708505e-01
 -7.99708505e-01  2.59366460e+00  2.59366460e+00  2.59366460e+00
  1.63096028e+02  6.30083949e+03]
E1 = -175.8793557705834  E_coul = 51.47351042475245
cycle= 2 E= -124.405845345831  delta_E= -0.00885  |g|= 0.088  |ddm|= 0.133
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.11364
diis-c [-0.00126042  0.2050279   0.7949721 ]
  HOMO = -0.755790010575133  LUMO = 2.64263047024175
  mo_energy =
[-3.22303779e+01 -2.05607728e+00 -7.55790011e-01 -7.55790011e-01
 -7.55790011e-01  2.64263047e+00  2.64263047e+00  2.64263047e+00
  1.63241859e+02  6.30098664e+03]
E1 = -175.68031366615108  E_coul = 51.27363305281507
cycle= 3 E= -124.406680613336  delta_E= -0.000835  |g|= 0.00258  |ddm|= 0.031
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00334032
diis-c [-2.16972626e-08 -1.77569828e-03  2.25988208e-02  9.79176877e-01]
  HOMO = -0.757085970184107  LUMO = 2.64133427336405
  mo_energy =
[-3.22345812e+01 -2.05785135e+00 -7.57085970e-01 -7.57085970e-01
 -7.57085970e-01  2.64133427e+00  2.64133427e+00  2.64133427e+00
  1.63237439e+02  6.30098140e+03]
E1 = -175.68597189905083  E_coul = 51.279290572155745
cycle= 4 E= -124.406681326895  delta_E= -7.14e-07  |g|= 1.37e-06  |ddm|= 0.000879
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.82846e-06
diis-c [-3.64553028e-16  4.03578054e-06 -1.48130754e-04 -5.88985937e-03
  1.00603395e+00]
  HOMO = -0.757086448802927  LUMO = 2.64133387283303
  mo_energy =
[-3.22345831e+01 -2.05785198e+00 -7.57086449e-01 -7.57086449e-01
 -7.57086449e-01  2.64133387e+00  2.64133387e+00  2.64133387e+00
  1.63237436e+02  6.30098140e+03]
E1 = -175.68597384959256  E_coul = 51.279292522697375
cycle= 5 E= -124.406681326895  delta_E= -9.95e-14  |g|= 8.83e-10  |ddm|= 3.05e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -175.68597384959256  E_coul = 51.279292522697375
  HOMO = -0.75708644669191  LUMO = 2.64133387029778
  mo_energy =
[-3.22345831e+01 -2.05785198e+00 -7.57086447e-01 -7.57086447e-01
 -7.57086447e-01  2.64133387e+00  2.64133387e+00  2.64133387e+00
  1.63237436e+02  6.30098140e+03]
E1 = -175.68597384722221  E_coul = 51.27929252032719
Extra cycle  E= -124.406681326895  delta_E= 1.56e-13  |g|= 2.44e-10  |ddm|= 3.67e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
exp = [4.61702479e+03 1.85419928e+02 2.24989016e+01 1.10319405e+00
 3.29961533e+00 5.13577206e-01]
E = -124.40668132689503
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:26:42 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.02478577        1
[INPUT] 0    0    [1    /1   ]  185.419927918        1
[INPUT] 0    0    [1    /1   ]  22.498901584         1
[INPUT] 0    0    [1    /1   ]  1.10319404903        1
[INPUT] 1    0    [1    /1   ]  3.29961532707        1
[INPUT] 1    0    [1    /1   ]  0.513577205534       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.024785765867, 1.0]], [0, [185.41992791782263, 1.0]], [0, [22.498901583976853, 1.0]], [0, [1.1031940490267511, 1.0]], [1, [3.299615327074339, 1.0]], [1, [0.5135772055339067, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.02478577]
bas 1, expnt(s) = [185.41992792]
bas 2, expnt(s) = [22.49890158]
bas 3, expnt(s) = [1.10319405]
bas 4, expnt(s) = [3.29961533]
bas 5, expnt(s) = [0.51357721]
CPU time:        61.83
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61702479e+03 1.41509853e+03 1.85419928e+02 1.26949890e+02
 2.24989016e+01 2.60997298e+01 1.10319405e+00 2.71959327e+00
 3.29961533e+00 1.29736905e+01 5.13577206e-01 1.26835717e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.828688543671245
cond(S) = 3.7586124501029916
E1 = -176.58266077035358  E_coul = 53.526757423266176
init E= -123.055903347087
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.645335054977477  LUMO = 2.74769182646896
  mo_energy =
[-3.16687866e+01 -1.85077196e+00 -6.45335055e-01 -6.45335055e-01
 -6.45335055e-01  2.74769183e+00  2.74769183e+00  2.74769183e+00
  1.63757836e+02  6.30161202e+03]
E1 = -175.02242787736378  E_coul = 50.625435883573786
cycle= 1 E= -124.39699199379  delta_E= -1.34  |g|= 0.316  |ddm|= 0.705
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.420076
diis-c [-0.17646408  1.        ]
  HOMO = -0.799708504557118  LUMO = 2.59366460129824
  mo_energy =
[-3.23743695e+01 -2.11854455e+00 -7.99708505e-01 -7.99708505e-01
 -7.99708505e-01  2.59366460e+00  2.59366460e+00  2.59366460e+00
  1.63096028e+02  6.30083949e+03]
E1 = -175.8793557705834  E_coul = 51.47351042475245
cycle= 2 E= -124.405845345831  delta_E= -0.00885  |g|= 0.088  |ddm|= 0.133
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.11364
diis-c [-0.00126042  0.2050279   0.7949721 ]
  HOMO = -0.755790010575133  LUMO = 2.64263047024175
  mo_energy =
[-3.22303779e+01 -2.05607728e+00 -7.55790011e-01 -7.55790011e-01
 -7.55790011e-01  2.64263047e+00  2.64263047e+00  2.64263047e+00
  1.63241859e+02  6.30098664e+03]
E1 = -175.68031366615108  E_coul = 51.27363305281507
cycle= 3 E= -124.406680613336  delta_E= -0.000835  |g|= 0.00258  |ddm|= 0.031
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00334032
diis-c [-2.16972626e-08 -1.77569828e-03  2.25988208e-02  9.79176877e-01]
  HOMO = -0.757085970184107  LUMO = 2.64133427336405
  mo_energy =
[-3.22345812e+01 -2.05785135e+00 -7.57085970e-01 -7.57085970e-01
 -7.57085970e-01  2.64133427e+00  2.64133427e+00  2.64133427e+00
  1.63237439e+02  6.30098140e+03]
E1 = -175.68597189905083  E_coul = 51.279290572155745
cycle= 4 E= -124.406681326895  delta_E= -7.14e-07  |g|= 1.37e-06  |ddm|= 0.000879
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.82846e-06
diis-c [-3.64553028e-16  4.03578054e-06 -1.48130754e-04 -5.88985937e-03
  1.00603395e+00]
  HOMO = -0.757086448802927  LUMO = 2.64133387283303
  mo_energy =
[-3.22345831e+01 -2.05785198e+00 -7.57086449e-01 -7.57086449e-01
 -7.57086449e-01  2.64133387e+00  2.64133387e+00  2.64133387e+00
  1.63237436e+02  6.30098140e+03]
E1 = -175.68597384959256  E_coul = 51.279292522697375
cycle= 5 E= -124.406681326895  delta_E= -9.95e-14  |g|= 8.83e-10  |ddm|= 3.05e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -175.68597384959256  E_coul = 51.279292522697375
  HOMO = -0.75708644669191  LUMO = 2.64133387029778
  mo_energy =
[-3.22345831e+01 -2.05785198e+00 -7.57086447e-01 -7.57086447e-01
 -7.57086447e-01  2.64133387e+00  2.64133387e+00  2.64133387e+00
  1.63237436e+02  6.30098140e+03]
E1 = -175.68597384722221  E_coul = 51.27929252032719
Extra cycle  E= -124.406681326895  delta_E= 1.56e-13  |g|= 2.44e-10  |ddm|= 3.67e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 3.7586124501029916
E1 = -175.68597384722221  E_coul = 51.27929252032719
init E= -124.406681326895
    CPU time for initialize scf      0.04 sec, wall time      0.05 sec
  HOMO = -0.757086446845407  LUMO = 2.64133387012717
  mo_energy =
[-3.22345831e+01 -2.05785198e+00 -7.57086447e-01 -7.57086447e-01
 -7.57086447e-01  2.64133387e+00  2.64133387e+00  2.64133387e+00
  1.63237436e+02  6.30098140e+03]
E1 = -175.68597384791804  E_coul = 51.27929252102304
cycle= 1 E= -124.406681326895  delta_E= 2.84e-14  |g|= 7.18e-11  |ddm|= 1.08e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -175.68597384791804  E_coul = 51.27929252102304
  HOMO = -0.75708644680026  LUMO = 2.64133387017734
  mo_energy =
[-3.22345831e+01 -2.05785198e+00 -7.57086447e-01 -7.57086447e-01
 -7.57086447e-01  2.64133387e+00  2.64133387e+00  2.64133387e+00
  1.63237436e+02  6.30098140e+03]
E1 = -175.68597384771357  E_coul = 51.27929252081847
Extra cycle  E= -124.406681326895  delta_E= -9.95e-14  |g|= 2.11e-11  |ddm|= 3.18e-11
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [4.61702479e+03 1.85419928e+02 2.24989016e+01 1.10319405e+00
 3.29961533e+00 5.13577206e-01]
grad_E = [ 8.94557302e-05  1.53404236e-02 -3.65540821e-02  2.30065096e-01
 -6.09531443e-02 -2.07979355e+00]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:26:45 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.02016877        1
[INPUT] 0    0    [1    /1   ]  186.910317315        1
[INPUT] 0    0    [1    /1   ]  22.4555674956        1
[INPUT] 0    0    [1    /1   ]  1.08306608698        1
[INPUT] 1    0    [1    /1   ]  3.93889211624        1
[INPUT] 1    0    [1    /1   ]  0.627225615151       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.0201687725, 1.0]], [0, [186.91031731545377, 1.0]], [0, [22.455567495561095, 1.0]], [0, [1.0830660869823352, 1.0]], [1, [3.938892116236685, 1.0]], [1, [0.6272256151505614, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.02016877]
bas 1, expnt(s) = [186.91031732]
bas 2, expnt(s) = [22.4555675]
bas 3, expnt(s) = [1.08306609]
bas 4, expnt(s) = [3.93889212]
bas 5, expnt(s) = [0.62722562]
CPU time:        64.53
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61702017e+03 1.41509747e+03 1.86910317e+02 1.27714433e+02
 2.24555675e+01 2.60620186e+01 1.08306609e+00 2.68229316e+00
 3.93889212e+00 1.61883282e+01 6.27225615e-01 1.62841137e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.843355789250662
cond(S) = 3.726337639861315
E1 = -177.41530600849396  E_coul = 54.048217655321565
init E= -123.367088353172
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.649869313445356  LUMO = 3.52713568040379
  mo_energy =
[-3.15198115e+01 -1.81686602e+00 -6.49869313e-01 -6.49869313e-01
 -6.49869313e-01  3.52713568e+00  3.52713568e+00  3.52713568e+00
  1.64952360e+02  6.30582002e+03]
E1 = -176.5706009881714  E_coul = 51.97160139098666
cycle= 1 E= -124.598999597185  delta_E= -1.23  |g|= 0.239  |ddm|= 0.56
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.32127
diis-c [-0.10321436  1.        ]
  HOMO = -0.745491946871583  LUMO = 3.40264187351089
  mo_energy =
[-3.20850868e+01 -1.99488591e+00 -7.45491947e-01 -7.45491947e-01
 -7.45491947e-01  3.40264187e+00  3.40264187e+00  3.40264187e+00
  1.64424704e+02  6.30515549e+03]
E1 = -177.09046652816684  E_coul = 52.48730966920429
cycle= 2 E= -124.603156858963  delta_E= -0.00416  |g|= 0.054  |ddm|= 0.0806
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0694216
diis-c [-8.30810936e-04  1.64839913e-01  8.35160087e-01]
  HOMO = -0.718115192451652  LUMO = 3.43822983482603
  mo_energy =
[-3.19893707e+01 -1.95693795e+00 -7.18115192e-01 -7.18115192e-01
 -7.18115192e-01  3.43822983e+00  3.43822983e+00  3.43822983e+00
  1.64521956e+02  6.30525330e+03]
E1 = -176.98419627131992  E_coul = 52.38077436514725
cycle= 3 E= -124.603421906173  delta_E= -0.000265  |g|= 0.00221  |ddm|= 0.0165
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00284602
diis-c [-1.49639225e-08 -1.61929675e-03  3.29889395e-02  9.68630357e-01]
  HOMO = -0.719201190219153  LUMO = 3.43687280711064
  mo_energy =
[-3.19932098e+01 -1.95842229e+00 -7.19201190e-01 -7.19201190e-01
 -7.19201190e-01  3.43687281e+00  3.43687281e+00  3.43687281e+00
  1.64517912e+02  6.30524854e+03]
E1 = -176.98837067833716  E_coul = 52.38494832888265
cycle= 4 E= -124.603422349455  delta_E= -4.43e-07  |g|= 8.51e-07  |ddm|= 0.000648
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.14579e-06
diis-c [-2.23550206e-16  3.45976440e-06 -2.03810922e-04 -5.42425721e-03
  1.00562461e+00]
  HOMO = -0.719201304655282  LUMO = 3.43687276610028
  mo_energy =
[-3.19932105e+01 -1.95842241e+00 -7.19201305e-01 -7.19201305e-01
 -7.19201305e-01  3.43687277e+00  3.43687277e+00  3.43687277e+00
  1.64517911e+02  6.30524854e+03]
E1 = -176.9883710412215  E_coul = 52.384948691767136
cycle= 5 E= -124.603422349454  delta_E= 1.42e-13  |g|= 6.71e-10  |ddm|= 5.83e-08
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -176.9883710412215  E_coul = 52.384948691767136
  HOMO = -0.719201303804052  LUMO = 3.43687276493122
  mo_energy =
[-3.19932105e+01 -1.95842241e+00 -7.19201304e-01 -7.19201304e-01
 -7.19201304e-01  3.43687276e+00  3.43687276e+00  3.43687276e+00
  1.64517911e+02  6.30524854e+03]
E1 = -176.9883710396435  E_coul = 52.38494869018909
Extra cycle  E= -124.603422349454  delta_E= -4.26e-14  |g|= 1.64e-10  |ddm|= 2.45e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
exp = [4.61702017e+03 1.86910317e+02 2.24555675e+01 1.08306609e+00
 3.93889212e+00 6.27225615e-01]
E = -124.60342234945442
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:26:45 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.02016877        1
[INPUT] 0    0    [1    /1   ]  186.910317315        1
[INPUT] 0    0    [1    /1   ]  22.4555674956        1
[INPUT] 0    0    [1    /1   ]  1.08306608698        1
[INPUT] 1    0    [1    /1   ]  3.93889211624        1
[INPUT] 1    0    [1    /1   ]  0.627225615151       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.0201687725, 1.0]], [0, [186.91031731545377, 1.0]], [0, [22.455567495561095, 1.0]], [0, [1.0830660869823352, 1.0]], [1, [3.938892116236685, 1.0]], [1, [0.6272256151505614, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.02016877]
bas 1, expnt(s) = [186.91031732]
bas 2, expnt(s) = [22.4555675]
bas 3, expnt(s) = [1.08306609]
bas 4, expnt(s) = [3.93889212]
bas 5, expnt(s) = [0.62722562]
CPU time:        64.90
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61702017e+03 1.41509747e+03 1.86910317e+02 1.27714433e+02
 2.24555675e+01 2.60620186e+01 1.08306609e+00 2.68229316e+00
 3.93889212e+00 1.61883282e+01 6.27225615e-01 1.62841137e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.843355789250662
cond(S) = 3.726337639861315
E1 = -177.41530600849396  E_coul = 54.048217655321565
init E= -123.367088353172
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.649869313445356  LUMO = 3.52713568040379
  mo_energy =
[-3.15198115e+01 -1.81686602e+00 -6.49869313e-01 -6.49869313e-01
 -6.49869313e-01  3.52713568e+00  3.52713568e+00  3.52713568e+00
  1.64952360e+02  6.30582002e+03]
E1 = -176.5706009881714  E_coul = 51.97160139098666
cycle= 1 E= -124.598999597185  delta_E= -1.23  |g|= 0.239  |ddm|= 0.56
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.32127
diis-c [-0.10321436  1.        ]
  HOMO = -0.745491946871583  LUMO = 3.40264187351089
  mo_energy =
[-3.20850868e+01 -1.99488591e+00 -7.45491947e-01 -7.45491947e-01
 -7.45491947e-01  3.40264187e+00  3.40264187e+00  3.40264187e+00
  1.64424704e+02  6.30515549e+03]
E1 = -177.09046652816684  E_coul = 52.48730966920429
cycle= 2 E= -124.603156858963  delta_E= -0.00416  |g|= 0.054  |ddm|= 0.0806
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0694216
diis-c [-8.30810936e-04  1.64839913e-01  8.35160087e-01]
  HOMO = -0.718115192451652  LUMO = 3.43822983482603
  mo_energy =
[-3.19893707e+01 -1.95693795e+00 -7.18115192e-01 -7.18115192e-01
 -7.18115192e-01  3.43822983e+00  3.43822983e+00  3.43822983e+00
  1.64521956e+02  6.30525330e+03]
E1 = -176.98419627131992  E_coul = 52.38077436514725
cycle= 3 E= -124.603421906173  delta_E= -0.000265  |g|= 0.00221  |ddm|= 0.0165
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00284602
diis-c [-1.49639225e-08 -1.61929675e-03  3.29889395e-02  9.68630357e-01]
  HOMO = -0.719201190219153  LUMO = 3.43687280711064
  mo_energy =
[-3.19932098e+01 -1.95842229e+00 -7.19201190e-01 -7.19201190e-01
 -7.19201190e-01  3.43687281e+00  3.43687281e+00  3.43687281e+00
  1.64517912e+02  6.30524854e+03]
E1 = -176.98837067833716  E_coul = 52.38494832888265
cycle= 4 E= -124.603422349455  delta_E= -4.43e-07  |g|= 8.51e-07  |ddm|= 0.000648
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.14579e-06
diis-c [-2.23550206e-16  3.45976440e-06 -2.03810922e-04 -5.42425721e-03
  1.00562461e+00]
  HOMO = -0.719201304655282  LUMO = 3.43687276610028
  mo_energy =
[-3.19932105e+01 -1.95842241e+00 -7.19201305e-01 -7.19201305e-01
 -7.19201305e-01  3.43687277e+00  3.43687277e+00  3.43687277e+00
  1.64517911e+02  6.30524854e+03]
E1 = -176.9883710412215  E_coul = 52.384948691767136
cycle= 5 E= -124.603422349454  delta_E= 1.42e-13  |g|= 6.71e-10  |ddm|= 5.83e-08
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -176.9883710412215  E_coul = 52.384948691767136
  HOMO = -0.719201303804052  LUMO = 3.43687276493122
  mo_energy =
[-3.19932105e+01 -1.95842241e+00 -7.19201304e-01 -7.19201304e-01
 -7.19201304e-01  3.43687276e+00  3.43687276e+00  3.43687276e+00
  1.64517911e+02  6.30524854e+03]
E1 = -176.9883710396435  E_coul = 52.38494869018909
Extra cycle  E= -124.603422349454  delta_E= -4.26e-14  |g|= 1.64e-10  |ddm|= 2.45e-10
    CPU time for scf_cycle      0.08 sec, wall time      0.09 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 3.726337639861315
E1 = -176.9883710396435  E_coul = 52.38494869018909
init E= -124.603422349454
    CPU time for initialize scf      0.04 sec, wall time      0.04 sec
  HOMO = -0.719201303903958  LUMO = 3.43687276480172
  mo_energy =
[-3.19932105e+01 -1.95842241e+00 -7.19201304e-01 -7.19201304e-01
 -7.19201304e-01  3.43687276e+00  3.43687276e+00  3.43687276e+00
  1.64517911e+02  6.30524854e+03]
E1 = -176.98837104003078  E_coul = 52.384948690576444
cycle= 1 E= -124.603422349454  delta_E= 7.11e-14  |g|= 4.04e-11  |ddm|= 6.01e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -176.98837104003078  E_coul = 52.384948690576444
  HOMO = -0.719201303879423  LUMO = 3.43687276483353
  mo_energy =
[-3.19932105e+01 -1.95842241e+00 -7.19201304e-01 -7.19201304e-01
 -7.19201304e-01  3.43687276e+00  3.43687276e+00  3.43687276e+00
  1.64517911e+02  6.30524854e+03]
E1 = -176.9883710399358  E_coul = 52.38494869048132
Extra cycle  E= -124.603422349454  delta_E= -1.28e-13  |g|= 9.94e-12  |ddm|= 1.48e-11
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [4.61702017e+03 1.86910317e+02 2.24555675e+01 1.08306609e+00
 3.93889212e+00 6.27225615e-01]
grad_E = [ 8.76545573e-05  1.59292606e-02 -4.42893766e-02  2.42562433e-01
  2.24486950e-03 -1.46083414e+00]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:26:48 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.04047974        1
[INPUT] 0    0    [1    /1   ]  178.29212015         1
[INPUT] 0    0    [1    /1   ]  21.9396792736        1
[INPUT] 0    0    [1    /1   ]  1.03109400312        1
[INPUT] 1    0    [1    /1   ]  4.81528115063        1
[INPUT] 1    0    [1    /1   ]  0.772884122691       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.040479739205, 1.0]], [0, [178.29212015011382, 1.0]], [0, [21.93967927362868, 1.0]], [0, [1.0310940031216802, 1.0]], [1, [4.815281150626093, 1.0]], [1, [0.7728841226909448, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.04047974]
bas 1, expnt(s) = [178.29212015]
bas 2, expnt(s) = [21.93967927]
bas 3, expnt(s) = [1.031094]
bas 4, expnt(s) = [4.81528115]
bas 5, expnt(s) = [0.77288412]
CPU time:        67.53
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61704048e+03 1.41510213e+03 1.78292120e+02 1.23271913e+02
 2.19396793e+01 2.56116601e+01 1.03109400e+00 2.58516769e+00
 4.81528115e+00 2.08094908e+01 7.72884123e-01 2.11410900e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.835477312972202
cond(S) = 3.7487138787429957
E1 = -178.08117277901962  E_coul = 54.34576171932388
init E= -123.735411059696
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.654198462512915  LUMO = 4.58195686900622
  mo_energy =
[-3.14858648e+01 -1.81366234e+00 -6.54198463e-01 -6.54198463e-01
 -6.54198463e-01  4.58195687e+00  4.58195687e+00  4.58195687e+00
  1.55870510e+02  6.28059867e+03]
E1 = -178.27863018398565  E_coul = 53.41558147207156
cycle= 1 E= -124.863048711914  delta_E= -1.13  |g|= 0.142  |ddm|= 0.405
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.205262
diis-c [-0.04213232  1.        ]
  HOMO = -0.670048020759371  LUMO = 4.53210139444862
  mo_energy =
[-3.18425064e+01 -1.87164810e+00 -6.70048021e-01 -6.70048021e-01
 -6.70048021e-01  4.53210139e+00  4.53210139e+00  4.53210139e+00
  1.55542587e+02  6.28009644e+03]
E1 = -178.48907390155696  E_coul = 53.6251127718186
cycle= 2 E= -124.863961129738  delta_E= -0.000912  |g|= 0.0219  |ddm|= 0.033
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0280347
diis-c [-3.81537951e-04  8.96001584e-02  9.10399842e-01]
  HOMO = -0.658179601746469  LUMO = 4.55014825495417
  mo_energy =
[-3.17982431e+01 -1.85605672e+00 -6.58179602e-01 -6.58179602e-01
 -6.58179602e-01  4.55014825e+00  4.55014825e+00  4.55014825e+00
  1.55587560e+02  6.28014090e+03]
E1 = -178.4516552091128  E_coul = 53.587658746820686
cycle= 3 E= -124.863996462292  delta_E= -3.53e-05  |g|= 0.00193  |ddm|= 0.00585
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00246969
diis-c [-1.16478700e-08 -1.11685102e-03  7.58937069e-02  9.25223144e-01]
  HOMO = -0.659142329559991  LUMO = 4.54869066619311
  mo_energy =
[-3.18019049e+01 -1.85731991e+00 -6.59142330e-01 -6.59142330e-01
 -6.59142330e-01  4.54869067e+00  4.54869067e+00  4.54869067e+00
  1.55583738e+02  6.28013659e+03]
E1 = -178.45469354682126  E_coul = 53.59069680653907
cycle= 4 E= -124.863996740282  delta_E= -2.78e-07  |g|= 9.66e-07  |ddm|= 0.000475
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.26966e-06
diis-c [-7.45624204e-16  2.95938871e-06 -5.90790775e-04 -6.63409205e-03
  1.00722192e+00]
  HOMO = -0.659142108279192  LUMO = 4.54869109420568
  mo_energy =
[-3.18019044e+01 -1.85731959e+00 -6.59142108e-01 -6.59142108e-01
 -6.59142108e-01  4.54869109e+00  4.54869109e+00  4.54869109e+00
  1.55583738e+02  6.28013659e+03]
E1 = -178.45469285042168  E_coul = 53.59069611013941
cycle= 5 E= -124.863996740282  delta_E= -7.11e-14  |g|= 3.76e-10  |ddm|= 1.07e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -178.45469285042168  E_coul = 53.59069611013941
  HOMO = -0.659142108318566  LUMO = 4.54869109304703
  mo_energy =
[-3.18019044e+01 -1.85731959e+00 -6.59142108e-01 -6.59142108e-01
 -6.59142108e-01  4.54869109e+00  4.54869109e+00  4.54869109e+00
  1.55583738e+02  6.28013659e+03]
E1 = -178.4546928507575  E_coul = 53.590696110475236
Extra cycle  E= -124.863996740282  delta_E= -1.42e-14  |g|= 3.45e-11  |ddm|= 5.19e-11
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
exp = [4.61704048e+03 1.78292120e+02 2.19396793e+01 1.03109400e+00
 4.81528115e+00 7.72884123e-01]
E = -124.86399674028227
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:26:48 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.04047974        1
[INPUT] 0    0    [1    /1   ]  178.29212015         1
[INPUT] 0    0    [1    /1   ]  21.9396792736        1
[INPUT] 0    0    [1    /1   ]  1.03109400312        1
[INPUT] 1    0    [1    /1   ]  4.81528115063        1
[INPUT] 1    0    [1    /1   ]  0.772884122691       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.040479739205, 1.0]], [0, [178.29212015011382, 1.0]], [0, [21.93967927362868, 1.0]], [0, [1.0310940031216802, 1.0]], [1, [4.815281150626093, 1.0]], [1, [0.7728841226909448, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.04047974]
bas 1, expnt(s) = [178.29212015]
bas 2, expnt(s) = [21.93967927]
bas 3, expnt(s) = [1.031094]
bas 4, expnt(s) = [4.81528115]
bas 5, expnt(s) = [0.77288412]
CPU time:        67.92
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61704048e+03 1.41510213e+03 1.78292120e+02 1.23271913e+02
 2.19396793e+01 2.56116601e+01 1.03109400e+00 2.58516769e+00
 4.81528115e+00 2.08094908e+01 7.72884123e-01 2.11410900e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.835477312972202
cond(S) = 3.7487138787429957
E1 = -178.08117277901962  E_coul = 54.34576171932388
init E= -123.735411059696
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.654198462512915  LUMO = 4.58195686900622
  mo_energy =
[-3.14858648e+01 -1.81366234e+00 -6.54198463e-01 -6.54198463e-01
 -6.54198463e-01  4.58195687e+00  4.58195687e+00  4.58195687e+00
  1.55870510e+02  6.28059867e+03]
E1 = -178.27863018398565  E_coul = 53.41558147207156
cycle= 1 E= -124.863048711914  delta_E= -1.13  |g|= 0.142  |ddm|= 0.405
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.205262
diis-c [-0.04213232  1.        ]
  HOMO = -0.670048020759371  LUMO = 4.53210139444862
  mo_energy =
[-3.18425064e+01 -1.87164810e+00 -6.70048021e-01 -6.70048021e-01
 -6.70048021e-01  4.53210139e+00  4.53210139e+00  4.53210139e+00
  1.55542587e+02  6.28009644e+03]
E1 = -178.48907390155696  E_coul = 53.6251127718186
cycle= 2 E= -124.863961129738  delta_E= -0.000912  |g|= 0.0219  |ddm|= 0.033
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0280347
diis-c [-3.81537951e-04  8.96001584e-02  9.10399842e-01]
  HOMO = -0.658179601746469  LUMO = 4.55014825495417
  mo_energy =
[-3.17982431e+01 -1.85605672e+00 -6.58179602e-01 -6.58179602e-01
 -6.58179602e-01  4.55014825e+00  4.55014825e+00  4.55014825e+00
  1.55587560e+02  6.28014090e+03]
E1 = -178.4516552091128  E_coul = 53.587658746820686
cycle= 3 E= -124.863996462292  delta_E= -3.53e-05  |g|= 0.00193  |ddm|= 0.00585
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00246969
diis-c [-1.16478700e-08 -1.11685102e-03  7.58937069e-02  9.25223144e-01]
  HOMO = -0.659142329559991  LUMO = 4.54869066619311
  mo_energy =
[-3.18019049e+01 -1.85731991e+00 -6.59142330e-01 -6.59142330e-01
 -6.59142330e-01  4.54869067e+00  4.54869067e+00  4.54869067e+00
  1.55583738e+02  6.28013659e+03]
E1 = -178.45469354682126  E_coul = 53.59069680653907
cycle= 4 E= -124.863996740282  delta_E= -2.78e-07  |g|= 9.66e-07  |ddm|= 0.000475
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.26966e-06
diis-c [-7.45624204e-16  2.95938871e-06 -5.90790775e-04 -6.63409205e-03
  1.00722192e+00]
  HOMO = -0.659142108279192  LUMO = 4.54869109420568
  mo_energy =
[-3.18019044e+01 -1.85731959e+00 -6.59142108e-01 -6.59142108e-01
 -6.59142108e-01  4.54869109e+00  4.54869109e+00  4.54869109e+00
  1.55583738e+02  6.28013659e+03]
E1 = -178.45469285042168  E_coul = 53.59069611013941
cycle= 5 E= -124.863996740282  delta_E= -7.11e-14  |g|= 3.76e-10  |ddm|= 1.07e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -178.45469285042168  E_coul = 53.59069611013941
  HOMO = -0.659142108318566  LUMO = 4.54869109304703
  mo_energy =
[-3.18019044e+01 -1.85731959e+00 -6.59142108e-01 -6.59142108e-01
 -6.59142108e-01  4.54869109e+00  4.54869109e+00  4.54869109e+00
  1.55583738e+02  6.28013659e+03]
E1 = -178.4546928507575  E_coul = 53.590696110475236
Extra cycle  E= -124.863996740282  delta_E= -1.42e-14  |g|= 3.45e-11  |ddm|= 5.19e-11
    CPU time for scf_cycle      0.08 sec, wall time      0.08 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 3.7487138787429957
E1 = -178.4546928507575  E_coul = 53.590696110475236
init E= -124.863996740282
    CPU time for initialize scf      0.04 sec, wall time      0.04 sec
  HOMO = -0.659142108297917  LUMO = 4.54869109307845
  mo_energy =
[-3.18019044e+01 -1.85731959e+00 -6.59142108e-01 -6.59142108e-01
 -6.59142108e-01  4.54869109e+00  4.54869109e+00  4.54869109e+00
  1.55583738e+02  6.28013659e+03]
E1 = -178.45469285069183  E_coul = 53.59069611040961
cycle= 1 E= -124.863996740282  delta_E= 5.68e-14  |g|= 6.9e-12  |ddm|= 1.03e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -178.45469285069183  E_coul = 53.59069611040961
  HOMO = -0.659142108301983  LUMO = 4.54869109307227
  mo_energy =
[-3.18019044e+01 -1.85731959e+00 -6.59142108e-01 -6.59142108e-01
 -6.59142108e-01  4.54869109e+00  4.54869109e+00  4.54869109e+00
  1.55583738e+02  6.28013659e+03]
E1 = -178.45469285070473  E_coul = 53.5906961104224
Extra cycle  E= -124.863996740282  delta_E= -1.14e-13  |g|= 1.35e-12  |ddm|= 2e-12
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [4.61704048e+03 1.78292120e+02 2.19396793e+01 1.03109400e+00
 4.81528115e+00 7.72884123e-01]
grad_E = [ 9.40040919e-05  1.53211771e-02 -5.01399539e-02  1.50435834e-01
  4.78961031e-02 -8.11737609e-01]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:26:51 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.10317923        1
[INPUT] 0    0    [1    /1   ]  152.560532399        1
[INPUT] 0    0    [1    /1   ]  20.696858041         1
[INPUT] 0    0    [1    /1   ]  0.959806556645       1
[INPUT] 1    0    [1    /1   ]  5.91759777024        1
[INPUT] 1    0    [1    /1   ]  0.943033822057       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.103179233767, 1.0]], [0, [152.56053239913092, 1.0]], [0, [20.696858040989838, 1.0]], [0, [0.959806556645427, 1.0]], [1, [5.917597770236699, 1.0]], [1, [0.9430338220565737, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.10317923]
bas 1, expnt(s) = [152.5605324]
bas 2, expnt(s) = [20.69685804]
bas 3, expnt(s) = [0.95980656]
bas 4, expnt(s) = [5.91759777]
bas 5, expnt(s) = [0.94303382]
CPU time:        70.55
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61710318e+03 1.41511655e+03 1.52560532e+02 1.09672229e+02
 2.06968580e+01 2.45156459e+01 9.59806557e-01 2.44992511e+00
 5.91759777e+00 2.69256499e+01 9.43033822e-01 2.71108715e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.79172357452909
cond(S) = 3.945821208255751
E1 = -178.2808859313683  E_coul = 54.35516326162015
init E= -123.925722669748
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.659112872977468  LUMO = 5.90384910471391
  mo_energy =
[-3.15967060e+01 -1.83199295e+00 -6.59112873e-01 -6.59112873e-01
 -6.59112873e-01  5.90384910e+00  5.90384910e+00  5.90384910e+00
  1.30571895e+02  6.20758665e+03]
E1 = -179.996712223945  E_coul = 54.835366961984214
cycle= 1 E= -125.161345261961  delta_E= -1.24  |g|= 0.111  |ddm|= 0.275
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.190463
diis-c [-0.03627629  1.        ]
  HOMO = -0.573982543220728  LUMO = 5.98277201423219
  mo_energy =
[-3.16868864e+01 -1.75415927e+00 -5.73982543e-01 -5.73982543e-01
 -5.73982543e-01  5.98277201e+00  5.98277201e+00  5.98277201e+00
  1.30507134e+02  6.20732211e+03]
E1 = -179.98424958490122  E_coul = 54.822896736916114
cycle= 2 E= -125.161352847985  delta_E= -7.59e-06  |g|= 0.00128  |ddm|= 0.00192
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00165446
diis-c [-2.64720445e-06 -1.57797089e-03  1.00157797e+00]
  HOMO = -0.574709074642515  LUMO = 5.98147542695045
  mo_energy =
[-3.16900691e+01 -1.75504163e+00 -5.74709075e-01 -5.74709075e-01
 -5.74709075e-01  5.98147543e+00  5.98147543e+00  5.98147543e+00
  1.30503627e+02  6.20731669e+03]
E1 = -179.98608011187255  E_coul = 54.82472717275554
cycle= 3 E= -125.161352939117  delta_E= -9.11e-08  |g|= 0.000191  |ddm|= 0.000291
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000241977
diis-c [-3.37791452e-09 -3.26569115e-04  1.25768564e-01  8.74558005e-01]
  HOMO = -0.574610677617858  LUMO = 5.98164886489144
  mo_energy =
[-3.16896753e+01 -1.75492238e+00 -5.74610678e-01 -5.74610678e-01
 -5.74610678e-01  5.98164886e+00  5.98164886e+00  5.98164886e+00
  1.30504030e+02  6.20731712e+03]
E1 = -179.98583727417162  E_coul = 54.82448433291747
cycle= 4 E= -125.161352941254  delta_E= -2.14e-09  |g|= 1.02e-06  |ddm|= 3.85e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.32184e-06
diis-c [-1.05554308e-15  2.54176979e-06 -1.65895021e-03 -6.24918904e-03
  1.00790560e+00]
  HOMO = -0.574611118435273  LUMO = 5.98164806610186
  mo_energy =
[-3.16896775e+01 -1.75492292e+00 -5.74611118e-01 -5.74611118e-01
 -5.74611118e-01  5.98164807e+00  5.98164807e+00  5.98164807e+00
  1.30504027e+02  6.20731711e+03]
E1 = -179.98583840943562  E_coul = 54.82448546818162
cycle= 5 E= -125.161352941254  delta_E= 1.42e-13  |g|= 1.02e-09  |ddm|= 1.81e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -179.98583840943562  E_coul = 54.82448546818162
  HOMO = -0.574611118982168  LUMO = 5.98164806514239
  mo_energy =
[-3.16896775e+01 -1.75492292e+00 -5.74611119e-01 -5.74611119e-01
 -5.74611119e-01  5.98164807e+00  5.98164807e+00  5.98164807e+00
  1.30504027e+02  6.20731711e+03]
E1 = -179.98583841071334  E_coul = 54.82448546945923
Extra cycle  E= -125.161352941254  delta_E= -1.14e-13  |g|= 1.31e-10  |ddm|= 2.01e-10
    CPU time for scf_cycle      0.08 sec, wall time      0.09 sec
exp = [4.61710318e+03 1.52560532e+02 2.06968580e+01 9.59806557e-01
 5.91759777e+00 9.43033822e-01]
E = -125.16135294125411
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:26:51 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.10317923        1
[INPUT] 0    0    [1    /1   ]  152.560532399        1
[INPUT] 0    0    [1    /1   ]  20.696858041         1
[INPUT] 0    0    [1    /1   ]  0.959806556645       1
[INPUT] 1    0    [1    /1   ]  5.91759777024        1
[INPUT] 1    0    [1    /1   ]  0.943033822057       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.103179233767, 1.0]], [0, [152.56053239913092, 1.0]], [0, [20.696858040989838, 1.0]], [0, [0.959806556645427, 1.0]], [1, [5.917597770236699, 1.0]], [1, [0.9430338220565737, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.10317923]
bas 1, expnt(s) = [152.5605324]
bas 2, expnt(s) = [20.69685804]
bas 3, expnt(s) = [0.95980656]
bas 4, expnt(s) = [5.91759777]
bas 5, expnt(s) = [0.94303382]
CPU time:        70.94
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61710318e+03 1.41511655e+03 1.52560532e+02 1.09672229e+02
 2.06968580e+01 2.45156459e+01 9.59806557e-01 2.44992511e+00
 5.91759777e+00 2.69256499e+01 9.43033822e-01 2.71108715e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.79172357452909
cond(S) = 3.945821208255751
E1 = -178.2808859313683  E_coul = 54.35516326162015
init E= -123.925722669748
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.659112872977468  LUMO = 5.90384910471391
  mo_energy =
[-3.15967060e+01 -1.83199295e+00 -6.59112873e-01 -6.59112873e-01
 -6.59112873e-01  5.90384910e+00  5.90384910e+00  5.90384910e+00
  1.30571895e+02  6.20758665e+03]
E1 = -179.996712223945  E_coul = 54.835366961984214
cycle= 1 E= -125.161345261961  delta_E= -1.24  |g|= 0.111  |ddm|= 0.275
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.190463
diis-c [-0.03627629  1.        ]
  HOMO = -0.573982543220728  LUMO = 5.98277201423219
  mo_energy =
[-3.16868864e+01 -1.75415927e+00 -5.73982543e-01 -5.73982543e-01
 -5.73982543e-01  5.98277201e+00  5.98277201e+00  5.98277201e+00
  1.30507134e+02  6.20732211e+03]
E1 = -179.98424958490122  E_coul = 54.822896736916114
cycle= 2 E= -125.161352847985  delta_E= -7.59e-06  |g|= 0.00128  |ddm|= 0.00192
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00165446
diis-c [-2.64720445e-06 -1.57797089e-03  1.00157797e+00]
  HOMO = -0.574709074642515  LUMO = 5.98147542695045
  mo_energy =
[-3.16900691e+01 -1.75504163e+00 -5.74709075e-01 -5.74709075e-01
 -5.74709075e-01  5.98147543e+00  5.98147543e+00  5.98147543e+00
  1.30503627e+02  6.20731669e+03]
E1 = -179.98608011187255  E_coul = 54.82472717275554
cycle= 3 E= -125.161352939117  delta_E= -9.11e-08  |g|= 0.000191  |ddm|= 0.000291
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000241977
diis-c [-3.37791452e-09 -3.26569115e-04  1.25768564e-01  8.74558005e-01]
  HOMO = -0.574610677617858  LUMO = 5.98164886489144
  mo_energy =
[-3.16896753e+01 -1.75492238e+00 -5.74610678e-01 -5.74610678e-01
 -5.74610678e-01  5.98164886e+00  5.98164886e+00  5.98164886e+00
  1.30504030e+02  6.20731712e+03]
E1 = -179.98583727417162  E_coul = 54.82448433291747
cycle= 4 E= -125.161352941254  delta_E= -2.14e-09  |g|= 1.02e-06  |ddm|= 3.85e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.32184e-06
diis-c [-1.05554308e-15  2.54176979e-06 -1.65895021e-03 -6.24918904e-03
  1.00790560e+00]
  HOMO = -0.574611118435273  LUMO = 5.98164806610186
  mo_energy =
[-3.16896775e+01 -1.75492292e+00 -5.74611118e-01 -5.74611118e-01
 -5.74611118e-01  5.98164807e+00  5.98164807e+00  5.98164807e+00
  1.30504027e+02  6.20731711e+03]
E1 = -179.98583840943562  E_coul = 54.82448546818162
cycle= 5 E= -125.161352941254  delta_E= 1.42e-13  |g|= 1.02e-09  |ddm|= 1.81e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -179.98583840943562  E_coul = 54.82448546818162
  HOMO = -0.574611118982168  LUMO = 5.98164806514239
  mo_energy =
[-3.16896775e+01 -1.75492292e+00 -5.74611119e-01 -5.74611119e-01
 -5.74611119e-01  5.98164807e+00  5.98164807e+00  5.98164807e+00
  1.30504027e+02  6.20731711e+03]
E1 = -179.98583841071334  E_coul = 54.82448546945923
Extra cycle  E= -125.161352941254  delta_E= -1.14e-13  |g|= 1.31e-10  |ddm|= 2.01e-10
    CPU time for scf_cycle      0.08 sec, wall time      0.08 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 3.945821208255751
E1 = -179.98583841071334  E_coul = 54.82448546945923
init E= -125.161352941254
    CPU time for initialize scf      0.04 sec, wall time      0.04 sec
  HOMO = -0.574611118904875  LUMO = 5.98164806527888
  mo_energy =
[-3.16896775e+01 -1.75492292e+00 -5.74611119e-01 -5.74611119e-01
 -5.74611119e-01  5.98164807e+00  5.98164807e+00  5.98164807e+00
  1.30504027e+02  6.20731711e+03]
E1 = -179.98583841052164  E_coul = 54.82448546926753
cycle= 1 E= -125.161352941254  delta_E=    0  |g|= 1.98e-11  |ddm|= 3.04e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -179.98583841052164  E_coul = 54.82448546926753
  HOMO = -0.574611118916509  LUMO = 5.98164806525836
  mo_energy =
[-3.16896775e+01 -1.75492292e+00 -5.74611119e-01 -5.74611119e-01
 -5.74611119e-01  5.98164807e+00  5.98164807e+00  5.98164807e+00
  1.30504027e+02  6.20731711e+03]
E1 = -179.98583841055046  E_coul = 54.824485469296334
Extra cycle  E= -125.161352941254  delta_E= -1.42e-14  |g|= 3.1e-12  |ddm|= 4.55e-12
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
exp = [4.61710318e+03 1.52560532e+02 2.06968580e+01 9.59806557e-01
 5.91759777e+00 9.43033822e-01]
grad_E = [ 1.15971498e-04  9.67576701e-03 -2.96596656e-02 -2.15010063e-02
  7.36333365e-02 -1.68442244e-01]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:26:54 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.16117664        1
[INPUT] 0    0    [1    /1   ]  129.06962087         1
[INPUT] 0    0    [1    /1   ]  19.5440385484        1
[INPUT] 0    0    [1    /1   ]  0.943202035113       1
[INPUT] 1    0    [1    /1   ]  6.34160369586        1
[INPUT] 1    0    [1    /1   ]  0.997891381961       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.161176636281, 1.0]], [0, [129.06962086988878, 1.0]], [0, [19.544038548404753, 1.0]], [0, [0.9432020351131555, 1.0]], [1, [6.341603695863099, 1.0]], [1, [0.9978913819614296, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.16117664]
bas 1, expnt(s) = [129.06962087]
bas 2, expnt(s) = [19.54403855]
bas 3, expnt(s) = [0.94320204]
bas 4, expnt(s) = [6.3416037]
bas 5, expnt(s) = [0.99789138]
CPU time:        73.55
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61716118e+03 1.41512988e+03 1.29069621e+02 9.67460071e+01
 1.95440385e+01 2.34841993e+01 9.43202035e-01 2.41806834e+00
 6.34160370e+00 2.93584596e+01 9.97891382e-01 2.90963480e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.771445280981805
cond(S) = 4.27254652016846
E1 = -177.85687348614806  E_coul = 54.333201929745904
init E= -123.523671556402
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.658067197879295  LUMO = 6.39285932542583
  mo_energy =
[-3.16454938e+01 -1.83454029e+00 -6.58067198e-01 -6.58067198e-01
 -6.58067198e-01  6.39285933e+00  6.39285933e+00  6.39285933e+00
  1.08728914e+02  6.14361606e+03]
E1 = -180.4602179895042  E_coul = 55.22724875704847
cycle= 1 E= -125.232969232456  delta_E= -1.71  |g|= 0.165  |ddm|= 0.251
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.277714
diis-c [-0.07712525  1.        ]
  HOMO = -0.54217286546949  LUMO = 6.51407873752191
  mo_energy =
[-3.16574793e+01 -1.71890477e+00 -5.42172865e-01 -5.42172865e-01
 -5.42172865e-01  6.51407874e+00  6.51407874e+00  6.51407874e+00
  1.08743711e+02  6.14343060e+03]
E1 = -180.4111230530208  E_coul = 55.178080318153775
cycle= 2 E= -125.233042734867  delta_E= -7.35e-05  |g|= 0.0051  |ddm|= 0.00779
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00640027
diis-c [-4.00000759e-05  3.52275813e-03  9.96477242e-01]
  HOMO = -0.545119492285275  LUMO = 6.50861065080585
  mo_energy =
[-3.16696520e+01 -1.72238494e+00 -5.45119492e-01 -5.45119492e-01
 -5.45119492e-01  6.50861065e+00  6.50861065e+00  6.50861065e+00
  1.08731302e+02  6.14341656e+03]
E1 = -180.41787793318457  E_coul = 55.18483383738839
cycle= 3 E= -125.233044095796  delta_E= -1.36e-06  |g|= 0.000682  |ddm|= 0.00107
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000856584
diis-c [-1.41574130e-13 -1.70120146e-04  1.17006288e-01  8.83163832e-01]
  HOMO = -0.544771662633826  LUMO = 6.50925658877888
  mo_energy =
[-3.16682148e+01 -1.72197403e+00 -5.44771663e-01 -5.44771663e-01
 -5.44771663e-01  6.50925659e+00  6.50925659e+00  6.50925659e+00
  1.08732767e+02  6.14341820e+03]
E1 = -180.41708048029722  E_coul = 55.18403635966496
cycle= 4 E= -125.233044120632  delta_E= -2.48e-08  |g|= 7.58e-09  |ddm|= 0.000126
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=9.64649e-09
diis-c [-1.09351821e-17  1.34028873e-06 -9.23633967e-04 -6.96095560e-03
  1.00788325e+00]
  HOMO = -0.544771665782745  LUMO = 6.50925659210871
  mo_energy =
[-3.16682149e+01 -1.72197403e+00 -5.44771666e-01 -5.44771666e-01
 -5.44771666e-01  6.50925659e+00  6.50925659e+00  6.50925659e+00
  1.08732767e+02  6.14341820e+03]
E1 = -180.41708048910175  E_coul = 55.18403636846953
cycle= 5 E= -125.233044120632  delta_E= 2.84e-14  |g|= 1.11e-10  |ddm|= 1.41e-09
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -180.41708048910175  E_coul = 55.18403636846953
  HOMO = -0.544771665724544  LUMO = 6.50925659214279
  mo_energy =
[-3.16682149e+01 -1.72197403e+00 -5.44771666e-01 -5.44771666e-01
 -5.44771666e-01  6.50925659e+00  6.50925659e+00  6.50925659e+00
  1.08732767e+02  6.14341820e+03]
E1 = -180.41708048895993  E_coul = 55.18403636832775
Extra cycle  E= -125.233044120632  delta_E= 5.68e-14  |g|= 1.47e-11  |ddm|= 2.24e-11
    CPU time for scf_cycle      0.08 sec, wall time      0.08 sec
exp = [4.61716118e+03 1.29069621e+02 1.95440385e+01 9.43202035e-01
 6.34160370e+00 9.97891382e-01]
E = -125.23304412063217
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:26:54 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.16117664        1
[INPUT] 0    0    [1    /1   ]  129.06962087         1
[INPUT] 0    0    [1    /1   ]  19.5440385484        1
[INPUT] 0    0    [1    /1   ]  0.943202035113       1
[INPUT] 1    0    [1    /1   ]  6.34160369586        1
[INPUT] 1    0    [1    /1   ]  0.997891381961       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.161176636281, 1.0]], [0, [129.06962086988878, 1.0]], [0, [19.544038548404753, 1.0]], [0, [0.9432020351131555, 1.0]], [1, [6.341603695863099, 1.0]], [1, [0.9978913819614296, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.16117664]
bas 1, expnt(s) = [129.06962087]
bas 2, expnt(s) = [19.54403855]
bas 3, expnt(s) = [0.94320204]
bas 4, expnt(s) = [6.3416037]
bas 5, expnt(s) = [0.99789138]
CPU time:        73.96
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61716118e+03 1.41512988e+03 1.29069621e+02 9.67460071e+01
 1.95440385e+01 2.34841993e+01 9.43202035e-01 2.41806834e+00
 6.34160370e+00 2.93584596e+01 9.97891382e-01 2.90963480e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.771445280981805
cond(S) = 4.27254652016846
E1 = -177.85687348614806  E_coul = 54.333201929745904
init E= -123.523671556402
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.658067197879295  LUMO = 6.39285932542583
  mo_energy =
[-3.16454938e+01 -1.83454029e+00 -6.58067198e-01 -6.58067198e-01
 -6.58067198e-01  6.39285933e+00  6.39285933e+00  6.39285933e+00
  1.08728914e+02  6.14361606e+03]
E1 = -180.4602179895042  E_coul = 55.22724875704847
cycle= 1 E= -125.232969232456  delta_E= -1.71  |g|= 0.165  |ddm|= 0.251
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.277714
diis-c [-0.07712525  1.        ]
  HOMO = -0.54217286546949  LUMO = 6.51407873752191
  mo_energy =
[-3.16574793e+01 -1.71890477e+00 -5.42172865e-01 -5.42172865e-01
 -5.42172865e-01  6.51407874e+00  6.51407874e+00  6.51407874e+00
  1.08743711e+02  6.14343060e+03]
E1 = -180.4111230530208  E_coul = 55.178080318153775
cycle= 2 E= -125.233042734867  delta_E= -7.35e-05  |g|= 0.0051  |ddm|= 0.00779
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00640027
diis-c [-4.00000759e-05  3.52275813e-03  9.96477242e-01]
  HOMO = -0.545119492285275  LUMO = 6.50861065080585
  mo_energy =
[-3.16696520e+01 -1.72238494e+00 -5.45119492e-01 -5.45119492e-01
 -5.45119492e-01  6.50861065e+00  6.50861065e+00  6.50861065e+00
  1.08731302e+02  6.14341656e+03]
E1 = -180.41787793318457  E_coul = 55.18483383738839
cycle= 3 E= -125.233044095796  delta_E= -1.36e-06  |g|= 0.000682  |ddm|= 0.00107
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000856584
diis-c [-1.41574130e-13 -1.70120146e-04  1.17006288e-01  8.83163832e-01]
  HOMO = -0.544771662633826  LUMO = 6.50925658877888
  mo_energy =
[-3.16682148e+01 -1.72197403e+00 -5.44771663e-01 -5.44771663e-01
 -5.44771663e-01  6.50925659e+00  6.50925659e+00  6.50925659e+00
  1.08732767e+02  6.14341820e+03]
E1 = -180.41708048029722  E_coul = 55.18403635966496
cycle= 4 E= -125.233044120632  delta_E= -2.48e-08  |g|= 7.58e-09  |ddm|= 0.000126
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=9.64649e-09
diis-c [-1.09351821e-17  1.34028873e-06 -9.23633967e-04 -6.96095560e-03
  1.00788325e+00]
  HOMO = -0.544771665782745  LUMO = 6.50925659210871
  mo_energy =
[-3.16682149e+01 -1.72197403e+00 -5.44771666e-01 -5.44771666e-01
 -5.44771666e-01  6.50925659e+00  6.50925659e+00  6.50925659e+00
  1.08732767e+02  6.14341820e+03]
E1 = -180.41708048910175  E_coul = 55.18403636846953
cycle= 5 E= -125.233044120632  delta_E= 2.84e-14  |g|= 1.11e-10  |ddm|= 1.41e-09
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -180.41708048910175  E_coul = 55.18403636846953
  HOMO = -0.544771665724544  LUMO = 6.50925659214279
  mo_energy =
[-3.16682149e+01 -1.72197403e+00 -5.44771666e-01 -5.44771666e-01
 -5.44771666e-01  6.50925659e+00  6.50925659e+00  6.50925659e+00
  1.08732767e+02  6.14341820e+03]
E1 = -180.41708048895993  E_coul = 55.18403636832775
Extra cycle  E= -125.233044120632  delta_E= 5.68e-14  |g|= 1.47e-11  |ddm|= 2.24e-11
    CPU time for scf_cycle      0.08 sec, wall time      0.08 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.27254652016846
E1 = -180.41708048895993  E_coul = 55.18403636832775
init E= -125.233044120632
    CPU time for initialize scf      0.04 sec, wall time      0.04 sec
  HOMO = -0.54477166573305  LUMO = 6.50925659212697
  mo_energy =
[-3.16682149e+01 -1.72197403e+00 -5.44771666e-01 -5.44771666e-01
 -5.44771666e-01  6.50925659e+00  6.50925659e+00  6.50925659e+00
  1.08732767e+02  6.14341820e+03]
E1 = -180.41708048897948  E_coul = 55.184036368347286
cycle= 1 E= -125.233044120632  delta_E= -2.84e-14  |g|= 2.2e-12  |ddm|= 3.1e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -180.41708048897948  E_coul = 55.184036368347286
  HOMO = -0.544771665731875  LUMO = 6.50925659212916
  mo_energy =
[-3.16682149e+01 -1.72197403e+00 -5.44771666e-01 -5.44771666e-01
 -5.44771666e-01  6.50925659e+00  6.50925659e+00  6.50925659e+00
  1.08732767e+02  6.14341820e+03]
E1 = -180.41708048897664  E_coul = 55.18403636834455
Extra cycle  E= -125.233044120632  delta_E= 1.14e-13  |g|= 3.35e-13  |ddm|= 4.27e-13
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
exp = [4.61716118e+03 1.29069621e+02 1.95440385e+01 9.43202035e-01
 6.34160370e+00 9.97891382e-01]
grad_E = [ 0.00013709 -0.00139926  0.0142377  -0.03961587  0.08617792 -0.03152633]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:26:58 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.15104395        1
[INPUT] 0    0    [1    /1   ]  133.28207221         1
[INPUT] 0    0    [1    /1   ]  19.6918624409        1
[INPUT] 0    0    [1    /1   ]  0.963655769929       1
[INPUT] 1    0    [1    /1   ]  6.00657387426        1
[INPUT] 1    0    [1    /1   ]  0.9453391766         1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.151043950297, 1.0]], [0, [133.2820722103703, 1.0]], [0, [19.69186244087518, 1.0]], [0, [0.9636557699289567, 1.0]], [1, [6.00657387426257, 1.0]], [1, [0.945339176600431, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.15104395]
bas 1, expnt(s) = [133.28207221]
bas 2, expnt(s) = [19.69186244]
bas 3, expnt(s) = [0.96365577]
bas 4, expnt(s) = [6.00657387]
bas 5, expnt(s) = [0.94533918]
CPU time:        77.00
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61715104e+03 1.41512755e+03 1.33282072e+02 9.91046031e+01
 1.96918624e+01 2.36172931e+01 9.63655770e-01 2.45729031e+00
 6.00657387e+00 2.74326600e+01 9.45339177e-01 2.71937414e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.79299369808177
cond(S) = 4.207998805448896
E1 = -178.0639644621299  E_coul = 54.378498605051746
init E= -123.685465857078
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.656419452959002  LUMO = 5.97479524680823
  mo_energy =
[-3.16427724e+01 -1.82845130e+00 -6.56419453e-01 -6.56419453e-01
 -6.56419453e-01  5.97479525e+00  5.97479525e+00  5.97479525e+00
  1.12420534e+02  6.15477720e+03]
E1 = -180.03493877582392  E_coul = 54.78150983464166
cycle= 1 E= -125.253428941182  delta_E= -1.57  |g|= 0.149  |ddm|= 0.281
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.254141
diis-c [-0.06458756  1.        ]
  HOMO = -0.576693251851235  LUMO = 6.04357917488407
  mo_energy =
[-3.17494663e+01 -1.75641547e+00 -5.76693252e-01 -5.76693252e-01
 -5.76693252e-01  6.04357917e+00  6.04357917e+00  6.04357917e+00
  1.12337235e+02  6.15448579e+03]
E1 = -180.0419883925891  E_coul = 54.78855567157194
cycle= 2 E= -125.253432721017  delta_E= -3.78e-06  |g|= 0.000816  |ddm|= 0.00116
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00108121
diis-c [-9.96103013e-07 -1.63888706e-03  1.00163889e+00]
  HOMO = -0.576252014182312  LUMO = 6.04436121415721
  mo_energy =
[-3.17477944e+01 -1.75588235e+00 -5.76252014e-01 -5.76252014e-01
 -5.76252014e-01  6.04436121e+00  6.04436121e+00  6.04436121e+00
  1.12338850e+02  6.15448677e+03]
E1 = -180.04091191737095  E_coul = 54.787479164844555
cycle= 3 E= -125.253432752526  delta_E= -3.15e-08  |g|= 0.000113  |ddm|= 0.000169
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000142828
diis-c [-8.45402382e-10 -2.04938465e-04  1.23140223e-01  8.77064716e-01]
  HOMO = -0.576309537536337  LUMO = 6.04425818597269
  mo_energy =
[-3.17480292e+01 -1.75595206e+00 -5.76309538e-01 -5.76309538e-01
 -5.76309538e-01  6.04425819e+00  6.04425819e+00  6.04425819e+00
  1.12338609e+02  6.15448649e+03]
E1 = -180.04105443236188  E_coul = 54.787621679098756
cycle= 4 E= -125.253432753263  delta_E= -7.37e-10  |g|= 1.03e-06  |ddm|= 2.25e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -180.04105443236188  E_coul = 54.787621679098756
  HOMO = -0.576308985308639  LUMO = 6.04425916130554
  mo_energy =
[-3.17480272e+01 -1.75595139e+00 -5.76308985e-01 -5.76308985e-01
 -5.76308985e-01  6.04425916e+00  6.04425916e+00  6.04425916e+00
  1.12338611e+02  6.15448649e+03]
E1 = -180.04105309032522  E_coul = 54.78762033706198
Extra cycle  E= -125.253432753263  delta_E= -1.14e-13  |g|= 1.39e-07  |ddm|= 2.11e-07
    CPU time for scf_cycle      0.08 sec, wall time      0.09 sec
exp = [4.61715104e+03 1.33282072e+02 1.96918624e+01 9.63655770e-01
 6.00657387e+00 9.45339177e-01]
E = -125.25343275326324
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:26:58 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.15104395        1
[INPUT] 0    0    [1    /1   ]  133.28207221         1
[INPUT] 0    0    [1    /1   ]  19.6918624409        1
[INPUT] 0    0    [1    /1   ]  0.963655769929       1
[INPUT] 1    0    [1    /1   ]  6.00657387426        1
[INPUT] 1    0    [1    /1   ]  0.9453391766         1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.151043950297, 1.0]], [0, [133.2820722103703, 1.0]], [0, [19.69186244087518, 1.0]], [0, [0.9636557699289567, 1.0]], [1, [6.00657387426257, 1.0]], [1, [0.945339176600431, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.15104395]
bas 1, expnt(s) = [133.28207221]
bas 2, expnt(s) = [19.69186244]
bas 3, expnt(s) = [0.96365577]
bas 4, expnt(s) = [6.00657387]
bas 5, expnt(s) = [0.94533918]
CPU time:        77.48
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61715104e+03 1.41512755e+03 1.33282072e+02 9.91046031e+01
 1.96918624e+01 2.36172931e+01 9.63655770e-01 2.45729031e+00
 6.00657387e+00 2.74326600e+01 9.45339177e-01 2.71937414e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.79299369808177
cond(S) = 4.207998805448896
E1 = -178.0639644621299  E_coul = 54.378498605051746
init E= -123.685465857078
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.656419452959002  LUMO = 5.97479524680823
  mo_energy =
[-3.16427724e+01 -1.82845130e+00 -6.56419453e-01 -6.56419453e-01
 -6.56419453e-01  5.97479525e+00  5.97479525e+00  5.97479525e+00
  1.12420534e+02  6.15477720e+03]
E1 = -180.03493877582392  E_coul = 54.78150983464166
cycle= 1 E= -125.253428941182  delta_E= -1.57  |g|= 0.149  |ddm|= 0.281
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.254141
diis-c [-0.06458756  1.        ]
  HOMO = -0.576693251851235  LUMO = 6.04357917488407
  mo_energy =
[-3.17494663e+01 -1.75641547e+00 -5.76693252e-01 -5.76693252e-01
 -5.76693252e-01  6.04357917e+00  6.04357917e+00  6.04357917e+00
  1.12337235e+02  6.15448579e+03]
E1 = -180.0419883925891  E_coul = 54.78855567157194
cycle= 2 E= -125.253432721017  delta_E= -3.78e-06  |g|= 0.000816  |ddm|= 0.00116
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00108121
diis-c [-9.96103013e-07 -1.63888706e-03  1.00163889e+00]
  HOMO = -0.576252014182312  LUMO = 6.04436121415721
  mo_energy =
[-3.17477944e+01 -1.75588235e+00 -5.76252014e-01 -5.76252014e-01
 -5.76252014e-01  6.04436121e+00  6.04436121e+00  6.04436121e+00
  1.12338850e+02  6.15448677e+03]
E1 = -180.04091191737095  E_coul = 54.787479164844555
cycle= 3 E= -125.253432752526  delta_E= -3.15e-08  |g|= 0.000113  |ddm|= 0.000169
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000142828
diis-c [-8.45402382e-10 -2.04938465e-04  1.23140223e-01  8.77064716e-01]
  HOMO = -0.576309537536337  LUMO = 6.04425818597269
  mo_energy =
[-3.17480292e+01 -1.75595206e+00 -5.76309538e-01 -5.76309538e-01
 -5.76309538e-01  6.04425819e+00  6.04425819e+00  6.04425819e+00
  1.12338609e+02  6.15448649e+03]
E1 = -180.04105443236188  E_coul = 54.787621679098756
cycle= 4 E= -125.253432753263  delta_E= -7.37e-10  |g|= 1.03e-06  |ddm|= 2.25e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -180.04105443236188  E_coul = 54.787621679098756
  HOMO = -0.576308985308639  LUMO = 6.04425916130554
  mo_energy =
[-3.17480272e+01 -1.75595139e+00 -5.76308985e-01 -5.76308985e-01
 -5.76308985e-01  6.04425916e+00  6.04425916e+00  6.04425916e+00
  1.12338611e+02  6.15448649e+03]
E1 = -180.04105309032522  E_coul = 54.78762033706198
Extra cycle  E= -125.253432753263  delta_E= -1.14e-13  |g|= 1.39e-07  |ddm|= 2.11e-07
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.207998805448896
E1 = -180.04105309032522  E_coul = 54.78762033706198
init E= -125.253432753263
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.576309066078715  LUMO = 6.04425901657138
  mo_energy =
[-3.17480275e+01 -1.75595149e+00 -5.76309066e-01 -5.76309066e-01
 -5.76309066e-01  6.04425902e+00  6.04425902e+00  6.04425902e+00
  1.12338611e+02  6.15448649e+03]
E1 = -180.04105329053894  E_coul = 54.78762053727575
cycle= 1 E= -125.253432753263  delta_E= 5.68e-14  |g|= 2.09e-08  |ddm|= 3.16e-08
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -180.04105329053894  E_coul = 54.78762053727575
  HOMO = -0.576309053971292  LUMO = 6.04425903823611
  mo_energy =
[-3.17480275e+01 -1.75595148e+00 -5.76309054e-01 -5.76309054e-01
 -5.76309054e-01  6.04425904e+00  6.04425904e+00  6.04425904e+00
  1.12338611e+02  6.15448649e+03]
E1 = -180.04105326058092  E_coul = 54.787620507317634
Extra cycle  E= -125.253432753263  delta_E= -1.14e-13  |g|= 3.13e-09  |ddm|= 4.73e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [4.61715104e+03 1.33282072e+02 1.96918624e+01 9.63655770e-01
 6.00657387e+00 9.45339177e-01]
grad_E = [ 1.33150295e-04  1.72214154e-03 -4.36516212e-03  2.00421889e-02
  8.70591504e-02 -2.48543089e-01]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:27:01 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.15368222        1
[INPUT] 0    0    [1    /1   ]  132.304145695        1
[INPUT] 0    0    [1    /1   ]  19.6380664086        1
[INPUT] 0    0    [1    /1   ]  0.977811097508       1
[INPUT] 1    0    [1    /1   ]  5.70024549794        1
[INPUT] 1    0    [1    /1   ]  0.896654483682       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.153682221262, 1.0]], [0, [132.3041456953212, 1.0]], [0, [19.638066408623203, 1.0]], [0, [0.9778110975080533, 1.0]], [1, [5.7002454979385595, 1.0]], [1, [0.8966544836822189, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.15368222]
bas 1, expnt(s) = [132.3041457]
bas 2, expnt(s) = [19.63806641]
bas 3, expnt(s) = [0.9778111]
bas 4, expnt(s) = [5.7002455]
bas 5, expnt(s) = [0.89665448]
CPU time:        80.42
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61715368e+03 1.41512816e+03 1.32304146e+02 9.85587335e+01
 1.96380664e+01 2.35688866e+01 9.77811098e-01 2.48431262e+00
 5.70024550e+00 2.56951610e+01 8.96654484e-01 2.54545719e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.811466651704588
cond(S) = 4.234783199653314
E1 = -178.05328058014044  E_coul = 54.38765364616722
init E= -123.665626933973
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.655947668125716  LUMO = 5.59257513267452
  mo_energy =
[-3.16480389e+01 -1.82465829e+00 -6.55947668e-01 -6.55947668e-01
 -6.55947668e-01  5.59257513e+00  5.59257513e+00  5.59257513e+00
  1.11555393e+02  6.15215518e+03]
E1 = -179.59849363650753  E_coul = 54.335037022286734
cycle= 1 E= -125.263456614221  delta_E= -1.6  |g|= 0.159  |ddm|= 0.312
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.264662
diis-c [-0.07004578  1.        ]
  HOMO = -0.609788554543059  LUMO = 5.61475193037068
  mo_energy =
[-3.18410391e+01 -1.79388167e+00 -6.09788555e-01 -6.09788555e-01
 -6.09788555e-01  5.61475193e+00  5.61475193e+00  5.61475193e+00
  1.11384814e+02  6.15177867e+03]
E1 = -179.66909948762023  E_coul = 54.40551384892825
cycle= 2 E= -125.263585638692  delta_E= -0.000129  |g|= 0.00749  |ddm|= 0.0111
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00946788
diis-c [-8.66587437e-05  6.48636354e-03  9.93513636e-01]
  HOMO = -0.605513251369027  LUMO = 5.62212252999387
  mo_energy =
[-3.18241226e+01 -1.78860417e+00 -6.05513251e-01 -6.05513251e-01
 -6.05513251e-01  5.62212253e+00  5.62212253e+00  5.62212253e+00
  1.11401911e+02  6.15179641e+03]
E1 = -179.65774171125068  E_coul = 54.39415277166733
cycle= 3 E= -125.263588939583  delta_E= -3.3e-06  |g|= 0.00115  |ddm|= 0.00178
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00145197
diis-c [-1.84724498e-09 -2.46869224e-04  1.31913829e-01  8.68333041e-01]
  HOMO = -0.606083614499402  LUMO = 5.62113877839905
  mo_energy =
[-3.18264023e+01 -1.78930834e+00 -6.06083614e-01 -6.06083614e-01
 -6.06083614e-01  5.62113878e+00  5.62113878e+00  5.62113878e+00
  1.11399589e+02  6.15179384e+03]
E1 = -179.65925949336858  E_coul = 54.395670473405154
cycle= 4 E= -125.263589019963  delta_E= -8.04e-08  |g|= 7.43e-07  |ddm|= 0.000238
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=9.40062e-07
diis-c [-2.25722422e-16  2.94337217e-06 -1.94873220e-03 -1.23150989e-02
  1.01426089e+00]
  HOMO = -0.606083350016854  LUMO = 5.62113924402441
  mo_energy =
[-3.18264015e+01 -1.78930801e+00 -6.06083350e-01 -6.06083350e-01
 -6.06083350e-01  5.62113924e+00  5.62113924e+00  5.62113924e+00
  1.11399589e+02  6.15179384e+03]
E1 = -179.6592588220502  E_coul = 54.39566980208673
cycle= 5 E= -125.263589019963  delta_E= -2.84e-14  |g|= 2.78e-10  |ddm|= 1.04e-07
    CPU time for cycle= 5      0.02 sec, wall time      0.02 sec
E1 = -179.6592588220502  E_coul = 54.39566980208673
  HOMO = -0.606083350109577  LUMO = 5.62113924348148
  mo_energy =
[-3.18264015e+01 -1.78930801e+00 -6.06083350e-01 -6.06083350e-01
 -6.06083350e-01  5.62113924e+00  5.62113924e+00  5.62113924e+00
  1.11399589e+02  6.15179384e+03]
E1 = -179.6592588222379  E_coul = 54.39566980227433
Extra cycle  E= -125.263589019964  delta_E= -9.95e-14  |g|= 1.94e-11  |ddm|= 2.9e-11
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [4.61715368e+03 1.32304146e+02 1.96380664e+01 9.77811098e-01
 5.70024550e+00 8.96654484e-01]
E = -125.26358901996356
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:27:02 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.15368222        1
[INPUT] 0    0    [1    /1   ]  132.304145695        1
[INPUT] 0    0    [1    /1   ]  19.6380664086        1
[INPUT] 0    0    [1    /1   ]  0.977811097508       1
[INPUT] 1    0    [1    /1   ]  5.70024549794        1
[INPUT] 1    0    [1    /1   ]  0.896654483682       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.153682221262, 1.0]], [0, [132.3041456953212, 1.0]], [0, [19.638066408623203, 1.0]], [0, [0.9778110975080533, 1.0]], [1, [5.7002454979385595, 1.0]], [1, [0.8966544836822189, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.15368222]
bas 1, expnt(s) = [132.3041457]
bas 2, expnt(s) = [19.63806641]
bas 3, expnt(s) = [0.9778111]
bas 4, expnt(s) = [5.7002455]
bas 5, expnt(s) = [0.89665448]
CPU time:        80.90
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61715368e+03 1.41512816e+03 1.32304146e+02 9.85587335e+01
 1.96380664e+01 2.35688866e+01 9.77811098e-01 2.48431262e+00
 5.70024550e+00 2.56951610e+01 8.96654484e-01 2.54545719e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.811466651704588
cond(S) = 4.234783199653314
E1 = -178.05328058014044  E_coul = 54.38765364616722
init E= -123.665626933973
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.655947668125716  LUMO = 5.59257513267452
  mo_energy =
[-3.16480389e+01 -1.82465829e+00 -6.55947668e-01 -6.55947668e-01
 -6.55947668e-01  5.59257513e+00  5.59257513e+00  5.59257513e+00
  1.11555393e+02  6.15215518e+03]
E1 = -179.59849363650753  E_coul = 54.335037022286734
cycle= 1 E= -125.263456614221  delta_E= -1.6  |g|= 0.159  |ddm|= 0.312
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.264662
diis-c [-0.07004578  1.        ]
  HOMO = -0.609788554543059  LUMO = 5.61475193037068
  mo_energy =
[-3.18410391e+01 -1.79388167e+00 -6.09788555e-01 -6.09788555e-01
 -6.09788555e-01  5.61475193e+00  5.61475193e+00  5.61475193e+00
  1.11384814e+02  6.15177867e+03]
E1 = -179.66909948762023  E_coul = 54.40551384892825
cycle= 2 E= -125.263585638692  delta_E= -0.000129  |g|= 0.00749  |ddm|= 0.0111
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00946788
diis-c [-8.66587437e-05  6.48636354e-03  9.93513636e-01]
  HOMO = -0.605513251369027  LUMO = 5.62212252999387
  mo_energy =
[-3.18241226e+01 -1.78860417e+00 -6.05513251e-01 -6.05513251e-01
 -6.05513251e-01  5.62212253e+00  5.62212253e+00  5.62212253e+00
  1.11401911e+02  6.15179641e+03]
E1 = -179.65774171125068  E_coul = 54.39415277166733
cycle= 3 E= -125.263588939583  delta_E= -3.3e-06  |g|= 0.00115  |ddm|= 0.00178
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00145197
diis-c [-1.84724498e-09 -2.46869224e-04  1.31913829e-01  8.68333041e-01]
  HOMO = -0.606083614499402  LUMO = 5.62113877839905
  mo_energy =
[-3.18264023e+01 -1.78930834e+00 -6.06083614e-01 -6.06083614e-01
 -6.06083614e-01  5.62113878e+00  5.62113878e+00  5.62113878e+00
  1.11399589e+02  6.15179384e+03]
E1 = -179.65925949336858  E_coul = 54.395670473405154
cycle= 4 E= -125.263589019963  delta_E= -8.04e-08  |g|= 7.43e-07  |ddm|= 0.000238
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=9.40062e-07
diis-c [-2.25722422e-16  2.94337217e-06 -1.94873220e-03 -1.23150989e-02
  1.01426089e+00]
  HOMO = -0.606083350016854  LUMO = 5.62113924402441
  mo_energy =
[-3.18264015e+01 -1.78930801e+00 -6.06083350e-01 -6.06083350e-01
 -6.06083350e-01  5.62113924e+00  5.62113924e+00  5.62113924e+00
  1.11399589e+02  6.15179384e+03]
E1 = -179.6592588220502  E_coul = 54.39566980208673
cycle= 5 E= -125.263589019963  delta_E= -2.84e-14  |g|= 2.78e-10  |ddm|= 1.04e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -179.6592588220502  E_coul = 54.39566980208673
  HOMO = -0.606083350109577  LUMO = 5.62113924348148
  mo_energy =
[-3.18264015e+01 -1.78930801e+00 -6.06083350e-01 -6.06083350e-01
 -6.06083350e-01  5.62113924e+00  5.62113924e+00  5.62113924e+00
  1.11399589e+02  6.15179384e+03]
E1 = -179.6592588222379  E_coul = 54.39566980227433
Extra cycle  E= -125.263589019964  delta_E= -9.95e-14  |g|= 1.94e-11  |ddm|= 2.9e-11
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.234783199653314
E1 = -179.6592588222379  E_coul = 54.39566980227433
init E= -125.263589019964
    CPU time for initialize scf      0.04 sec, wall time      0.05 sec
  HOMO = -0.606083350098336  LUMO = 5.62113924350095
  mo_energy =
[-3.18264015e+01 -1.78930801e+00 -6.06083350e-01 -6.06083350e-01
 -6.06083350e-01  5.62113924e+00  5.62113924e+00  5.62113924e+00
  1.11399589e+02  6.15179384e+03]
E1 = -179.65925882220722  E_coul = 54.39566980224377
cycle= 1 E= -125.263589019963  delta_E= 1.14e-13  |g|= 3.26e-12  |ddm|= 4.79e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -179.65925882220722  E_coul = 54.39566980224377
  HOMO = -0.606083350100199  LUMO = 5.62113924349775
  mo_energy =
[-3.18264015e+01 -1.78930801e+00 -6.06083350e-01 -6.06083350e-01
 -6.06083350e-01  5.62113924e+00  5.62113924e+00  5.62113924e+00
  1.11399589e+02  6.15179384e+03]
E1 = -179.65925882221234  E_coul = 54.39566980224885
Extra cycle  E= -125.263589019963  delta_E= -4.26e-14  |g|= 1.03e-12  |ddm|= 7.77e-13
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
exp = [4.61715368e+03 1.32304146e+02 1.96380664e+01 9.77811098e-01
 5.70024550e+00 8.96654484e-01]
grad_E = [ 1.34097862e-04  1.24411506e-03 -4.31560918e-03  5.43170634e-02
  8.74996913e-02 -4.63021731e-01]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:27:04 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.15638847        1
[INPUT] 0    0    [1    /1   ]  131.182272876        1
[INPUT] 0    0    [1    /1   ]  19.6102665354        1
[INPUT] 0    0    [1    /1   ]  0.978894513221       1
[INPUT] 1    0    [1    /1   ]  5.55654450225        1
[INPUT] 1    0    [1    /1   ]  0.878153384075       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.156388471706, 1.0]], [0, [131.1822728755238, 1.0]], [0, [19.610266535443166, 1.0]], [0, [0.9788945132210596, 1.0]], [1, [5.556544502250602, 1.0]], [1, [0.8781533840750329, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.15638847]
bas 1, expnt(s) = [131.18227288]
bas 2, expnt(s) = [19.61026654]
bas 3, expnt(s) = [0.97889451]
bas 4, expnt(s) = [5.5565445]
bas 5, expnt(s) = [0.87815338]
CPU time:        83.74
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61715639e+03 1.41512878e+03 1.31182273e+02 9.79312702e+01
 1.96102665e+01 2.35438589e+01 9.78894513e-01 2.48637680e+00
 5.55654450e+00 2.48880224e+01 8.78153384e-01 2.47997536e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.818708609298064
cond(S) = 4.258610928622894
E1 = -178.00213954002626  E_coul = 54.374871114196026
init E= -123.62726842583
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.656346596002479  LUMO = 5.42932154800846
  mo_energy =
[-3.16553467e+01 -1.82445784e+00 -6.56346596e-01 -6.56346596e-01
 -6.56346596e-01  5.42932155e+00  5.42932155e+00  5.42932155e+00
  1.10624233e+02  6.14920242e+03]
E1 = -179.43598611796145  E_coul = 54.16868810011067
cycle= 1 E= -125.267298017851  delta_E= -1.64  |g|= 0.167  |ddm|= 0.322
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.27443
diis-c [-0.07531176  1.        ]
  HOMO = -0.622093022090845  LUMO = 5.43664979616235
  mo_energy =
[-3.18751947e+01 -1.80796234e+00 -6.22093022e-01 -6.22093022e-01
 -6.22093022e-01  5.43664980e+00  5.43664980e+00  5.43664980e+00
  1.10427634e+02  6.14880552e+03]
E1 = -179.53006416187938  E_coul = 54.262546936581295
cycle= 2 E= -125.267517225298  delta_E= -0.000219  |g|= 0.00998  |ddm|= 0.0148
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0126063
diis-c [-1.48291057e-04  1.17511209e-02  9.88248879e-01]
  HOMO = -0.616412658237285  LUMO = 5.44625123682826
  mo_energy =
[-3.18528772e+01 -1.80092525e+00 -6.16412658e-01 -6.16412658e-01
 -6.16412658e-01  5.44625124e+00  5.44625124e+00  5.44625124e+00
  1.10450200e+02  6.14882922e+03]
E1 = -179.51455746836461  E_coul = 54.24703421352382
cycle= 3 E= -125.267523254841  delta_E= -6.03e-06  |g|= 0.00152  |ddm|= 0.00243
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00192254
diis-c [-1.86408074e-09 -2.50689728e-04  1.31217404e-01  8.69033286e-01]
  HOMO = -0.617166086017155  LUMO = 5.44497801860669
  mo_energy =
[-3.18558603e+01 -1.80185851e+00 -6.17166086e-01 -6.17166086e-01
 -6.17166086e-01  5.44497802e+00  5.44497802e+00  5.44497802e+00
  1.10447165e+02  6.14882586e+03]
E1 = -179.51661666578406  E_coul = 54.24909326627536
cycle= 4 E= -125.267523399509  delta_E= -1.45e-07  |g|= 7.06e-07  |ddm|= 0.000323
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=8.92178e-07
diis-c [-2.73102348e-16  3.02728267e-06 -1.94159000e-03 -1.25061877e-02
  1.01444475e+00]
  HOMO = -0.61716585005737  LUMO = 5.44497844933624
  mo_energy =
[-3.18558596e+01 -1.80185821e+00 -6.17165850e-01 -6.17165850e-01
 -6.17165850e-01  5.44497845e+00  5.44497845e+00  5.44497845e+00
  1.10447165e+02  6.14882586e+03]
E1 = -179.51661605225007  E_coul = 54.249092652741375
cycle= 5 E= -125.267523399509  delta_E=    0  |g|= 2.47e-10  |ddm|= 9.52e-08
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -179.51661605225007  E_coul = 54.249092652741375
  HOMO = -0.617165850033014  LUMO = 5.4449784486719
  mo_energy =
[-3.18558596e+01 -1.80185821e+00 -6.17165850e-01 -6.17165850e-01
 -6.17165850e-01  5.44497845e+00  5.44497845e+00  5.44497845e+00
  1.10447165e+02  6.14882586e+03]
E1 = -179.5166160521358  E_coul = 54.24909265262698
Extra cycle  E= -125.267523399509  delta_E= -1.14e-13  |g|= 1.31e-11  |ddm|= 1.96e-11
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
exp = [4.61715639e+03 1.31182273e+02 1.96102665e+01 9.78894513e-01
 5.55654450e+00 8.78153384e-01]
E = -125.2675233995088
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:27:05 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.15638847        1
[INPUT] 0    0    [1    /1   ]  131.182272876        1
[INPUT] 0    0    [1    /1   ]  19.6102665354        1
[INPUT] 0    0    [1    /1   ]  0.978894513221       1
[INPUT] 1    0    [1    /1   ]  5.55654450225        1
[INPUT] 1    0    [1    /1   ]  0.878153384075       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.156388471706, 1.0]], [0, [131.1822728755238, 1.0]], [0, [19.610266535443166, 1.0]], [0, [0.9788945132210596, 1.0]], [1, [5.556544502250602, 1.0]], [1, [0.8781533840750329, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.15638847]
bas 1, expnt(s) = [131.18227288]
bas 2, expnt(s) = [19.61026654]
bas 3, expnt(s) = [0.97889451]
bas 4, expnt(s) = [5.5565445]
bas 5, expnt(s) = [0.87815338]
CPU time:        84.21
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61715639e+03 1.41512878e+03 1.31182273e+02 9.79312702e+01
 1.96102665e+01 2.35438589e+01 9.78894513e-01 2.48637680e+00
 5.55654450e+00 2.48880224e+01 8.78153384e-01 2.47997536e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.818708609298064
cond(S) = 4.258610928622894
E1 = -178.00213954002626  E_coul = 54.374871114196026
init E= -123.62726842583
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.656346596002479  LUMO = 5.42932154800846
  mo_energy =
[-3.16553467e+01 -1.82445784e+00 -6.56346596e-01 -6.56346596e-01
 -6.56346596e-01  5.42932155e+00  5.42932155e+00  5.42932155e+00
  1.10624233e+02  6.14920242e+03]
E1 = -179.43598611796145  E_coul = 54.16868810011067
cycle= 1 E= -125.267298017851  delta_E= -1.64  |g|= 0.167  |ddm|= 0.322
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.27443
diis-c [-0.07531176  1.        ]
  HOMO = -0.622093022090845  LUMO = 5.43664979616235
  mo_energy =
[-3.18751947e+01 -1.80796234e+00 -6.22093022e-01 -6.22093022e-01
 -6.22093022e-01  5.43664980e+00  5.43664980e+00  5.43664980e+00
  1.10427634e+02  6.14880552e+03]
E1 = -179.53006416187938  E_coul = 54.262546936581295
cycle= 2 E= -125.267517225298  delta_E= -0.000219  |g|= 0.00998  |ddm|= 0.0148
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0126063
diis-c [-1.48291057e-04  1.17511209e-02  9.88248879e-01]
  HOMO = -0.616412658237285  LUMO = 5.44625123682826
  mo_energy =
[-3.18528772e+01 -1.80092525e+00 -6.16412658e-01 -6.16412658e-01
 -6.16412658e-01  5.44625124e+00  5.44625124e+00  5.44625124e+00
  1.10450200e+02  6.14882922e+03]
E1 = -179.51455746836461  E_coul = 54.24703421352382
cycle= 3 E= -125.267523254841  delta_E= -6.03e-06  |g|= 0.00152  |ddm|= 0.00243
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00192254
diis-c [-1.86408074e-09 -2.50689728e-04  1.31217404e-01  8.69033286e-01]
  HOMO = -0.617166086017155  LUMO = 5.44497801860669
  mo_energy =
[-3.18558603e+01 -1.80185851e+00 -6.17166086e-01 -6.17166086e-01
 -6.17166086e-01  5.44497802e+00  5.44497802e+00  5.44497802e+00
  1.10447165e+02  6.14882586e+03]
E1 = -179.51661666578406  E_coul = 54.24909326627536
cycle= 4 E= -125.267523399509  delta_E= -1.45e-07  |g|= 7.06e-07  |ddm|= 0.000323
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=8.92178e-07
diis-c [-2.73102348e-16  3.02728267e-06 -1.94159000e-03 -1.25061877e-02
  1.01444475e+00]
  HOMO = -0.61716585005737  LUMO = 5.44497844933624
  mo_energy =
[-3.18558596e+01 -1.80185821e+00 -6.17165850e-01 -6.17165850e-01
 -6.17165850e-01  5.44497845e+00  5.44497845e+00  5.44497845e+00
  1.10447165e+02  6.14882586e+03]
E1 = -179.51661605225007  E_coul = 54.249092652741375
cycle= 5 E= -125.267523399509  delta_E=    0  |g|= 2.47e-10  |ddm|= 9.52e-08
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -179.51661605225007  E_coul = 54.249092652741375
  HOMO = -0.617165850033014  LUMO = 5.4449784486719
  mo_energy =
[-3.18558596e+01 -1.80185821e+00 -6.17165850e-01 -6.17165850e-01
 -6.17165850e-01  5.44497845e+00  5.44497845e+00  5.44497845e+00
  1.10447165e+02  6.14882586e+03]
E1 = -179.5166160521358  E_coul = 54.24909265262698
Extra cycle  E= -125.267523399509  delta_E= -1.14e-13  |g|= 1.31e-11  |ddm|= 1.96e-11
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.258610928622894
E1 = -179.5166160521358  E_coul = 54.24909265262698
init E= -125.267523399509
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.617165850040169  LUMO = 5.44497844865989
  mo_energy =
[-3.18558596e+01 -1.80185821e+00 -6.17165850e-01 -6.17165850e-01
 -6.17165850e-01  5.44497845e+00  5.44497845e+00  5.44497845e+00
  1.10447165e+02  6.14882586e+03]
E1 = -179.51661605215463  E_coul = 54.24909265264585
cycle= 1 E= -125.267523399509  delta_E= 2.84e-14  |g|= 1.99e-12  |ddm|= 2.95e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -179.51661605215463  E_coul = 54.24909265264585
  HOMO = -0.617165850039016  LUMO = 5.44497844866184
  mo_energy =
[-3.18558596e+01 -1.80185821e+00 -6.17165850e-01 -6.17165850e-01
 -6.17165850e-01  5.44497845e+00  5.44497845e+00  5.44497845e+00
  1.10447165e+02  6.14882586e+03]
E1 = -179.5166160521514  E_coul = 54.249092652642695
Extra cycle  E= -125.267523399509  delta_E= 8.53e-14  |g|= 3.9e-13  |ddm|= 4.96e-13
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
exp = [4.61715639e+03 1.31182273e+02 1.96102665e+01 9.78894513e-01
 5.55654450e+00 8.78153384e-01]
grad_E = [ 1.35247802e-04  3.69004942e-04  9.17383835e-04  4.85837259e-02
  8.15509068e-02 -5.12408610e-01]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:27:08 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.15912495        1
[INPUT] 0    0    [1    /1   ]  129.92810621         1
[INPUT] 0    0    [1    /1   ]  19.574934625         1
[INPUT] 0    0    [1    /1   ]  0.975556924018       1
[INPUT] 1    0    [1    /1   ]  5.38819000636        1
[INPUT] 1    0    [1    /1   ]  0.864141249964       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.159124948509, 1.0]], [0, [129.9281062103384, 1.0]], [0, [19.574934624970332, 1.0]], [0, [0.9755569240175928, 1.0]], [1, [5.388190006361808, 1.0]], [1, [0.8641412499639504, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.15912495]
bas 1, expnt(s) = [129.92810621]
bas 2, expnt(s) = [19.57493462]
bas 3, expnt(s) = [0.97555692]
bas 4, expnt(s) = [5.38819001]
bas 5, expnt(s) = [0.86414125]
CPU time:        87.00
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61715912e+03 1.41512941e+03 1.29928106e+02 9.72282246e+01
 1.95749346e+01 2.35120374e+01 9.75556924e-01 2.48001602e+00
 5.38819001e+00 2.39490351e+01 8.64141250e-01 2.43061019e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.825101320333866
cond(S) = 4.281627500296427
E1 = -177.94169403348  E_coul = 54.35156132775869
init E= -123.590132705721
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.656589887979996  LUMO = 5.26735690311421
  mo_energy =
[-3.16687854e+01 -1.82447498e+00 -6.56589888e-01 -6.56589888e-01
 -6.56589888e-01  5.26735690e+00  5.26735690e+00  5.26735690e+00
  1.09550676e+02  6.14588662e+03]
E1 = -179.34225699919227  E_coul = 54.06960012122059
cycle= 1 E= -125.272656877972  delta_E= -1.68  |g|= 0.172  |ddm|= 0.324
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.282276
diis-c [-0.07967993  1.        ]
  HOMO = -0.629403257795651  LUMO = 5.26851549101735
  mo_energy =
[-3.18978025e+01 -1.81567447e+00 -6.29403258e-01 -6.29403258e-01
 -6.29403258e-01  5.26851549e+00  5.26851549e+00  5.26851549e+00
  1.09346156e+02  6.14548689e+03]
E1 = -179.44705646022618  E_coul = 54.174136228274165
cycle= 2 E= -125.272920231952  delta_E= -0.000263  |g|= 0.0111  |ddm|= 0.0165
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0139614
diis-c [-1.79648564e-04  1.36706097e-02  9.86329390e-01]
  HOMO = -0.623049148224113  LUMO = 5.27896607978307
  mo_energy =
[-3.18731447e+01 -1.80781920e+00 -6.23049148e-01 -6.23049148e-01
 -6.23049148e-01  5.27896608e+00  5.27896608e+00  5.27896608e+00
  1.09371070e+02  6.14551311e+03]
E1 = -179.42940651313697  E_coul = 54.156478658649185
cycle= 3 E= -125.272927854488  delta_E= -7.62e-06  |g|= 0.00171  |ddm|= 0.00277
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00215447
diis-c [-1.67594761e-09 -2.50243868e-04  1.32595287e-01  8.67654957e-01]
  HOMO = -0.623900325730399  LUMO = 5.27756685620054
  mo_energy =
[-3.18764711e+01 -1.80887113e+00 -6.23900326e-01 -6.23900326e-01
 -6.23900326e-01  5.27756686e+00  5.27756686e+00  5.27756686e+00
  1.09367691e+02  6.14550939e+03]
E1 = -179.4317734661664  E_coul = 54.15884542449639
cycle= 4 E= -125.27292804167  delta_E= -1.87e-07  |g|= 6.78e-07  |ddm|= 0.000372
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=8.51246e-07
diis-c [-4.71637580e-16  3.08708017e-06 -1.96284017e-03 -1.25419516e-02
  1.01450170e+00]
  HOMO = -0.623900097136975  LUMO = 5.27756727863008
  mo_energy =
[-3.18764705e+01 -1.80887083e+00 -6.23900097e-01 -6.23900097e-01
 -6.23900097e-01  5.27756728e+00  5.27756728e+00  5.27756728e+00
  1.09367692e+02  6.14550939e+03]
E1 = -179.43177286125143  E_coul = 54.15884481958146
cycle= 5 E= -125.27292804167  delta_E= 2.84e-14  |g|= 3.4e-10  |ddm|= 9.4e-08
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -179.43177286125143  E_coul = 54.15884481958146
  HOMO = -0.623900097139874  LUMO = 5.27756727772078
  mo_energy =
[-3.18764705e+01 -1.80887084e+00 -6.23900097e-01 -6.23900097e-01
 -6.23900097e-01  5.27756728e+00  5.27756728e+00  5.27756728e+00
  1.09367692e+02  6.14550939e+03]
E1 = -179.43177286123284  E_coul = 54.15884481956294
Extra cycle  E= -125.27292804167  delta_E= 7.11e-14  |g|= 4.8e-12  |ddm|= 8.29e-12
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
exp = [4.61715912e+03 1.29928106e+02 1.95749346e+01 9.75556924e-01
 5.38819001e+00 8.64141250e-01]
E = -125.2729280416699
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:27:08 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.15912495        1
[INPUT] 0    0    [1    /1   ]  129.92810621         1
[INPUT] 0    0    [1    /1   ]  19.574934625         1
[INPUT] 0    0    [1    /1   ]  0.975556924018       1
[INPUT] 1    0    [1    /1   ]  5.38819000636        1
[INPUT] 1    0    [1    /1   ]  0.864141249964       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.159124948509, 1.0]], [0, [129.9281062103384, 1.0]], [0, [19.574934624970332, 1.0]], [0, [0.9755569240175928, 1.0]], [1, [5.388190006361808, 1.0]], [1, [0.8641412499639504, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.15912495]
bas 1, expnt(s) = [129.92810621]
bas 2, expnt(s) = [19.57493462]
bas 3, expnt(s) = [0.97555692]
bas 4, expnt(s) = [5.38819001]
bas 5, expnt(s) = [0.86414125]
CPU time:        87.48
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61715912e+03 1.41512941e+03 1.29928106e+02 9.72282246e+01
 1.95749346e+01 2.35120374e+01 9.75556924e-01 2.48001602e+00
 5.38819001e+00 2.39490351e+01 8.64141250e-01 2.43061019e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.825101320333866
cond(S) = 4.281627500296427
E1 = -177.94169403348  E_coul = 54.35156132775869
init E= -123.590132705721
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.656589887979996  LUMO = 5.26735690311421
  mo_energy =
[-3.16687854e+01 -1.82447498e+00 -6.56589888e-01 -6.56589888e-01
 -6.56589888e-01  5.26735690e+00  5.26735690e+00  5.26735690e+00
  1.09550676e+02  6.14588662e+03]
E1 = -179.34225699919227  E_coul = 54.06960012122059
cycle= 1 E= -125.272656877972  delta_E= -1.68  |g|= 0.172  |ddm|= 0.324
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.282276
diis-c [-0.07967993  1.        ]
  HOMO = -0.629403257795651  LUMO = 5.26851549101735
  mo_energy =
[-3.18978025e+01 -1.81567447e+00 -6.29403258e-01 -6.29403258e-01
 -6.29403258e-01  5.26851549e+00  5.26851549e+00  5.26851549e+00
  1.09346156e+02  6.14548689e+03]
E1 = -179.44705646022618  E_coul = 54.174136228274165
cycle= 2 E= -125.272920231952  delta_E= -0.000263  |g|= 0.0111  |ddm|= 0.0165
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0139614
diis-c [-1.79648564e-04  1.36706097e-02  9.86329390e-01]
  HOMO = -0.623049148224113  LUMO = 5.27896607978307
  mo_energy =
[-3.18731447e+01 -1.80781920e+00 -6.23049148e-01 -6.23049148e-01
 -6.23049148e-01  5.27896608e+00  5.27896608e+00  5.27896608e+00
  1.09371070e+02  6.14551311e+03]
E1 = -179.42940651313697  E_coul = 54.156478658649185
cycle= 3 E= -125.272927854488  delta_E= -7.62e-06  |g|= 0.00171  |ddm|= 0.00277
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00215447
diis-c [-1.67594761e-09 -2.50243868e-04  1.32595287e-01  8.67654957e-01]
  HOMO = -0.623900325730399  LUMO = 5.27756685620054
  mo_energy =
[-3.18764711e+01 -1.80887113e+00 -6.23900326e-01 -6.23900326e-01
 -6.23900326e-01  5.27756686e+00  5.27756686e+00  5.27756686e+00
  1.09367691e+02  6.14550939e+03]
E1 = -179.4317734661664  E_coul = 54.15884542449639
cycle= 4 E= -125.27292804167  delta_E= -1.87e-07  |g|= 6.78e-07  |ddm|= 0.000372
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=8.51246e-07
diis-c [-4.71637580e-16  3.08708017e-06 -1.96284017e-03 -1.25419516e-02
  1.01450170e+00]
  HOMO = -0.623900097136975  LUMO = 5.27756727863008
  mo_energy =
[-3.18764705e+01 -1.80887083e+00 -6.23900097e-01 -6.23900097e-01
 -6.23900097e-01  5.27756728e+00  5.27756728e+00  5.27756728e+00
  1.09367692e+02  6.14550939e+03]
E1 = -179.43177286125143  E_coul = 54.15884481958146
cycle= 5 E= -125.27292804167  delta_E= 2.84e-14  |g|= 3.4e-10  |ddm|= 9.4e-08
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -179.43177286125143  E_coul = 54.15884481958146
  HOMO = -0.623900097139874  LUMO = 5.27756727772078
  mo_energy =
[-3.18764705e+01 -1.80887084e+00 -6.23900097e-01 -6.23900097e-01
 -6.23900097e-01  5.27756728e+00  5.27756728e+00  5.27756728e+00
  1.09367692e+02  6.14550939e+03]
E1 = -179.43177286123284  E_coul = 54.15884481956294
Extra cycle  E= -125.27292804167  delta_E= 7.11e-14  |g|= 4.8e-12  |ddm|= 8.29e-12
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.281627500296427
E1 = -179.43177286123284  E_coul = 54.15884481956294
init E= -125.27292804167
    CPU time for initialize scf      0.04 sec, wall time      0.04 sec
  HOMO = -0.62390009714124  LUMO = 5.27756727771865
  mo_energy =
[-3.18764705e+01 -1.80887084e+00 -6.23900097e-01 -6.23900097e-01
 -6.23900097e-01  5.27756728e+00  5.27756728e+00  5.27756728e+00
  1.09367692e+02  6.14550939e+03]
E1 = -179.4317728612358  E_coul = 54.15884481956585
cycle= 1 E= -125.27292804167  delta_E= -5.68e-14  |g|= 7.68e-13  |ddm|= 4.48e-13
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -179.4317728612358  E_coul = 54.15884481956585
  HOMO = -0.623900097141063  LUMO = 5.27756727771894
  mo_energy =
[-3.18764705e+01 -1.80887084e+00 -6.23900097e-01 -6.23900097e-01
 -6.23900097e-01  5.27756728e+00  5.27756728e+00  5.27756728e+00
  1.09367692e+02  6.14550939e+03]
E1 = -179.43177286123537  E_coul = 54.15884481956536
Extra cycle  E= -125.27292804167  delta_E= -5.68e-14  |g|= 9.62e-13  |ddm|= 7.97e-14
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [4.61715912e+03 1.29928106e+02 1.95749346e+01 9.75556924e-01
 5.38819001e+00 8.64141250e-01]
grad_E = [ 1.36485954e-04 -6.16374139e-04  6.69125519e-03  2.85858937e-02
  6.26878234e-02 -4.68674880e-01]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:27:11 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.16026054        1
[INPUT] 0    0    [1    /1   ]  129.154902395        1
[INPUT] 0    0    [1    /1   ]  19.5369294865        1
[INPUT] 0    0    [1    /1   ]  0.968075992892       1
[INPUT] 1    0    [1    /1   ]  5.23197927304        1
[INPUT] 1    0    [1    /1   ]  0.862000409381       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.160260535008, 1.0]], [0, [129.15490239542046, 1.0]], [0, [19.53692948653949, 1.0]], [0, [0.968075992891857, 1.0]], [1, [5.231979273037467, 1.0]], [1, [0.8620004093813219, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.16026054]
bas 1, expnt(s) = [129.1549024]
bas 2, expnt(s) = [19.53692949]
bas 3, expnt(s) = [0.96807599]
bas 4, expnt(s) = [5.23197927]
bas 5, expnt(s) = [0.86200041]
CPU time:        90.26
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61716026e+03 1.41512967e+03 1.29154902e+02 9.67939462e+01
 1.95369295e+01 2.34777923e+01 9.68075993e-01 2.46573904e+00
 5.23197927e+00 2.30843107e+01 8.62000409e-01 2.42308547e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.827826967262094
cond(S) = 4.289437235093106
E1 = -177.90402083346157  E_coul = 54.320913452801896
init E= -123.58310738066
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.656127408580734  LUMO = 5.15824664909053
  mo_energy =
[-3.16882925e+01 -1.82428902e+00 -6.56127409e-01 -6.56127409e-01
 -6.56127409e-01  5.15824665e+00  5.15824665e+00  5.15824665e+00
  1.08806358e+02  6.14379029e+03]
E1 = -179.39629355168776  E_coul = 54.117554973706845
cycle= 1 E= -125.278738577981  delta_E= -1.7  |g|= 0.169  |ddm|= 0.31
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.281966
diis-c [-0.07950476  1.        ]
  HOMO = -0.625391850847109  LUMO = 5.16900529958712
  mo_energy =
[-3.18948118e+01 -1.80971624e+00 -6.25391851e-01 -6.25391851e-01
 -6.25391851e-01  5.16900530e+00  5.16900530e+00  5.16900530e+00
  1.08625298e+02  6.14341411e+03]
E1 = -179.48464364720058  E_coul = 54.20571915149391
cycle= 2 E= -125.278924495707  delta_E= -0.000186  |g|= 0.00925  |ddm|= 0.014
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0116043
diis-c [-1.28363804e-04  8.82693923e-03  9.91173061e-01]
  HOMO = -0.619957774560714  LUMO = 5.17767604970974
  mo_energy =
[-3.18740619e+01 -1.80305987e+00 -6.19957775e-01 -6.19957775e-01
 -6.19957775e-01  5.17767605e+00  5.17767605e+00  5.17767605e+00
  1.08646230e+02  6.14343591e+03]
E1 = -179.46962667289958  E_coul = 54.190696789676124
cycle= 3 E= -125.278929883223  delta_E= -5.39e-06  |g|= 0.00148  |ddm|= 0.00238
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00186174
diis-c [-1.46453200e-09 -2.46997759e-04  1.37241054e-01  8.63005944e-01]
  HOMO = -0.620710751907804  LUMO = 5.17647468182172
  mo_energy =
[-3.18769627e+01 -1.80398189e+00 -6.20710752e-01 -6.20710752e-01
 -6.20710752e-01  5.17647468e+00  5.17647468e+00  5.17647468e+00
  1.08643287e+02  6.14343267e+03]
E1 = -179.4717109767098  E_coul = 54.1927809499421
cycle= 4 E= -125.278930026768  delta_E= -1.44e-07  |g|= 7.1e-07  |ddm|= 0.00033
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=8.82442e-07
diis-c [-1.09854154e-15  3.07768504e-06 -2.02224133e-03 -1.23275780e-02
  1.01434674e+00]
  HOMO = -0.620710483191324  LUMO = 5.17647514113599
  mo_energy =
[-3.18769619e+01 -1.80398155e+00 -6.20710483e-01 -6.20710483e-01
 -6.20710483e-01  5.17647514e+00  5.17647514e+00  5.17647514e+00
  1.08643288e+02  6.14343267e+03]
E1 = -179.47171026864012  E_coul = 54.192780241872505
cycle= 5 E= -125.278930026768  delta_E= 8.53e-14  |g|= 8.03e-10  |ddm|= 1.11e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -179.47171026864012  E_coul = 54.192780241872505
  HOMO = -0.620710483528963  LUMO = 5.17647513994273
  mo_energy =
[-3.18769619e+01 -1.80398155e+00 -6.20710484e-01 -6.20710484e-01
 -6.20710484e-01  5.17647514e+00  5.17647514e+00  5.17647514e+00
  1.08643288e+02  6.14343267e+03]
E1 = -179.47171026952464  E_coul = 54.19278024275701
Extra cycle  E= -125.278930026768  delta_E=    0  |g|= 9.11e-11  |ddm|= 1.39e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
exp = [4.61716026e+03 1.29154902e+02 1.95369295e+01 9.68075993e-01
 5.23197927e+00 8.62000409e-01]
E = -125.27893002676763
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:27:11 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.16026054        1
[INPUT] 0    0    [1    /1   ]  129.154902395        1
[INPUT] 0    0    [1    /1   ]  19.5369294865        1
[INPUT] 0    0    [1    /1   ]  0.968075992892       1
[INPUT] 1    0    [1    /1   ]  5.23197927304        1
[INPUT] 1    0    [1    /1   ]  0.862000409381       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.160260535008, 1.0]], [0, [129.15490239542046, 1.0]], [0, [19.53692948653949, 1.0]], [0, [0.968075992891857, 1.0]], [1, [5.231979273037467, 1.0]], [1, [0.8620004093813219, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.16026054]
bas 1, expnt(s) = [129.1549024]
bas 2, expnt(s) = [19.53692949]
bas 3, expnt(s) = [0.96807599]
bas 4, expnt(s) = [5.23197927]
bas 5, expnt(s) = [0.86200041]
CPU time:        90.76
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61716026e+03 1.41512967e+03 1.29154902e+02 9.67939462e+01
 1.95369295e+01 2.34777923e+01 9.68075993e-01 2.46573904e+00
 5.23197927e+00 2.30843107e+01 8.62000409e-01 2.42308547e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.827826967262094
cond(S) = 4.289437235093106
E1 = -177.90402083346157  E_coul = 54.320913452801896
init E= -123.58310738066
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.656127408580734  LUMO = 5.15824664909053
  mo_energy =
[-3.16882925e+01 -1.82428902e+00 -6.56127409e-01 -6.56127409e-01
 -6.56127409e-01  5.15824665e+00  5.15824665e+00  5.15824665e+00
  1.08806358e+02  6.14379029e+03]
E1 = -179.39629355168776  E_coul = 54.117554973706845
cycle= 1 E= -125.278738577981  delta_E= -1.7  |g|= 0.169  |ddm|= 0.31
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.281966
diis-c [-0.07950476  1.        ]
  HOMO = -0.625391850847109  LUMO = 5.16900529958712
  mo_energy =
[-3.18948118e+01 -1.80971624e+00 -6.25391851e-01 -6.25391851e-01
 -6.25391851e-01  5.16900530e+00  5.16900530e+00  5.16900530e+00
  1.08625298e+02  6.14341411e+03]
E1 = -179.48464364720058  E_coul = 54.20571915149391
cycle= 2 E= -125.278924495707  delta_E= -0.000186  |g|= 0.00925  |ddm|= 0.014
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0116043
diis-c [-1.28363804e-04  8.82693923e-03  9.91173061e-01]
  HOMO = -0.619957774560714  LUMO = 5.17767604970974
  mo_energy =
[-3.18740619e+01 -1.80305987e+00 -6.19957775e-01 -6.19957775e-01
 -6.19957775e-01  5.17767605e+00  5.17767605e+00  5.17767605e+00
  1.08646230e+02  6.14343591e+03]
E1 = -179.46962667289958  E_coul = 54.190696789676124
cycle= 3 E= -125.278929883223  delta_E= -5.39e-06  |g|= 0.00148  |ddm|= 0.00238
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00186174
diis-c [-1.46453200e-09 -2.46997759e-04  1.37241054e-01  8.63005944e-01]
  HOMO = -0.620710751907804  LUMO = 5.17647468182172
  mo_energy =
[-3.18769627e+01 -1.80398189e+00 -6.20710752e-01 -6.20710752e-01
 -6.20710752e-01  5.17647468e+00  5.17647468e+00  5.17647468e+00
  1.08643287e+02  6.14343267e+03]
E1 = -179.4717109767098  E_coul = 54.1927809499421
cycle= 4 E= -125.278930026768  delta_E= -1.44e-07  |g|= 7.1e-07  |ddm|= 0.00033
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=8.82442e-07
diis-c [-1.09854154e-15  3.07768504e-06 -2.02224133e-03 -1.23275780e-02
  1.01434674e+00]
  HOMO = -0.620710483191324  LUMO = 5.17647514113599
  mo_energy =
[-3.18769619e+01 -1.80398155e+00 -6.20710483e-01 -6.20710483e-01
 -6.20710483e-01  5.17647514e+00  5.17647514e+00  5.17647514e+00
  1.08643288e+02  6.14343267e+03]
E1 = -179.47171026864012  E_coul = 54.192780241872505
cycle= 5 E= -125.278930026768  delta_E= 8.53e-14  |g|= 8.03e-10  |ddm|= 1.11e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -179.47171026864012  E_coul = 54.192780241872505
  HOMO = -0.620710483528963  LUMO = 5.17647513994273
  mo_energy =
[-3.18769619e+01 -1.80398155e+00 -6.20710484e-01 -6.20710484e-01
 -6.20710484e-01  5.17647514e+00  5.17647514e+00  5.17647514e+00
  1.08643288e+02  6.14343267e+03]
E1 = -179.47171026952464  E_coul = 54.19278024275701
Extra cycle  E= -125.278930026768  delta_E=    0  |g|= 9.11e-11  |ddm|= 1.39e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.289437235093106
E1 = -179.47171026952464  E_coul = 54.19278024275701
init E= -125.278930026768
    CPU time for initialize scf      0.04 sec, wall time      0.04 sec
  HOMO = -0.620710483474494  LUMO = 5.17647514002979
  mo_energy =
[-3.18769619e+01 -1.80398155e+00 -6.20710483e-01 -6.20710483e-01
 -6.20710483e-01  5.17647514e+00  5.17647514e+00  5.17647514e+00
  1.08643288e+02  6.14343267e+03]
E1 = -179.47171026937266  E_coul = 54.192780242605046
cycle= 1 E= -125.278930026768  delta_E=    0  |g|= 1.59e-11  |ddm|= 2.41e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -179.47171026937266  E_coul = 54.192780242605046
  HOMO = -0.620710483483906  LUMO = 5.17647514001477
  mo_energy =
[-3.18769619e+01 -1.80398155e+00 -6.20710483e-01 -6.20710483e-01
 -6.20710483e-01  5.17647514e+00  5.17647514e+00  5.17647514e+00
  1.08643288e+02  6.14343267e+03]
E1 = -179.47171026939864  E_coul = 54.19278024263103
Extra cycle  E= -125.278930026768  delta_E= 1.42e-14  |g|= 2.7e-12  |ddm|= 4.12e-12
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [4.61716026e+03 1.29154902e+02 1.95369295e+01 9.68075993e-01
 5.23197927e+00 8.62000409e-01]
grad_E = [ 1.37146226e-04 -1.11880087e-03  8.81072393e-03  5.97804196e-04
  2.73123274e-02 -2.81879615e-01]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:27:14 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.15887536        1
[INPUT] 0    0    [1    /1   ]  129.422447607        1
[INPUT] 0    0    [1    /1   ]  19.515938419         1
[INPUT] 0    0    [1    /1   ]  0.962204234677       1
[INPUT] 1    0    [1    /1   ]  5.21988777783        1
[INPUT] 1    0    [1    /1   ]  0.876582996328       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.158875360495, 1.0]], [0, [129.42244760678835, 1.0]], [0, [19.515938418969593, 1.0]], [0, [0.9622042346765974, 1.0]], [1, [5.219887777830386, 1.0]], [1, [0.8765829963278932, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.15887536]
bas 1, expnt(s) = [129.42244761]
bas 2, expnt(s) = [19.51593842]
bas 3, expnt(s) = [0.96220423]
bas 4, expnt(s) = [5.21988778]
bas 5, expnt(s) = [0.876583]
CPU time:        93.64
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61715888e+03 1.41512935e+03 1.29422448e+02 9.69442892e+01
 1.95159384e+01 2.34588708e+01 9.62204235e-01 2.45451377e+00
 5.21988778e+00 2.30176430e+01 8.76582996e-01 2.47443298e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.823417022016116
cond(S) = 4.275044197382895
E1 = -177.9264125626575  E_coul = 54.31021545526325
init E= -123.616197107394
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.655324710890797  LUMO = 5.20281253264913
  mo_energy =
[-3.16978829e+01 -1.82384858e+00 -6.55324711e-01 -6.55324711e-01
 -6.55324711e-01  5.20281253e+00  5.20281253e+00  5.20281253e+00
  1.08905021e+02  6.14441074e+03]
E1 = -179.5928568618343  E_coul = 54.31080390376009
cycle= 1 E= -125.282052958074  delta_E= -1.67  |g|= 0.162  |ddm|= 0.29
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.274686
diis-c [-0.07545267  1.        ]
  HOMO = -0.610693892492196  LUMO = 5.2344519036578
  mo_energy =
[-3.18618179e+01 -1.79176690e+00 -6.10693892e-01 -6.10693892e-01
 -6.10693892e-01  5.23445190e+00  5.23445190e+00  5.23445190e+00
  1.08766343e+02  6.14407066e+03]
E1 = -179.6459481569027  E_coul = 54.36382476863818
cycle= 2 E= -125.282123388265  delta_E= -7.04e-05  |g|= 0.00553  |ddm|= 0.00853
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00691315
diis-c [-4.74619550e-05  2.08671546e-03  9.97913285e-01]
  HOMO = -0.607383265788785  LUMO = 5.23969132146878
  mo_energy =
[-3.18493036e+01 -1.78775241e+00 -6.07383266e-01 -6.07383266e-01
 -6.07383266e-01  5.23969132e+00  5.23969132e+00  5.23969132e+00
  1.08778928e+02  6.14408330e+03]
E1 = -179.6370508100972  E_coul = 54.35492552803226
cycle= 3 E= -125.282125282065  delta_E= -1.89e-06  |g|= 0.000905  |ddm|= 0.00142
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00113195
diis-c [-1.39645623e-09 -2.42283970e-04  1.39907867e-01  8.60334417e-01]
  HOMO = -0.60785108550336  LUMO = 5.23895011196936
  mo_energy =
[-3.18510993e+01 -1.78831954e+00 -6.07851086e-01 -6.07851086e-01
 -6.07851086e-01  5.23895011e+00  5.23895011e+00  5.23895011e+00
  1.08777106e+02  6.14408130e+03]
E1 = -179.63831222631438  E_coul = 54.35618689118637
cycle= 4 E= -125.282125335128  delta_E= -5.31e-08  |g|= 7.99e-07  |ddm|= 0.000201
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=9.8758e-07
diis-c [-1.58780828e-15  3.00251409e-06 -2.05448077e-03 -1.18731977e-02
  1.01392468e+00]
  HOMO = -0.607850750220249  LUMO = 5.2389506438596
  mo_energy =
[-3.18510983e+01 -1.78831913e+00 -6.07850750e-01 -6.07850750e-01
 -6.07850750e-01  5.23895064e+00  5.23895064e+00  5.23895064e+00
  1.08777106e+02  6.14408130e+03]
E1 = -179.63831136455963  E_coul = 54.35618602943169
cycle= 5 E= -125.282125335128  delta_E= 7.11e-14  |g|= 1.28e-09  |ddm|= 1.36e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -179.63831136455963  E_coul = 54.35618602943169
  HOMO = -0.607850750879963  LUMO = 5.23895064259352
  mo_energy =
[-3.18510983e+01 -1.78831913e+00 -6.07850751e-01 -6.07850751e-01
 -6.07850751e-01  5.23895064e+00  5.23895064e+00  5.23895064e+00
  1.08777106e+02  6.14408130e+03]
E1 = -179.63831136623108  E_coul = 54.35618603110304
Extra cycle  E= -125.282125335128  delta_E= -8.53e-14  |g|= 1.71e-10  |ddm|= 2.65e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
exp = [4.61715888e+03 1.29422448e+02 1.95159384e+01 9.62204235e-01
 5.21988778e+00 8.76582996e-01]
E = -125.28212533512803
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:27:15 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.15887536        1
[INPUT] 0    0    [1    /1   ]  129.422447607        1
[INPUT] 0    0    [1    /1   ]  19.515938419         1
[INPUT] 0    0    [1    /1   ]  0.962204234677       1
[INPUT] 1    0    [1    /1   ]  5.21988777783        1
[INPUT] 1    0    [1    /1   ]  0.876582996328       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.158875360495, 1.0]], [0, [129.42244760678835, 1.0]], [0, [19.515938418969593, 1.0]], [0, [0.9622042346765974, 1.0]], [1, [5.219887777830386, 1.0]], [1, [0.8765829963278932, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.15887536]
bas 1, expnt(s) = [129.42244761]
bas 2, expnt(s) = [19.51593842]
bas 3, expnt(s) = [0.96220423]
bas 4, expnt(s) = [5.21988778]
bas 5, expnt(s) = [0.876583]
CPU time:        94.21
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61715888e+03 1.41512935e+03 1.29422448e+02 9.69442892e+01
 1.95159384e+01 2.34588708e+01 9.62204235e-01 2.45451377e+00
 5.21988778e+00 2.30176430e+01 8.76582996e-01 2.47443298e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.823417022016116
cond(S) = 4.275044197382895
E1 = -177.9264125626575  E_coul = 54.31021545526325
init E= -123.616197107394
    CPU time for initialize scf      0.02 sec, wall time      0.03 sec
  HOMO = -0.655324710890797  LUMO = 5.20281253264913
  mo_energy =
[-3.16978829e+01 -1.82384858e+00 -6.55324711e-01 -6.55324711e-01
 -6.55324711e-01  5.20281253e+00  5.20281253e+00  5.20281253e+00
  1.08905021e+02  6.14441074e+03]
E1 = -179.5928568618343  E_coul = 54.31080390376009
cycle= 1 E= -125.282052958074  delta_E= -1.67  |g|= 0.162  |ddm|= 0.29
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.274686
diis-c [-0.07545267  1.        ]
  HOMO = -0.610693892492196  LUMO = 5.2344519036578
  mo_energy =
[-3.18618179e+01 -1.79176690e+00 -6.10693892e-01 -6.10693892e-01
 -6.10693892e-01  5.23445190e+00  5.23445190e+00  5.23445190e+00
  1.08766343e+02  6.14407066e+03]
E1 = -179.6459481569027  E_coul = 54.36382476863818
cycle= 2 E= -125.282123388265  delta_E= -7.04e-05  |g|= 0.00553  |ddm|= 0.00853
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00691315
diis-c [-4.74619550e-05  2.08671546e-03  9.97913285e-01]
  HOMO = -0.607383265788785  LUMO = 5.23969132146878
  mo_energy =
[-3.18493036e+01 -1.78775241e+00 -6.07383266e-01 -6.07383266e-01
 -6.07383266e-01  5.23969132e+00  5.23969132e+00  5.23969132e+00
  1.08778928e+02  6.14408330e+03]
E1 = -179.6370508100972  E_coul = 54.35492552803226
cycle= 3 E= -125.282125282065  delta_E= -1.89e-06  |g|= 0.000905  |ddm|= 0.00142
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00113195
diis-c [-1.39645623e-09 -2.42283970e-04  1.39907867e-01  8.60334417e-01]
  HOMO = -0.60785108550336  LUMO = 5.23895011196936
  mo_energy =
[-3.18510993e+01 -1.78831954e+00 -6.07851086e-01 -6.07851086e-01
 -6.07851086e-01  5.23895011e+00  5.23895011e+00  5.23895011e+00
  1.08777106e+02  6.14408130e+03]
E1 = -179.63831222631438  E_coul = 54.35618689118637
cycle= 4 E= -125.282125335128  delta_E= -5.31e-08  |g|= 7.99e-07  |ddm|= 0.000201
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=9.8758e-07
diis-c [-1.58780828e-15  3.00251409e-06 -2.05448077e-03 -1.18731977e-02
  1.01392468e+00]
  HOMO = -0.607850750220249  LUMO = 5.2389506438596
  mo_energy =
[-3.18510983e+01 -1.78831913e+00 -6.07850750e-01 -6.07850750e-01
 -6.07850750e-01  5.23895064e+00  5.23895064e+00  5.23895064e+00
  1.08777106e+02  6.14408130e+03]
E1 = -179.63831136455963  E_coul = 54.35618602943169
cycle= 5 E= -125.282125335128  delta_E= 7.11e-14  |g|= 1.28e-09  |ddm|= 1.36e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -179.63831136455963  E_coul = 54.35618602943169
  HOMO = -0.607850750879963  LUMO = 5.23895064259352
  mo_energy =
[-3.18510983e+01 -1.78831913e+00 -6.07850751e-01 -6.07850751e-01
 -6.07850751e-01  5.23895064e+00  5.23895064e+00  5.23895064e+00
  1.08777106e+02  6.14408130e+03]
E1 = -179.63831136623108  E_coul = 54.35618603110304
Extra cycle  E= -125.282125335128  delta_E= -8.53e-14  |g|= 1.71e-10  |ddm|= 2.65e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.275044197382895
E1 = -179.63831136623108  E_coul = 54.35618603110304
init E= -125.282125335128
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.607850750776462  LUMO = 5.23895064275766
  mo_energy =
[-3.18510983e+01 -1.78831913e+00 -6.07850751e-01 -6.07850751e-01
 -6.07850751e-01  5.23895064e+00  5.23895064e+00  5.23895064e+00
  1.08777106e+02  6.14408130e+03]
E1 = -179.63831136595067  E_coul = 54.35618603082267
cycle= 1 E= -125.282125335128  delta_E= 2.84e-14  |g|= 2.89e-11  |ddm|= 4.47e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -179.63831136595067  E_coul = 54.35618603082267
  HOMO = -0.607850750793887  LUMO = 5.23895064273005
  mo_energy =
[-3.18510983e+01 -1.78831913e+00 -6.07850751e-01 -6.07850751e-01
 -6.07850751e-01  5.23895064e+00  5.23895064e+00  5.23895064e+00
  1.08777106e+02  6.14408130e+03]
E1 = -179.63831136599742  E_coul = 54.35618603086957
Extra cycle  E= -125.282125335128  delta_E= 1.42e-13  |g|= 4.96e-12  |ddm|= 7.49e-12
    CPU time for scf_cycle      0.11 sec, wall time      0.12 sec
exp = [4.61715888e+03 1.29422448e+02 1.95159384e+01 9.62204235e-01
 5.21988778e+00 8.76582996e-01]
grad_E = [ 0.00013672 -0.0006855   0.00485047 -0.01116844  0.003585   -0.08334016]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:27:18 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.15714035        1
[INPUT] 0    0    [1    /1   ]  129.974247863        1
[INPUT] 0    0    [1    /1   ]  19.51588797          1
[INPUT] 0    0    [1    /1   ]  0.961407689024       1
[INPUT] 1    0    [1    /1   ]  5.26720501522        1
[INPUT] 1    0    [1    /1   ]  0.888432195535       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.157140349097, 1.0]], [0, [129.9742478632391, 1.0]], [0, [19.515887969966332, 1.0]], [0, [0.9614076890235087, 1.0]], [1, [5.267205015216446, 1.0]], [1, [0.8884321955349996, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.15714035]
bas 1, expnt(s) = [129.97424786]
bas 2, expnt(s) = [19.51588797]
bas 3, expnt(s) = [0.96140769]
bas 4, expnt(s) = [5.26720502]
bas 5, expnt(s) = [0.8884322]
CPU time:        97.09
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61715714e+03 1.41512895e+03 1.29974248e+02 9.72541201e+01
 1.95158880e+01 2.34588253e+01 9.61407689e-01 2.45298966e+00
 5.26720502e+00 2.32787508e+01 8.88432196e-01 2.51631353e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.818908492595455
cond(S) = 4.260784385607837
E1 = -177.96518566839404  E_coul = 54.31857829541486
init E= -123.646607372979
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.654632678513142  LUMO = 5.27624539908918
  mo_energy =
[-3.16968222e+01 -1.82318036e+00 -6.54632679e-01 -6.54632679e-01
 -6.54632679e-01  5.27624540e+00  5.27624540e+00  5.27624540e+00
  1.09311913e+02  6.14582431e+03]
E1 = -179.727712362713  E_coul = 54.44496329525325
cycle= 1 E= -125.28274906746  delta_E= -1.64  |g|= 0.158  |ddm|= 0.28
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.269695
diis-c [-0.07273561  1.        ]
  HOMO = -0.600738875960027  LUMO = 5.32047770742852
  mo_energy =
[-3.18366371e+01 -1.78005684e+00 -6.00738876e-01 -6.00738876e-01
 -6.00738876e-01  5.32047771e+00  5.32047771e+00  5.32047771e+00
  1.09196795e+02  6.14550307e+03]
E1 = -179.76100223965832  E_coul = 54.47822311111678
cycle= 2 E= -125.282779128542  delta_E= -3.01e-05  |g|= 0.00348  |ddm|= 0.00539
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00435653
diis-c [-1.89733022e-05 -2.88030428e-04  1.00028803e+00]
  HOMO = -0.598649457809551  LUMO = 5.32379838183774
  mo_energy =
[-3.18287922e+01 -1.77753310e+00 -5.98649458e-01 -5.98649458e-01
 -5.98649458e-01  5.32379838e+00  5.32379838e+00  5.32379838e+00
  1.09204645e+02  6.14551053e+03]
E1 = -179.75549599355463  E_coul = 54.47271613154376
cycle= 3 E= -125.282779862011  delta_E= -7.33e-07  |g|= 0.000566  |ddm|= 0.000879
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000706798
diis-c [-1.44915723e-09 -2.40194454e-04  1.39206793e-01  8.61033401e-01]
  HOMO = -0.598943828278575  LUMO = 5.32332937026815
  mo_energy =
[-3.18299252e+01 -1.77788861e+00 -5.98943828e-01 -5.98943828e-01
 -5.98943828e-01  5.32332937e+00  5.32332937e+00  5.32332937e+00
  1.09203495e+02  6.14550926e+03]
E1 = -179.75627596356304  E_coul = 54.47349608106404
cycle= 4 E= -125.282779882499  delta_E= -2.05e-08  |g|= 8.95e-07  |ddm|= 0.000125
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.10671e-06
diis-c [-1.60636995e-15  2.95806197e-06 -2.05035168e-03 -1.12669946e-02
  1.01331439e+00]
  HOMO = -0.598943434553651  LUMO = 5.32332998758026
  mo_energy =
[-3.18299240e+01 -1.77788813e+00 -5.98943435e-01 -5.98943435e-01
 -5.98943435e-01  5.32332999e+00  5.32332999e+00  5.32332999e+00
  1.09203496e+02  6.14550926e+03]
E1 = -179.7562749636593  E_coul = 54.4734950811602
cycle= 5 E= -125.282779882499  delta_E= -1.14e-13  |g|= 1.37e-09  |ddm|= 1.59e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -179.7562749636593  E_coul = 54.4734950811602
  HOMO = -0.598943435282374  LUMO = 5.32332998634602
  mo_energy =
[-3.18299240e+01 -1.77788813e+00 -5.98943435e-01 -5.98943435e-01
 -5.98943435e-01  5.32332999e+00  5.32332999e+00  5.32332999e+00
  1.09203496e+02  6.14550926e+03]
E1 = -179.75627496546986  E_coul = 54.47349508297072
Extra cycle  E= -125.282779882499  delta_E= -2.84e-14  |g|= 1.85e-10  |ddm|= 2.88e-10
    CPU time for scf_cycle      0.08 sec, wall time      0.09 sec
exp = [4.61715714e+03 1.29974248e+02 1.95158880e+01 9.61407689e-01
 5.26720502e+00 8.88432196e-01]
E = -125.28277988249914
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:27:18 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.15714035        1
[INPUT] 0    0    [1    /1   ]  129.974247863        1
[INPUT] 0    0    [1    /1   ]  19.51588797          1
[INPUT] 0    0    [1    /1   ]  0.961407689024       1
[INPUT] 1    0    [1    /1   ]  5.26720501522        1
[INPUT] 1    0    [1    /1   ]  0.888432195535       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.157140349097, 1.0]], [0, [129.9742478632391, 1.0]], [0, [19.515887969966332, 1.0]], [0, [0.9614076890235087, 1.0]], [1, [5.267205015216446, 1.0]], [1, [0.8884321955349996, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.15714035]
bas 1, expnt(s) = [129.97424786]
bas 2, expnt(s) = [19.51588797]
bas 3, expnt(s) = [0.96140769]
bas 4, expnt(s) = [5.26720502]
bas 5, expnt(s) = [0.8884322]
CPU time:        97.61
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61715714e+03 1.41512895e+03 1.29974248e+02 9.72541201e+01
 1.95158880e+01 2.34588253e+01 9.61407689e-01 2.45298966e+00
 5.26720502e+00 2.32787508e+01 8.88432196e-01 2.51631353e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.818908492595455
cond(S) = 4.260784385607837
E1 = -177.96518566839404  E_coul = 54.31857829541486
init E= -123.646607372979
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.654632678513142  LUMO = 5.27624539908918
  mo_energy =
[-3.16968222e+01 -1.82318036e+00 -6.54632679e-01 -6.54632679e-01
 -6.54632679e-01  5.27624540e+00  5.27624540e+00  5.27624540e+00
  1.09311913e+02  6.14582431e+03]
E1 = -179.727712362713  E_coul = 54.44496329525325
cycle= 1 E= -125.28274906746  delta_E= -1.64  |g|= 0.158  |ddm|= 0.28
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.269695
diis-c [-0.07273561  1.        ]
  HOMO = -0.600738875960027  LUMO = 5.32047770742852
  mo_energy =
[-3.18366371e+01 -1.78005684e+00 -6.00738876e-01 -6.00738876e-01
 -6.00738876e-01  5.32047771e+00  5.32047771e+00  5.32047771e+00
  1.09196795e+02  6.14550307e+03]
E1 = -179.76100223965832  E_coul = 54.47822311111678
cycle= 2 E= -125.282779128542  delta_E= -3.01e-05  |g|= 0.00348  |ddm|= 0.00539
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00435653
diis-c [-1.89733022e-05 -2.88030428e-04  1.00028803e+00]
  HOMO = -0.598649457809551  LUMO = 5.32379838183774
  mo_energy =
[-3.18287922e+01 -1.77753310e+00 -5.98649458e-01 -5.98649458e-01
 -5.98649458e-01  5.32379838e+00  5.32379838e+00  5.32379838e+00
  1.09204645e+02  6.14551053e+03]
E1 = -179.75549599355463  E_coul = 54.47271613154376
cycle= 3 E= -125.282779862011  delta_E= -7.33e-07  |g|= 0.000566  |ddm|= 0.000879
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000706798
diis-c [-1.44915723e-09 -2.40194454e-04  1.39206793e-01  8.61033401e-01]
  HOMO = -0.598943828278575  LUMO = 5.32332937026815
  mo_energy =
[-3.18299252e+01 -1.77788861e+00 -5.98943828e-01 -5.98943828e-01
 -5.98943828e-01  5.32332937e+00  5.32332937e+00  5.32332937e+00
  1.09203495e+02  6.14550926e+03]
E1 = -179.75627596356304  E_coul = 54.47349608106404
cycle= 4 E= -125.282779882499  delta_E= -2.05e-08  |g|= 8.95e-07  |ddm|= 0.000125
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.10671e-06
diis-c [-1.60636995e-15  2.95806197e-06 -2.05035168e-03 -1.12669946e-02
  1.01331439e+00]
  HOMO = -0.598943434553651  LUMO = 5.32332998758026
  mo_energy =
[-3.18299240e+01 -1.77788813e+00 -5.98943435e-01 -5.98943435e-01
 -5.98943435e-01  5.32332999e+00  5.32332999e+00  5.32332999e+00
  1.09203496e+02  6.14550926e+03]
E1 = -179.7562749636593  E_coul = 54.4734950811602
cycle= 5 E= -125.282779882499  delta_E= -1.14e-13  |g|= 1.37e-09  |ddm|= 1.59e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -179.7562749636593  E_coul = 54.4734950811602
  HOMO = -0.598943435282374  LUMO = 5.32332998634602
  mo_energy =
[-3.18299240e+01 -1.77788813e+00 -5.98943435e-01 -5.98943435e-01
 -5.98943435e-01  5.32332999e+00  5.32332999e+00  5.32332999e+00
  1.09203496e+02  6.14550926e+03]
E1 = -179.75627496546986  E_coul = 54.47349508297072
Extra cycle  E= -125.282779882499  delta_E= -2.84e-14  |g|= 1.85e-10  |ddm|= 2.88e-10
    CPU time for scf_cycle      0.08 sec, wall time      0.09 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.260784385607837
E1 = -179.75627496546986  E_coul = 54.47349508297072
init E= -125.282779882499
    CPU time for initialize scf      0.04 sec, wall time      0.04 sec
  HOMO = -0.598943435170284  LUMO = 5.32332998652474
  mo_energy =
[-3.18299240e+01 -1.77788813e+00 -5.98943435e-01 -5.98943435e-01
 -5.98943435e-01  5.32332999e+00  5.32332999e+00  5.32332999e+00
  1.09203496e+02  6.14550926e+03]
E1 = -179.75627496517143  E_coul = 54.473495082672414
cycle= 1 E= -125.282779882499  delta_E= 1.28e-13  |g|= 3.07e-11  |ddm|= 4.77e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -179.75627496517143  E_coul = 54.473495082672414
  HOMO = -0.598943435188819  LUMO = 5.32332998649522
  mo_energy =
[-3.18299240e+01 -1.77788813e+00 -5.98943435e-01 -5.98943435e-01
 -5.98943435e-01  5.32332999e+00  5.32332999e+00  5.32332999e+00
  1.09203496e+02  6.14550926e+03]
E1 = -179.7562749652205  E_coul = 54.47349508272148
Extra cycle  E= -125.282779882499  delta_E= -1.42e-14  |g|= 5.07e-12  |ddm|= 7.85e-12
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [4.61715714e+03 1.29974248e+02 1.95158880e+01 9.61407689e-01
 5.26720502e+00 8.88432196e-01]
grad_E = [ 0.00013609 -0.00012365  0.00072194 -0.00553424 -0.00062781 -0.00255501]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:27:21 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.15661726        1
[INPUT] 0    0    [1    /1   ]  130.124661316        1
[INPUT] 0    0    [1    /1   ]  19.5203125184        1
[INPUT] 0    0    [1    /1   ]  0.962199374562       1
[INPUT] 1    0    [1    /1   ]  5.27487098536        1
[INPUT] 1    0    [1    /1   ]  0.889492616231       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.15661726217, 1.0]], [0, [130.12466131590557, 1.0]], [0, [19.520312518426778, 1.0]], [0, [0.962199374562056, 1.0]], [1, [5.274870985358412, 1.0]], [1, [0.8894926162308141, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.15661726]
bas 1, expnt(s) = [130.12466132]
bas 2, expnt(s) = [19.52031252]
bas 3, expnt(s) = [0.96219937]
bas 4, expnt(s) = [5.27487099]
bas 5, expnt(s) = [0.88949262]
CPU time:       100.51
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61715662e+03 1.41512883e+03 1.30124661e+02 9.73385188e+01
 1.95203125e+01 2.34628141e+01 9.62199375e-01 2.45450447e+00
 5.27487099e+00 2.33211088e+01 8.89492616e-01 2.52006839e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.818378114387789
cond(S) = 4.258359885242602
E1 = -177.9751646961786  E_coul = 54.32277297646238
init E= -123.652391719716
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.65439064777066  LUMO = 5.28536793486583
  mo_energy =
[-3.16957637e+01 -1.82288963e+00 -6.54390648e-01 -6.54390648e-01
 -6.54390648e-01  5.28536793e+00  5.28536793e+00  5.28536793e+00
  1.09441769e+02  6.14622129e+03]
E1 = -179.74127276363163  E_coul = 54.458506651098446
cycle= 1 E= -125.282766112533  delta_E= -1.63  |g|= 0.158  |ddm|= 0.279
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.268893
diis-c [-0.07230325  1.        ]
  HOMO = -0.599736613646725  LUMO = 5.33053479918973
  mo_energy =
[-3.18339629e+01 -1.77897337e+00 -5.99736614e-01 -5.99736614e-01
 -5.99736614e-01  5.33053480e+00  5.33053480e+00  5.33053480e+00
  1.09328144e+02  6.14590124e+03]
E1 = -179.77316540472796  E_coul = 54.49037139143652
cycle= 2 E= -125.282794013291  delta_E= -2.79e-05  |g|= 0.00334  |ddm|= 0.00517
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00417894
diis-c [-1.74511172e-05 -4.14541672e-04  1.00041454e+00]
  HOMO = -0.597734150140411  LUMO = 5.33372068250069
  mo_energy =
[-3.18264486e+01 -1.77655403e+00 -5.97734150e-01 -5.97734150e-01
 -5.97734150e-01  5.33372068e+00  5.33372068e+00  5.33372068e+00
  1.09335658e+02  6.14590832e+03]
E1 = -179.76789645657635  E_coul = 54.485101770757055
cycle= 3 E= -125.282794685819  delta_E= -6.73e-07  |g|= 0.000542  |ddm|= 0.000841
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000676737
diis-c [-1.49393595e-09 -2.40752961e-04  1.39032801e-01  8.61207952e-01]
  HOMO = -0.598016043965834  LUMO = 5.3332709981577
  mo_energy =
[-3.18275342e+01 -1.77689459e+00 -5.98016044e-01 -5.98016044e-01
 -5.98016044e-01  5.33327100e+00  5.33327100e+00  5.33327100e+00
  1.09334555e+02  6.14590710e+03]
E1 = -179.76864234857047  E_coul = 54.48584764399616
cycle= 4 E= -125.282794704574  delta_E= -1.88e-08  |g|= 9.11e-07  |ddm|= 0.000119
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.12785e-06
diis-c [-1.55881218e-15  2.95743239e-06 -2.05036175e-03 -1.11914317e-02
  1.01323884e+00]
  HOMO = -0.598015642348981  LUMO = 5.33327162817255
  mo_energy =
[-3.18275330e+01 -1.77689410e+00 -5.98015642e-01 -5.98015642e-01
 -5.98015642e-01  5.33327163e+00  5.33327163e+00  5.33327163e+00
  1.09334557e+02  6.14590710e+03]
E1 = -179.76864132878111  E_coul = 54.48584662420686
cycle= 5 E= -125.282794704574  delta_E= 5.68e-14  |g|= 1.35e-09  |ddm|= 1.62e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -179.76864132878111  E_coul = 54.48584662420686
  HOMO = -0.598015643070169  LUMO = 5.33327162695648
  mo_energy =
[-3.18275330e+01 -1.77689410e+00 -5.98015643e-01 -5.98015643e-01
 -5.98015643e-01  5.33327163e+00  5.33327163e+00  5.33327163e+00
  1.09334557e+02  6.14590710e+03]
E1 = -179.76864133057038  E_coul = 54.48584662599598
Extra cycle  E= -125.282794704574  delta_E= -1.42e-13  |g|= 1.82e-10  |ddm|= 2.84e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
exp = [4.61715662e+03 1.30124661e+02 1.95203125e+01 9.62199375e-01
 5.27487099e+00 8.89492616e-01]
E = -125.2827947045744
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:27:22 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.15661726        1
[INPUT] 0    0    [1    /1   ]  130.124661316        1
[INPUT] 0    0    [1    /1   ]  19.5203125184        1
[INPUT] 0    0    [1    /1   ]  0.962199374562       1
[INPUT] 1    0    [1    /1   ]  5.27487098536        1
[INPUT] 1    0    [1    /1   ]  0.889492616231       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.15661726217, 1.0]], [0, [130.12466131590557, 1.0]], [0, [19.520312518426778, 1.0]], [0, [0.962199374562056, 1.0]], [1, [5.274870985358412, 1.0]], [1, [0.8894926162308141, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.15661726]
bas 1, expnt(s) = [130.12466132]
bas 2, expnt(s) = [19.52031252]
bas 3, expnt(s) = [0.96219937]
bas 4, expnt(s) = [5.27487099]
bas 5, expnt(s) = [0.88949262]
CPU time:       101.04
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61715662e+03 1.41512883e+03 1.30124661e+02 9.73385188e+01
 1.95203125e+01 2.34628141e+01 9.62199375e-01 2.45450447e+00
 5.27487099e+00 2.33211088e+01 8.89492616e-01 2.52006839e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.818378114387789
cond(S) = 4.258359885242602
E1 = -177.9751646961786  E_coul = 54.32277297646238
init E= -123.652391719716
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.65439064777066  LUMO = 5.28536793486583
  mo_energy =
[-3.16957637e+01 -1.82288963e+00 -6.54390648e-01 -6.54390648e-01
 -6.54390648e-01  5.28536793e+00  5.28536793e+00  5.28536793e+00
  1.09441769e+02  6.14622129e+03]
E1 = -179.74127276363163  E_coul = 54.458506651098446
cycle= 1 E= -125.282766112533  delta_E= -1.63  |g|= 0.158  |ddm|= 0.279
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.268893
diis-c [-0.07230325  1.        ]
  HOMO = -0.599736613646725  LUMO = 5.33053479918973
  mo_energy =
[-3.18339629e+01 -1.77897337e+00 -5.99736614e-01 -5.99736614e-01
 -5.99736614e-01  5.33053480e+00  5.33053480e+00  5.33053480e+00
  1.09328144e+02  6.14590124e+03]
E1 = -179.77316540472796  E_coul = 54.49037139143652
cycle= 2 E= -125.282794013291  delta_E= -2.79e-05  |g|= 0.00334  |ddm|= 0.00517
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00417894
diis-c [-1.74511172e-05 -4.14541672e-04  1.00041454e+00]
  HOMO = -0.597734150140411  LUMO = 5.33372068250069
  mo_energy =
[-3.18264486e+01 -1.77655403e+00 -5.97734150e-01 -5.97734150e-01
 -5.97734150e-01  5.33372068e+00  5.33372068e+00  5.33372068e+00
  1.09335658e+02  6.14590832e+03]
E1 = -179.76789645657635  E_coul = 54.485101770757055
cycle= 3 E= -125.282794685819  delta_E= -6.73e-07  |g|= 0.000542  |ddm|= 0.000841
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000676737
diis-c [-1.49393595e-09 -2.40752961e-04  1.39032801e-01  8.61207952e-01]
  HOMO = -0.598016043965834  LUMO = 5.3332709981577
  mo_energy =
[-3.18275342e+01 -1.77689459e+00 -5.98016044e-01 -5.98016044e-01
 -5.98016044e-01  5.33327100e+00  5.33327100e+00  5.33327100e+00
  1.09334555e+02  6.14590710e+03]
E1 = -179.76864234857047  E_coul = 54.48584764399616
cycle= 4 E= -125.282794704574  delta_E= -1.88e-08  |g|= 9.11e-07  |ddm|= 0.000119
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.12785e-06
diis-c [-1.55881218e-15  2.95743239e-06 -2.05036175e-03 -1.11914317e-02
  1.01323884e+00]
  HOMO = -0.598015642348981  LUMO = 5.33327162817255
  mo_energy =
[-3.18275330e+01 -1.77689410e+00 -5.98015642e-01 -5.98015642e-01
 -5.98015642e-01  5.33327163e+00  5.33327163e+00  5.33327163e+00
  1.09334557e+02  6.14590710e+03]
E1 = -179.76864132878111  E_coul = 54.48584662420686
cycle= 5 E= -125.282794704574  delta_E= 5.68e-14  |g|= 1.35e-09  |ddm|= 1.62e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -179.76864132878111  E_coul = 54.48584662420686
  HOMO = -0.598015643070169  LUMO = 5.33327162695648
  mo_energy =
[-3.18275330e+01 -1.77689410e+00 -5.98015643e-01 -5.98015643e-01
 -5.98015643e-01  5.33327163e+00  5.33327163e+00  5.33327163e+00
  1.09334557e+02  6.14590710e+03]
E1 = -179.76864133057038  E_coul = 54.48584662599598
Extra cycle  E= -125.282794704574  delta_E= -1.42e-13  |g|= 1.82e-10  |ddm|= 2.84e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.258359885242602
E1 = -179.76864133057038  E_coul = 54.48584662599598
init E= -125.282794704574
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.598015642959434  LUMO = 5.33327162713326
  mo_energy =
[-3.18275330e+01 -1.77689410e+00 -5.98015643e-01 -5.98015643e-01
 -5.98015643e-01  5.33327163e+00  5.33327163e+00  5.33327163e+00
  1.09334557e+02  6.14590710e+03]
E1 = -179.7686413302762  E_coul = 54.48584662570183
cycle= 1 E= -125.282794704574  delta_E= 2.84e-14  |g|= 3.02e-11  |ddm|= 4.7e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -179.7686413302762  E_coul = 54.48584662570183
  HOMO = -0.598015642977707  LUMO = 5.33327162710412
  mo_energy =
[-3.18275330e+01 -1.77689410e+00 -5.98015643e-01 -5.98015643e-01
 -5.98015643e-01  5.33327163e+00  5.33327163e+00  5.33327163e+00
  1.09334557e+02  6.14590710e+03]
E1 = -179.76864133032456  E_coul = 54.485846625750135
Extra cycle  E= -125.282794704574  delta_E= -5.68e-14  |g|= 4.93e-12  |ddm|= 7.72e-12
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
exp = [4.61715662e+03 1.30124661e+02 1.95203125e+01 9.62199375e-01
 5.27487099e+00 8.89492616e-01]
grad_E = [ 1.35949393e-04 -4.32493069e-06 -1.67837327e-07 -1.39203275e-03
 -1.44453702e-04  6.14085501e-04]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:27:25 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.15644054        1
[INPUT] 0    0    [1    /1   ]  130.137038181        1
[INPUT] 0    0    [1    /1   ]  19.5211012975        1
[INPUT] 0    0    [1    /1   ]  0.962457264536       1
[INPUT] 1    0    [1    /1   ]  5.27549473968        1
[INPUT] 1    0    [1    /1   ]  0.889493753469       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.156440538033, 1.0]], [0, [130.1370381813885, 1.0]], [0, [19.521101297521, 1.0]], [0, [0.962457264536448, 1.0]], [1, [5.27549473968284, 1.0]], [1, [0.8894937534694825, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.15644054]
bas 1, expnt(s) = [130.13703818]
bas 2, expnt(s) = [19.5211013]
bas 3, expnt(s) = [0.96245726]
bas 4, expnt(s) = [5.27549474]
bas 5, expnt(s) = [0.88949375]
CPU time:       103.91
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61715644e+03 1.41512879e+03 1.30137038e+02 9.73454625e+01
 1.95211013e+01 2.34635251e+01 9.62457265e-01 2.45499785e+00
 5.27549474e+00 2.33245560e+01 8.89493753e-01 2.52007242e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.818343538104646
cond(S) = 4.258375369317517
E1 = -177.9765131252834  E_coul = 54.32379946230678
init E= -123.652713662977
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.654328265232778  LUMO = 5.28588187333147
  mo_energy =
[-3.16955164e+01 -1.82281234e+00 -6.54328265e-01 -6.54328265e-01
 -6.54328265e-01  5.28588187e+00  5.28588187e+00  5.28588187e+00
  1.09454683e+02  6.14625511e+03]
E1 = -179.74205417857746  E_coul = 54.459287835304
cycle= 1 E= -125.282766343273  delta_E= -1.63  |g|= 0.158  |ddm|= 0.279
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.268861
diis-c [-0.07228608  1.        ]
  HOMO = -0.599678653424976  LUMO = 5.33102224030093
  mo_energy =
[-3.18337863e+01 -1.77893346e+00 -5.99678653e-01 -5.99678653e-01
 -5.99678653e-01  5.33102224e+00  5.33102224e+00  5.33102224e+00
  1.09340979e+02  6.14593509e+03]
E1 = -179.77399151841817  E_coul = 54.49119720207394
cycle= 2 E= -125.282794316344  delta_E= -2.8e-05  |g|= 0.00334  |ddm|= 0.00517
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00418483
diis-c [-1.75006467e-05 -4.10183350e-04  1.00041018e+00]
  HOMO = -0.597673564762906  LUMO = 5.33421277810362
  mo_energy =
[-3.18262612e+01 -1.77651054e+00 -5.97673565e-01 -5.97673565e-01
 -5.97673565e-01  5.33421278e+00  5.33421278e+00  5.33421278e+00
  1.09348504e+02  6.14594218e+03]
E1 = -179.76871529592287  E_coul = 54.48592030516615
cycle= 3 E= -125.282794990757  delta_E= -6.74e-07  |g|= 0.000543  |ddm|= 0.000843
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000677684
diis-c [-1.50200220e-09 -2.40890860e-04  1.39027984e-01  8.61212907e-01]
  HOMO = -0.597955823879053  LUMO = 5.33376244699718
  mo_energy =
[-3.18273483e+01 -1.77685160e+00 -5.97955824e-01 -5.97955824e-01
 -5.97955824e-01  5.33376245e+00  5.33376245e+00  5.33376245e+00
  1.09347399e+02  6.14594096e+03]
E1 = -179.76946217816953  E_coul = 54.48666716860724
cycle= 4 E= -125.282795009562  delta_E= -1.88e-08  |g|= 9.11e-07  |ddm|= 0.000119
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.12785e-06
diis-c [-1.54162482e-15  2.95863788e-06 -2.05099316e-03 -1.11992289e-02
  1.01324726e+00]
  HOMO = -0.597955422758414  LUMO = 5.33376307632726
  mo_energy =
[-3.18273470e+01 -1.77685112e+00 -5.97955423e-01 -5.97955423e-01
 -5.97955423e-01  5.33376308e+00  5.33376308e+00  5.33376308e+00
  1.09347400e+02  6.14594096e+03]
E1 = -179.76946115945805  E_coul = 54.48666614989582
cycle= 5 E= -125.282795009562  delta_E= 7.11e-14  |g|= 1.34e-09  |ddm|= 1.62e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -179.76946115945805  E_coul = 54.48666614989582
  HOMO = -0.597955423475172  LUMO = 5.33376307511775
  mo_energy =
[-3.18273470e+01 -1.77685112e+00 -5.97955423e-01 -5.97955423e-01
 -5.97955423e-01  5.33376308e+00  5.33376308e+00  5.33376308e+00
  1.09347400e+02  6.14594096e+03]
E1 = -179.76946116123642  E_coul = 54.48666615167408
Extra cycle  E= -125.282795009562  delta_E= -1.14e-13  |g|= 1.81e-10  |ddm|= 2.83e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [4.61715644e+03 1.30137038e+02 1.95211013e+01 9.62457265e-01
 5.27549474e+00 8.89493753e-01]
E = -125.28279500956234
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:27:25 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.15644054        1
[INPUT] 0    0    [1    /1   ]  130.137038181        1
[INPUT] 0    0    [1    /1   ]  19.5211012975        1
[INPUT] 0    0    [1    /1   ]  0.962457264536       1
[INPUT] 1    0    [1    /1   ]  5.27549473968        1
[INPUT] 1    0    [1    /1   ]  0.889493753469       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.156440538033, 1.0]], [0, [130.1370381813885, 1.0]], [0, [19.521101297521, 1.0]], [0, [0.962457264536448, 1.0]], [1, [5.27549473968284, 1.0]], [1, [0.8894937534694825, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.15644054]
bas 1, expnt(s) = [130.13703818]
bas 2, expnt(s) = [19.5211013]
bas 3, expnt(s) = [0.96245726]
bas 4, expnt(s) = [5.27549474]
bas 5, expnt(s) = [0.88949375]
CPU time:       104.47
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61715644e+03 1.41512879e+03 1.30137038e+02 9.73454625e+01
 1.95211013e+01 2.34635251e+01 9.62457265e-01 2.45499785e+00
 5.27549474e+00 2.33245560e+01 8.89493753e-01 2.52007242e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.818343538104646
cond(S) = 4.258375369317517
E1 = -177.9765131252834  E_coul = 54.32379946230678
init E= -123.652713662977
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.654328265232778  LUMO = 5.28588187333147
  mo_energy =
[-3.16955164e+01 -1.82281234e+00 -6.54328265e-01 -6.54328265e-01
 -6.54328265e-01  5.28588187e+00  5.28588187e+00  5.28588187e+00
  1.09454683e+02  6.14625511e+03]
E1 = -179.74205417857746  E_coul = 54.459287835304
cycle= 1 E= -125.282766343273  delta_E= -1.63  |g|= 0.158  |ddm|= 0.279
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.268861
diis-c [-0.07228608  1.        ]
  HOMO = -0.599678653424976  LUMO = 5.33102224030093
  mo_energy =
[-3.18337863e+01 -1.77893346e+00 -5.99678653e-01 -5.99678653e-01
 -5.99678653e-01  5.33102224e+00  5.33102224e+00  5.33102224e+00
  1.09340979e+02  6.14593509e+03]
E1 = -179.77399151841817  E_coul = 54.49119720207394
cycle= 2 E= -125.282794316344  delta_E= -2.8e-05  |g|= 0.00334  |ddm|= 0.00517
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00418483
diis-c [-1.75006467e-05 -4.10183350e-04  1.00041018e+00]
  HOMO = -0.597673564762906  LUMO = 5.33421277810362
  mo_energy =
[-3.18262612e+01 -1.77651054e+00 -5.97673565e-01 -5.97673565e-01
 -5.97673565e-01  5.33421278e+00  5.33421278e+00  5.33421278e+00
  1.09348504e+02  6.14594218e+03]
E1 = -179.76871529592287  E_coul = 54.48592030516615
cycle= 3 E= -125.282794990757  delta_E= -6.74e-07  |g|= 0.000543  |ddm|= 0.000843
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000677684
diis-c [-1.50200220e-09 -2.40890860e-04  1.39027984e-01  8.61212907e-01]
  HOMO = -0.597955823879053  LUMO = 5.33376244699718
  mo_energy =
[-3.18273483e+01 -1.77685160e+00 -5.97955824e-01 -5.97955824e-01
 -5.97955824e-01  5.33376245e+00  5.33376245e+00  5.33376245e+00
  1.09347399e+02  6.14594096e+03]
E1 = -179.76946217816953  E_coul = 54.48666716860724
cycle= 4 E= -125.282795009562  delta_E= -1.88e-08  |g|= 9.11e-07  |ddm|= 0.000119
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.12785e-06
diis-c [-1.54162482e-15  2.95863788e-06 -2.05099316e-03 -1.11992289e-02
  1.01324726e+00]
  HOMO = -0.597955422758414  LUMO = 5.33376307632726
  mo_energy =
[-3.18273470e+01 -1.77685112e+00 -5.97955423e-01 -5.97955423e-01
 -5.97955423e-01  5.33376308e+00  5.33376308e+00  5.33376308e+00
  1.09347400e+02  6.14594096e+03]
E1 = -179.76946115945805  E_coul = 54.48666614989582
cycle= 5 E= -125.282795009562  delta_E= 7.11e-14  |g|= 1.34e-09  |ddm|= 1.62e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -179.76946115945805  E_coul = 54.48666614989582
  HOMO = -0.597955423475172  LUMO = 5.33376307511775
  mo_energy =
[-3.18273470e+01 -1.77685112e+00 -5.97955423e-01 -5.97955423e-01
 -5.97955423e-01  5.33376308e+00  5.33376308e+00  5.33376308e+00
  1.09347400e+02  6.14594096e+03]
E1 = -179.76946116123642  E_coul = 54.48666615167408
Extra cycle  E= -125.282795009562  delta_E= -1.14e-13  |g|= 1.81e-10  |ddm|= 2.83e-10
    CPU time for scf_cycle      0.08 sec, wall time      0.09 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.258375369317517
E1 = -179.76946116123642  E_coul = 54.48666615167408
init E= -125.282795009562
    CPU time for initialize scf      0.04 sec, wall time      0.04 sec
  HOMO = -0.597955423365121  LUMO = 5.33376307529347
  mo_energy =
[-3.18273470e+01 -1.77685112e+00 -5.97955423e-01 -5.97955423e-01
 -5.97955423e-01  5.33376308e+00  5.33376308e+00  5.33376308e+00
  1.09347400e+02  6.14594096e+03]
E1 = -179.76946116094405  E_coul = 54.486666151381634
cycle= 1 E= -125.282795009562  delta_E= -8.53e-14  |g|= 3e-11  |ddm|= 4.68e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -179.76946116094405  E_coul = 54.486666151381634
  HOMO = -0.597955423383281  LUMO = 5.3337630752645
  mo_energy =
[-3.18273470e+01 -1.77685112e+00 -5.97955423e-01 -5.97955423e-01
 -5.97955423e-01  5.33376308e+00  5.33376308e+00  5.33376308e+00
  1.09347400e+02  6.14594096e+03]
E1 = -179.76946116099185  E_coul = 54.486666151429624
Extra cycle  E= -125.282795009562  delta_E= 1.99e-13  |g|= 4.94e-12  |ddm|= 7.68e-12
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [4.61715644e+03 1.30137038e+02 1.95211013e+01 9.62457265e-01
 5.27549474e+00 8.89493753e-01]
grad_E = [ 1.35940431e-04  2.45831177e-06 -2.46526169e-05 -2.90073215e-04
  6.32279164e-06 -1.23732901e-05]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:27:28 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.1562678         1
[INPUT] 0    0    [1    /1   ]  130.137674205        1
[INPUT] 0    0    [1    /1   ]  19.5213410094        1
[INPUT] 0    0    [1    /1   ]  0.962531816707       1
[INPUT] 1    0    [1    /1   ]  5.27545970467        1
[INPUT] 1    0    [1    /1   ]  0.889480020997       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.156267801727, 1.0]], [0, [130.1376742050891, 1.0]], [0, [19.521341009375515, 1.0]], [0, [0.9625318167070119, 1.0]], [1, [5.275459704671625, 1.0]], [1, [0.8894800209966309, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.1562678]
bas 1, expnt(s) = [130.13767421]
bas 2, expnt(s) = [19.52134101]
bas 3, expnt(s) = [0.96253182]
bas 4, expnt(s) = [5.2754597]
bas 5, expnt(s) = [0.88948002]
CPU time:       107.31
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61715627e+03 1.41512875e+03 1.30137674e+02 9.73458193e+01
 1.95213410e+01 2.34637412e+01 9.62531817e-01 2.45514047e+00
 5.27545970e+00 2.33243624e+01 8.89480021e-01 2.52002378e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.818339063572049
cond(S) = 4.258453401217511
E1 = -177.97674370959578  E_coul = 54.32407297116877
init E= -123.652670738427
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.654308416371056  LUMO = 5.28584250417058
  mo_energy =
[-3.16954619e+01 -1.82278967e+00 -6.54308416e-01 -6.54308416e-01
 -6.54308416e-01  5.28584250e+00  5.28584250e+00  5.28584250e+00
  1.09456255e+02  6.14625716e+03]
E1 = -179.7422378449307  E_coul = 54.45947148409898
cycle= 1 E= -125.282766360832  delta_E= -1.63  |g|= 0.158  |ddm|= 0.279
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.26887
diis-c [-0.07229102  1.        ]
  HOMO = -0.599664020644082  LUMO = 5.33097383158374
  mo_energy =
[-3.18337458e+01 -1.77892602e+00 -5.99664021e-01 -5.99664021e-01
 -5.99664021e-01  5.33097383e+00  5.33097383e+00  5.33097383e+00
  1.09342539e+02  6.14593720e+03]
E1 = -179.7741869958431  E_coul = 54.49139264392563
cycle= 2 E= -125.282794351917  delta_E= -2.8e-05  |g|= 0.00334  |ddm|= 0.00517
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00418631
diis-c [-1.75130852e-05 -4.09076048e-04  1.00040908e+00]
  HOMO = -0.597658233438858  LUMO = 5.33416550671296
  mo_energy =
[-3.18262179e+01 -1.77650215e+00 -5.97658233e-01 -5.97658233e-01
 -5.97658233e-01  5.33416551e+00  5.33416551e+00  5.33416551e+00
  1.09350067e+02  6.14594429e+03]
E1 = -179.76890875907864  E_coul = 54.48611373224558
cycle= 3 E= -125.282795026833  delta_E= -6.75e-07  |g|= 0.000543  |ddm|= 0.000843
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000677937
diis-c [-1.50339302e-09 -2.40912324e-04  1.39029649e-01  8.61211263e-01]
  HOMO = -0.597940595010861  LUMO = 5.33371500997183
  mo_energy =
[-3.18273054e+01 -1.77684335e+00 -5.97940595e-01 -5.97940595e-01
 -5.97940595e-01  5.33371501e+00  5.33371501e+00  5.33371501e+00
  1.09348962e+02  6.14594307e+03]
E1 = -179.7696559276997  E_coul = 54.48686088204693
cycle= 4 E= -125.282795045653  delta_E= -1.88e-08  |g|= 9.11e-07  |ddm|= 0.000119
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.1274e-06
diis-c [-1.53283823e-15  2.95907619e-06 -2.05125913e-03 -1.12022901e-02
  1.01325059e+00]
  HOMO = -0.597940194200084  LUMO = 5.33371563882117
  mo_energy =
[-3.18273041e+01 -1.77684287e+00 -5.97940194e-01 -5.97940194e-01
 -5.97940194e-01  5.33371564e+00  5.33371564e+00  5.33371564e+00
  1.09348963e+02  6.14594307e+03]
E1 = -179.7696549097133  E_coul = 54.48685986406052
cycle= 5 E= -125.282795045653  delta_E= -1.42e-14  |g|= 1.34e-09  |ddm|= 1.61e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -179.7696549097133  E_coul = 54.48685986406052
  HOMO = -0.597940194915356  LUMO = 5.33371563761392
  mo_energy =
[-3.18273041e+01 -1.77684287e+00 -5.97940195e-01 -5.97940195e-01
 -5.97940195e-01  5.33371564e+00  5.33371564e+00  5.33371564e+00
  1.09348963e+02  6.14594307e+03]
E1 = -179.76965491148772  E_coul = 54.48685986583504
Extra cycle  E= -125.282795045653  delta_E= 9.95e-14  |g|= 1.81e-10  |ddm|= 2.82e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
exp = [4.61715627e+03 1.30137674e+02 1.95213410e+01 9.62531817e-01
 5.27545970e+00 8.89480021e-01]
E = -125.28279504565268
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:27:29 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.1562678         1
[INPUT] 0    0    [1    /1   ]  130.137674205        1
[INPUT] 0    0    [1    /1   ]  19.5213410094        1
[INPUT] 0    0    [1    /1   ]  0.962531816707       1
[INPUT] 1    0    [1    /1   ]  5.27545970467        1
[INPUT] 1    0    [1    /1   ]  0.889480020997       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.156267801727, 1.0]], [0, [130.1376742050891, 1.0]], [0, [19.521341009375515, 1.0]], [0, [0.9625318167070119, 1.0]], [1, [5.275459704671625, 1.0]], [1, [0.8894800209966309, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.1562678]
bas 1, expnt(s) = [130.13767421]
bas 2, expnt(s) = [19.52134101]
bas 3, expnt(s) = [0.96253182]
bas 4, expnt(s) = [5.2754597]
bas 5, expnt(s) = [0.88948002]
CPU time:       107.87
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61715627e+03 1.41512875e+03 1.30137674e+02 9.73458193e+01
 1.95213410e+01 2.34637412e+01 9.62531817e-01 2.45514047e+00
 5.27545970e+00 2.33243624e+01 8.89480021e-01 2.52002378e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.818339063572049
cond(S) = 4.258453401217511
E1 = -177.97674370959578  E_coul = 54.32407297116877
init E= -123.652670738427
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.654308416371056  LUMO = 5.28584250417058
  mo_energy =
[-3.16954619e+01 -1.82278967e+00 -6.54308416e-01 -6.54308416e-01
 -6.54308416e-01  5.28584250e+00  5.28584250e+00  5.28584250e+00
  1.09456255e+02  6.14625716e+03]
E1 = -179.7422378449307  E_coul = 54.45947148409898
cycle= 1 E= -125.282766360832  delta_E= -1.63  |g|= 0.158  |ddm|= 0.279
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.26887
diis-c [-0.07229102  1.        ]
  HOMO = -0.599664020644082  LUMO = 5.33097383158374
  mo_energy =
[-3.18337458e+01 -1.77892602e+00 -5.99664021e-01 -5.99664021e-01
 -5.99664021e-01  5.33097383e+00  5.33097383e+00  5.33097383e+00
  1.09342539e+02  6.14593720e+03]
E1 = -179.7741869958431  E_coul = 54.49139264392563
cycle= 2 E= -125.282794351917  delta_E= -2.8e-05  |g|= 0.00334  |ddm|= 0.00517
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00418631
diis-c [-1.75130852e-05 -4.09076048e-04  1.00040908e+00]
  HOMO = -0.597658233438858  LUMO = 5.33416550671296
  mo_energy =
[-3.18262179e+01 -1.77650215e+00 -5.97658233e-01 -5.97658233e-01
 -5.97658233e-01  5.33416551e+00  5.33416551e+00  5.33416551e+00
  1.09350067e+02  6.14594429e+03]
E1 = -179.76890875907864  E_coul = 54.48611373224558
cycle= 3 E= -125.282795026833  delta_E= -6.75e-07  |g|= 0.000543  |ddm|= 0.000843
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000677937
diis-c [-1.50339302e-09 -2.40912324e-04  1.39029649e-01  8.61211263e-01]
  HOMO = -0.597940595010861  LUMO = 5.33371500997183
  mo_energy =
[-3.18273054e+01 -1.77684335e+00 -5.97940595e-01 -5.97940595e-01
 -5.97940595e-01  5.33371501e+00  5.33371501e+00  5.33371501e+00
  1.09348962e+02  6.14594307e+03]
E1 = -179.7696559276997  E_coul = 54.48686088204693
cycle= 4 E= -125.282795045653  delta_E= -1.88e-08  |g|= 9.11e-07  |ddm|= 0.000119
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.1274e-06
diis-c [-1.53283823e-15  2.95907619e-06 -2.05125913e-03 -1.12022901e-02
  1.01325059e+00]
  HOMO = -0.597940194200084  LUMO = 5.33371563882117
  mo_energy =
[-3.18273041e+01 -1.77684287e+00 -5.97940194e-01 -5.97940194e-01
 -5.97940194e-01  5.33371564e+00  5.33371564e+00  5.33371564e+00
  1.09348963e+02  6.14594307e+03]
E1 = -179.7696549097133  E_coul = 54.48685986406052
cycle= 5 E= -125.282795045653  delta_E= -1.42e-14  |g|= 1.34e-09  |ddm|= 1.61e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -179.7696549097133  E_coul = 54.48685986406052
  HOMO = -0.597940194915356  LUMO = 5.33371563761392
  mo_energy =
[-3.18273041e+01 -1.77684287e+00 -5.97940195e-01 -5.97940195e-01
 -5.97940195e-01  5.33371564e+00  5.33371564e+00  5.33371564e+00
  1.09348963e+02  6.14594307e+03]
E1 = -179.76965491148772  E_coul = 54.48685986583504
Extra cycle  E= -125.282795045653  delta_E= 9.95e-14  |g|= 1.81e-10  |ddm|= 2.82e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.258453401217511
E1 = -179.76965491148772  E_coul = 54.48685986583504
init E= -125.282795045653
    CPU time for initialize scf      0.04 sec, wall time      0.04 sec
  HOMO = -0.597940194805537  LUMO = 5.33371563778927
  mo_energy =
[-3.18273041e+01 -1.77684287e+00 -5.97940195e-01 -5.97940195e-01
 -5.97940195e-01  5.33371564e+00  5.33371564e+00  5.33371564e+00
  1.09348963e+02  6.14594307e+03]
E1 = -179.76965491119597  E_coul = 54.486859865543266
cycle= 1 E= -125.282795045653  delta_E= -2.84e-14  |g|= 3e-11  |ddm|= 4.67e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -179.76965491119597  E_coul = 54.486859865543266
  HOMO = -0.59794019482366  LUMO = 5.33371563776037
  mo_energy =
[-3.18273041e+01 -1.77684287e+00 -5.97940195e-01 -5.97940195e-01
 -5.97940195e-01  5.33371564e+00  5.33371564e+00  5.33371564e+00
  1.09348963e+02  6.14594307e+03]
E1 = -179.7696549112439  E_coul = 54.48685986559114
Extra cycle  E= -125.282795045653  delta_E= -4.26e-14  |g|= 4.91e-12  |ddm|= 7.66e-12
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [4.61715627e+03 1.30137674e+02 1.95213410e+01 9.62531817e-01
 5.27545970e+00 8.89480021e-01]
grad_E = [ 1.35941210e-04  1.34863972e-06 -7.85880097e-06  1.83673169e-05
  1.41967002e-05 -6.99022148e-05]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:27:32 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.15589236        1
[INPUT] 0    0    [1    /1   ]  130.137482751        1
[INPUT] 0    0    [1    /1   ]  19.5215537437        1
[INPUT] 0    0    [1    /1   ]  0.962593155201       1
[INPUT] 1    0    [1    /1   ]  5.27538693847        1
[INPUT] 1    0    [1    /1   ]  0.889470545974       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.155892361567, 1.0]], [0, [130.13748275068093, 1.0]], [0, [19.52155374370745, 1.0]], [0, [0.9625931552006769, 1.0]], [1, [5.275386938467087, 1.0]], [1, [0.8894705459744207, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.15589236]
bas 1, expnt(s) = [130.13748275]
bas 2, expnt(s) = [19.52155374]
bas 3, expnt(s) = [0.96259316]
bas 4, expnt(s) = [5.27538694]
bas 5, expnt(s) = [0.88947055]
CPU time:       110.74
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61715589e+03 1.41512866e+03 1.30137483e+02 9.73457119e+01
 1.95215537e+01 2.34639330e+01 9.62593155e-01 2.45525781e+00
 5.27538694e+00 2.33239602e+01 8.89470546e-01 2.51999023e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.818334607311394
cond(S) = 4.258537261124631
E1 = -177.97689701569863  E_coul = 54.324296786026274
init E= -123.652600229672
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.65429100300379  LUMO = 5.28578924698171
  mo_energy =
[-3.16954214e+01 -1.82277055e+00 -6.54291003e-01 -6.54291003e-01
 -6.54291003e-01  5.28578925e+00  5.28578925e+00  5.28578925e+00
  1.09457065e+02  6.14625673e+03]
E1 = -179.74245111909582  E_coul = 54.45968471370556
cycle= 1 E= -125.28276640539  delta_E= -1.63  |g|= 0.158  |ddm|= 0.279
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.268882
diis-c [-0.07229741  1.        ]
  HOMO = -0.599647102955412  LUMO = 5.33091962621297
  mo_energy =
[-3.18337011e+01 -1.77891491e+00 -5.99647103e-01 -5.99647103e-01
 -5.99647103e-01  5.33091963e+00  5.33091963e+00  5.33091963e+00
  1.09343357e+02  6.14593683e+03]
E1 = -179.7743989281984  E_coul = 54.49160453432235
cycle= 2 E= -125.282794393876  delta_E= -2.8e-05  |g|= 0.00334  |ddm|= 0.00517
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00418608
diis-c [-1.75111610e-05 -4.09178197e-04  1.00040918e+00]
  HOMO = -0.59764142350801  LUMO = 5.33411112119511
  mo_energy =
[-3.18261735e+01 -1.77649107e+00 -5.97641424e-01 -5.97641424e-01
 -5.97641424e-01  5.33411112e+00  5.33411112e+00  5.33411112e+00
  1.09350884e+02  6.14594393e+03]
E1 = -179.76912086557323  E_coul = 54.486325796837924
cycle= 3 E= -125.282795068735  delta_E= -6.75e-07  |g|= 0.000543  |ddm|= 0.000843
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000677909
diis-c [-1.50418524e-09 -2.40920968e-04  1.39031150e-01  8.61209771e-01]
  HOMO = -0.597923773949342  LUMO = 5.33366064431225
  mo_energy =
[-3.18272609e+01 -1.77683227e+00 -5.97923774e-01 -5.97923774e-01
 -5.97923774e-01  5.33366064e+00  5.33366064e+00  5.33366064e+00
  1.09349780e+02  6.14594271e+03]
E1 = -179.7698680130554  E_coul = 54.48707292550187
cycle= 4 E= -125.282795087554  delta_E= -1.88e-08  |g|= 9.1e-07  |ddm|= 0.000119
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.12695e-06
diis-c [-1.53258568e-15  2.95943358e-06 -2.05150018e-03 -1.12044965e-02
  1.01325304e+00]
  HOMO = -0.597923373412707  LUMO = 5.33366127272806
  mo_energy =
[-3.18272597e+01 -1.77683179e+00 -5.97923373e-01 -5.97923373e-01
 -5.97923373e-01  5.33366127e+00  5.33366127e+00  5.33366127e+00
  1.09349781e+02  6.14594271e+03]
E1 = -179.76986699571611  E_coul = 54.487071908162534
cycle= 5 E= -125.282795087554  delta_E= -5.68e-14  |g|= 1.34e-09  |ddm|= 1.61e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -179.76986699571611  E_coul = 54.487071908162534
  HOMO = -0.597923374126682  LUMO = 5.33366127152286
  mo_energy =
[-3.18272597e+01 -1.77683179e+00 -5.97923374e-01 -5.97923374e-01
 -5.97923374e-01  5.33366127e+00  5.33366127e+00  5.33366127e+00
  1.09349781e+02  6.14594271e+03]
E1 = -179.76986699748738  E_coul = 54.48707190993384
Extra cycle  E= -125.282795087554  delta_E= 2.84e-14  |g|= 1.81e-10  |ddm|= 2.81e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
exp = [4.61715589e+03 1.30137483e+02 1.95215537e+01 9.62593155e-01
 5.27538694e+00 8.89470546e-01]
E = -125.28279508755355
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:27:32 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.15589236        1
[INPUT] 0    0    [1    /1   ]  130.137482751        1
[INPUT] 0    0    [1    /1   ]  19.5215537437        1
[INPUT] 0    0    [1    /1   ]  0.962593155201       1
[INPUT] 1    0    [1    /1   ]  5.27538693847        1
[INPUT] 1    0    [1    /1   ]  0.889470545974       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.155892361567, 1.0]], [0, [130.13748275068093, 1.0]], [0, [19.52155374370745, 1.0]], [0, [0.9625931552006769, 1.0]], [1, [5.275386938467087, 1.0]], [1, [0.8894705459744207, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.15589236]
bas 1, expnt(s) = [130.13748275]
bas 2, expnt(s) = [19.52155374]
bas 3, expnt(s) = [0.96259316]
bas 4, expnt(s) = [5.27538694]
bas 5, expnt(s) = [0.88947055]
CPU time:       111.31
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61715589e+03 1.41512866e+03 1.30137483e+02 9.73457119e+01
 1.95215537e+01 2.34639330e+01 9.62593155e-01 2.45525781e+00
 5.27538694e+00 2.33239602e+01 8.89470546e-01 2.51999023e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.818334607311394
cond(S) = 4.258537261124631
E1 = -177.97689701569863  E_coul = 54.324296786026274
init E= -123.652600229672
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.65429100300379  LUMO = 5.28578924698171
  mo_energy =
[-3.16954214e+01 -1.82277055e+00 -6.54291003e-01 -6.54291003e-01
 -6.54291003e-01  5.28578925e+00  5.28578925e+00  5.28578925e+00
  1.09457065e+02  6.14625673e+03]
E1 = -179.74245111909582  E_coul = 54.45968471370556
cycle= 1 E= -125.28276640539  delta_E= -1.63  |g|= 0.158  |ddm|= 0.279
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.268882
diis-c [-0.07229741  1.        ]
  HOMO = -0.599647102955412  LUMO = 5.33091962621297
  mo_energy =
[-3.18337011e+01 -1.77891491e+00 -5.99647103e-01 -5.99647103e-01
 -5.99647103e-01  5.33091963e+00  5.33091963e+00  5.33091963e+00
  1.09343357e+02  6.14593683e+03]
E1 = -179.7743989281984  E_coul = 54.49160453432235
cycle= 2 E= -125.282794393876  delta_E= -2.8e-05  |g|= 0.00334  |ddm|= 0.00517
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00418608
diis-c [-1.75111610e-05 -4.09178197e-04  1.00040918e+00]
  HOMO = -0.59764142350801  LUMO = 5.33411112119511
  mo_energy =
[-3.18261735e+01 -1.77649107e+00 -5.97641424e-01 -5.97641424e-01
 -5.97641424e-01  5.33411112e+00  5.33411112e+00  5.33411112e+00
  1.09350884e+02  6.14594393e+03]
E1 = -179.76912086557323  E_coul = 54.486325796837924
cycle= 3 E= -125.282795068735  delta_E= -6.75e-07  |g|= 0.000543  |ddm|= 0.000843
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000677909
diis-c [-1.50418524e-09 -2.40920968e-04  1.39031150e-01  8.61209771e-01]
  HOMO = -0.597923773949342  LUMO = 5.33366064431225
  mo_energy =
[-3.18272609e+01 -1.77683227e+00 -5.97923774e-01 -5.97923774e-01
 -5.97923774e-01  5.33366064e+00  5.33366064e+00  5.33366064e+00
  1.09349780e+02  6.14594271e+03]
E1 = -179.7698680130554  E_coul = 54.48707292550187
cycle= 4 E= -125.282795087554  delta_E= -1.88e-08  |g|= 9.1e-07  |ddm|= 0.000119
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.12695e-06
diis-c [-1.53258568e-15  2.95943358e-06 -2.05150018e-03 -1.12044965e-02
  1.01325304e+00]
  HOMO = -0.597923373412707  LUMO = 5.33366127272806
  mo_energy =
[-3.18272597e+01 -1.77683179e+00 -5.97923373e-01 -5.97923373e-01
 -5.97923373e-01  5.33366127e+00  5.33366127e+00  5.33366127e+00
  1.09349781e+02  6.14594271e+03]
E1 = -179.76986699571611  E_coul = 54.487071908162534
cycle= 5 E= -125.282795087554  delta_E= -5.68e-14  |g|= 1.34e-09  |ddm|= 1.61e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -179.76986699571611  E_coul = 54.487071908162534
  HOMO = -0.597923374126682  LUMO = 5.33366127152286
  mo_energy =
[-3.18272597e+01 -1.77683179e+00 -5.97923374e-01 -5.97923374e-01
 -5.97923374e-01  5.33366127e+00  5.33366127e+00  5.33366127e+00
  1.09349781e+02  6.14594271e+03]
E1 = -179.76986699748738  E_coul = 54.48707190993384
Extra cycle  E= -125.282795087554  delta_E= 2.84e-14  |g|= 1.81e-10  |ddm|= 2.81e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.258537261124631
E1 = -179.76986699748738  E_coul = 54.48707190993384
init E= -125.282795087554
    CPU time for initialize scf      0.04 sec, wall time      0.04 sec
  HOMO = -0.597923374017065  LUMO = 5.33366127169789
  mo_energy =
[-3.18272597e+01 -1.77683179e+00 -5.97923374e-01 -5.97923374e-01
 -5.97923374e-01  5.33366127e+00  5.33366127e+00  5.33366127e+00
  1.09349781e+02  6.14594271e+03]
E1 = -179.76986699719623  E_coul = 54.4870719096426
cycle= 1 E= -125.282795087554  delta_E= -8.53e-14  |g|= 2.99e-11  |ddm|= 4.66e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -179.76986699719623  E_coul = 54.4870719096426
  HOMO = -0.597923374035152  LUMO = 5.33366127166904
  mo_energy =
[-3.18272597e+01 -1.77683179e+00 -5.97923374e-01 -5.97923374e-01
 -5.97923374e-01  5.33366127e+00  5.33366127e+00  5.33366127e+00
  1.09349781e+02  6.14594271e+03]
E1 = -179.76986699724398  E_coul = 54.48707190969046
Extra cycle  E= -125.282795087554  delta_E= 1.14e-13  |g|= 4.9e-12  |ddm|= 7.64e-12
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [4.61715589e+03 1.30137483e+02 1.95215537e+01 9.62593155e-01
 5.27538694e+00 8.89470546e-01]
grad_E = [ 1.35942735e-04 -4.10874052e-07  1.31885067e-05  2.73034349e-04
  6.97051827e-06 -3.41604556e-05]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:27:35 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.15474647        1
[INPUT] 0    0    [1    /1   ]  130.136946517        1
[INPUT] 0    0    [1    /1   ]  19.521882799         1
[INPUT] 0    0    [1    /1   ]  0.962684496635       1
[INPUT] 1    0    [1    /1   ]  5.27526083259        1
[INPUT] 1    0    [1    /1   ]  0.889457946585       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.154746471985, 1.0]], [0, [130.13694651718214, 1.0]], [0, [19.521882798993804, 1.0]], [0, [0.9626844966348771, 1.0]], [1, [5.275260832587265, 1.0]], [1, [0.8894579465852562, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.15474647]
bas 1, expnt(s) = [130.13694652]
bas 2, expnt(s) = [19.5218828]
bas 3, expnt(s) = [0.9626845]
bas 4, expnt(s) = [5.27526083]
bas 5, expnt(s) = [0.88945795]
CPU time:       114.37
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61715475e+03 1.41512840e+03 1.30136947e+02 9.73454111e+01
 1.95218828e+01 2.34642296e+01 9.62684497e-01 2.45543254e+00
 5.27526083e+00 2.33232633e+01 8.89457947e-01 2.51994561e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.818327328727221
cond(S) = 4.2586700394145005
E1 = -177.9771112524221  E_coul = 54.324630083807236
init E= -123.652481168615
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.654264531061416  LUMO = 5.28570438705708
  mo_energy =
[-3.16953628e+01 -1.82274183e+00 -6.54264531e-01 -6.54264531e-01
 -6.54264531e-01  5.28570439e+00  5.28570439e+00  5.28570439e+00
  1.09458123e+02  6.14625467e+03]
E1 = -179.74280573866324  E_coul = 54.4600392167354
cycle= 1 E= -125.282766521928  delta_E= -1.63  |g|= 0.158  |ddm|= 0.279
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.268901
diis-c [-0.07230778  1.        ]
  HOMO = -0.599619055998118  LUMO = 5.3308371225412
  mo_energy =
[-3.18336275e+01 -1.77889538e+00 -5.99619056e-01 -5.99619056e-01
 -5.99619056e-01  5.33083712e+00  5.33083712e+00  5.33083712e+00
  1.09344436e+02  6.14593489e+03]
E1 = -179.77474523023275  E_coul = 54.4919507336007
cycle= 2 E= -125.282794496632  delta_E= -2.8e-05  |g|= 0.00334  |ddm|= 0.00517
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00418491
diis-c [-1.75013740e-05 -4.09906298e-04  1.00040991e+00]
  HOMO = -0.59761392726287  LUMO = 5.33402771506583
  mo_energy =
[-3.18261019e+01 -1.77647207e+00 -5.97613927e-01 -5.97613927e-01
 -5.97613927e-01  5.33402772e+00  5.33402772e+00  5.33402772e+00
  1.09351962e+02  6.14594199e+03]
E1 = -179.7694684765314  E_coul = 54.48667330539273
cycle= 3 E= -125.282795171139  delta_E= -6.75e-07  |g|= 0.000543  |ddm|= 0.000843
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000677732
diis-c [-1.50520192e-09 -2.40929477e-04  1.39033354e-01  8.61207576e-01]
  HOMO = -0.597896206383381  LUMO = 5.33357735675583
  mo_energy =
[-3.18271890e+01 -1.77681321e+00 -5.97896206e-01 -5.97896206e-01
 -5.97896206e-01  5.33357736e+00  5.33357736e+00  5.33357736e+00
  1.09350857e+02  6.14594077e+03]
E1 = -179.77021544495793  E_coul = 54.487420255010534
cycle= 4 E= -125.282795189947  delta_E= -1.88e-08  |g|= 9.09e-07  |ddm|= 0.000119
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.12625e-06
diis-c [-1.51790903e-15  2.95998907e-06 -2.05187403e-03 -1.12076038e-02
  1.01325652e+00]
  HOMO = -0.597895806259482  LUMO = 5.33357798451529
  mo_energy =
[-3.18271878e+01 -1.77681273e+00 -5.97895806e-01 -5.97895806e-01
 -5.97895806e-01  5.33357798e+00  5.33357798e+00  5.33357798e+00
  1.09350858e+02  6.14594076e+03]
E1 = -179.77021442859515  E_coul = 54.48741923864766
cycle= 5 E= -125.282795189947  delta_E= -9.95e-14  |g|= 1.33e-09  |ddm|= 1.61e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -179.77021442859515  E_coul = 54.48741923864766
  HOMO = -0.597895806971471  LUMO = 5.33357798331326
  mo_energy =
[-3.18271878e+01 -1.77681273e+00 -5.97895807e-01 -5.97895807e-01
 -5.97895807e-01  5.33357798e+00  5.33357798e+00  5.33357798e+00
  1.09350858e+02  6.14594076e+03]
E1 = -179.77021443036162  E_coul = 54.48741924041409
Extra cycle  E= -125.282795189948  delta_E= -4.26e-14  |g|= 1.8e-10  |ddm|= 2.81e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
exp = [4.61715475e+03 1.30136947e+02 1.95218828e+01 9.62684497e-01
 5.27526083e+00 8.89457947e-01]
E = -125.28279518994754
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:27:36 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.15474647        1
[INPUT] 0    0    [1    /1   ]  130.136946517        1
[INPUT] 0    0    [1    /1   ]  19.521882799         1
[INPUT] 0    0    [1    /1   ]  0.962684496635       1
[INPUT] 1    0    [1    /1   ]  5.27526083259        1
[INPUT] 1    0    [1    /1   ]  0.889457946585       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.154746471985, 1.0]], [0, [130.13694651718214, 1.0]], [0, [19.521882798993804, 1.0]], [0, [0.9626844966348771, 1.0]], [1, [5.275260832587265, 1.0]], [1, [0.8894579465852562, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.15474647]
bas 1, expnt(s) = [130.13694652]
bas 2, expnt(s) = [19.5218828]
bas 3, expnt(s) = [0.9626845]
bas 4, expnt(s) = [5.27526083]
bas 5, expnt(s) = [0.88945795]
CPU time:       114.95
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61715475e+03 1.41512840e+03 1.30136947e+02 9.73454111e+01
 1.95218828e+01 2.34642296e+01 9.62684497e-01 2.45543254e+00
 5.27526083e+00 2.33232633e+01 8.89457947e-01 2.51994561e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.818327328727221
cond(S) = 4.2586700394145005
E1 = -177.9771112524221  E_coul = 54.324630083807236
init E= -123.652481168615
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.654264531061416  LUMO = 5.28570438705708
  mo_energy =
[-3.16953628e+01 -1.82274183e+00 -6.54264531e-01 -6.54264531e-01
 -6.54264531e-01  5.28570439e+00  5.28570439e+00  5.28570439e+00
  1.09458123e+02  6.14625467e+03]
E1 = -179.74280573866324  E_coul = 54.4600392167354
cycle= 1 E= -125.282766521928  delta_E= -1.63  |g|= 0.158  |ddm|= 0.279
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.268901
diis-c [-0.07230778  1.        ]
  HOMO = -0.599619055998118  LUMO = 5.3308371225412
  mo_energy =
[-3.18336275e+01 -1.77889538e+00 -5.99619056e-01 -5.99619056e-01
 -5.99619056e-01  5.33083712e+00  5.33083712e+00  5.33083712e+00
  1.09344436e+02  6.14593489e+03]
E1 = -179.77474523023275  E_coul = 54.4919507336007
cycle= 2 E= -125.282794496632  delta_E= -2.8e-05  |g|= 0.00334  |ddm|= 0.00517
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00418491
diis-c [-1.75013740e-05 -4.09906298e-04  1.00040991e+00]
  HOMO = -0.59761392726287  LUMO = 5.33402771506583
  mo_energy =
[-3.18261019e+01 -1.77647207e+00 -5.97613927e-01 -5.97613927e-01
 -5.97613927e-01  5.33402772e+00  5.33402772e+00  5.33402772e+00
  1.09351962e+02  6.14594199e+03]
E1 = -179.7694684765314  E_coul = 54.48667330539273
cycle= 3 E= -125.282795171139  delta_E= -6.75e-07  |g|= 0.000543  |ddm|= 0.000843
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000677732
diis-c [-1.50520192e-09 -2.40929477e-04  1.39033354e-01  8.61207576e-01]
  HOMO = -0.597896206383381  LUMO = 5.33357735675583
  mo_energy =
[-3.18271890e+01 -1.77681321e+00 -5.97896206e-01 -5.97896206e-01
 -5.97896206e-01  5.33357736e+00  5.33357736e+00  5.33357736e+00
  1.09350857e+02  6.14594077e+03]
E1 = -179.77021544495793  E_coul = 54.487420255010534
cycle= 4 E= -125.282795189947  delta_E= -1.88e-08  |g|= 9.09e-07  |ddm|= 0.000119
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.12625e-06
diis-c [-1.51790903e-15  2.95998907e-06 -2.05187403e-03 -1.12076038e-02
  1.01325652e+00]
  HOMO = -0.597895806259482  LUMO = 5.33357798451529
  mo_energy =
[-3.18271878e+01 -1.77681273e+00 -5.97895806e-01 -5.97895806e-01
 -5.97895806e-01  5.33357798e+00  5.33357798e+00  5.33357798e+00
  1.09350858e+02  6.14594076e+03]
E1 = -179.77021442859515  E_coul = 54.48741923864766
cycle= 5 E= -125.282795189947  delta_E= -9.95e-14  |g|= 1.33e-09  |ddm|= 1.61e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -179.77021442859515  E_coul = 54.48741923864766
  HOMO = -0.597895806971471  LUMO = 5.33357798331326
  mo_energy =
[-3.18271878e+01 -1.77681273e+00 -5.97895807e-01 -5.97895807e-01
 -5.97895807e-01  5.33357798e+00  5.33357798e+00  5.33357798e+00
  1.09350858e+02  6.14594076e+03]
E1 = -179.77021443036162  E_coul = 54.48741924041409
Extra cycle  E= -125.282795189948  delta_E= -4.26e-14  |g|= 1.8e-10  |ddm|= 2.81e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.2586700394145005
E1 = -179.77021443036162  E_coul = 54.48741924041409
init E= -125.282795189948
    CPU time for initialize scf      0.04 sec, wall time      0.04 sec
  HOMO = -0.597895806862157  LUMO = 5.3335779834878
  mo_energy =
[-3.18271878e+01 -1.77681273e+00 -5.97895807e-01 -5.97895807e-01
 -5.97895807e-01  5.33357798e+00  5.33357798e+00  5.33357798e+00
  1.09350858e+02  6.14594076e+03]
E1 = -179.77021443007115  E_coul = 54.48741924012364
cycle= 1 E= -125.282795189948  delta_E= 2.84e-14  |g|= 2.98e-11  |ddm|= 4.64e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -179.77021443007115  E_coul = 54.48741924012364
  HOMO = -0.597895806880194  LUMO = 5.33357798345903
  mo_energy =
[-3.18271878e+01 -1.77681273e+00 -5.97895807e-01 -5.97895807e-01
 -5.97895807e-01  5.33357798e+00  5.33357798e+00  5.33357798e+00
  1.09350858e+02  6.14594076e+03]
E1 = -179.77021443011876  E_coul = 54.487419240171285
Extra cycle  E= -125.282795189947  delta_E= 2.84e-14  |g|= 4.89e-12  |ddm|= 7.62e-12
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [4.61715475e+03 1.30136947e+02 1.95218828e+01 9.62684497e-01
 5.27526083e+00 8.89457947e-01]
grad_E = [ 1.35945372e-04 -3.38130124e-06  4.78115648e-05  6.52963135e-04
 -1.03821970e-05  6.21790721e-05]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:27:39 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.151418          1
[INPUT] 0    0    [1    /1   ]  130.135988467        1
[INPUT] 0    0    [1    /1   ]  19.5224119161        1
[INPUT] 0    0    [1    /1   ]  0.962829672752       1
[INPUT] 1    0    [1    /1   ]  5.27505324912        1
[INPUT] 1    0    [1    /1   ]  0.889438730459       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.151417999718, 1.0]], [0, [130.1359884671672, 1.0]], [0, [19.522411916057166, 1.0]], [0, [0.9628296727521065, 1.0]], [1, [5.275053249123193, 1.0]], [1, [0.8894387304585167, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.151418]
bas 1, expnt(s) = [130.13598847]
bas 2, expnt(s) = [19.52241192]
bas 3, expnt(s) = [0.96282967]
bas 4, expnt(s) = [5.27505325]
bas 5, expnt(s) = [0.88943873]
CPU time:       117.80
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61715142e+03 1.41512764e+03 1.30135988e+02 9.73448736e+01
 1.95224119e+01 2.34647066e+01 9.62829673e-01 2.45571025e+00
 5.27505325e+00 2.33221161e+01 8.89438730e-01 2.51987756e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.818315402124433
cond(S) = 4.2588846307374935
E1 = -177.97744580225876  E_coul = 54.325159763607964
init E= -123.652286038651
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.654222230787215  LUMO = 5.2855679938502
  mo_energy =
[-3.16952706e+01 -1.82269606e+00 -6.54222231e-01 -6.54222231e-01
 -6.54222231e-01  5.28556799e+00  5.28556799e+00  5.28556799e+00
  1.09459746e+02  6.14624908e+03]
E1 = -179.74338744992696  E_coul = 54.46062063506943
cycle= 1 E= -125.282766814858  delta_E= -1.63  |g|= 0.158  |ddm|= 0.279
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.268932
diis-c [-0.07232464  1.        ]
  HOMO = -0.599573103966206  LUMO = 5.33070630850248
  mo_energy =
[-3.18335073e+01 -1.77886286e+00 -5.99573104e-01 -5.99573104e-01
 -5.99573104e-01  5.33070631e+00  5.33070631e+00  5.33070631e+00
  1.09346096e+02  6.14592950e+03]
E1 = -179.7753106720688  E_coul = 54.492515909167025
cycle= 2 E= -125.282794762902  delta_E= -2.79e-05  |g|= 0.00334  |ddm|= 0.00517
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00418267
diis-c [-1.74824912e-05 -4.11340488e-04  1.00041134e+00]
  HOMO = -0.597569038933231  LUMO = 5.33389516129312
  mo_energy =
[-3.18259855e+01 -1.77644063e+00 -5.97569039e-01 -5.97569039e-01
 -5.97569039e-01  5.33389516e+00  5.33389516e+00  5.33389516e+00
  1.09353618e+02  6.14593659e+03]
E1 = -179.77003650587488  E_coul = 54.48724106915664
cycle= 3 E= -125.282795436718  delta_E= -6.74e-07  |g|= 0.000542  |ddm|= 0.000842
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000677387
diis-c [-1.50674654e-09 -2.40941067e-04  1.39036825e-01  8.61204116e-01]
  HOMO = -0.597851178235168  LUMO = 5.33344503434573
  mo_energy =
[-3.18270721e+01 -1.77678163e+00 -5.97851178e-01 -5.97851178e-01
 -5.97851178e-01  5.33344503e+00  5.33344503e+00  5.33344503e+00
  1.09352514e+02  6.14593537e+03]
E1 = -179.77078311833046  E_coul = 54.487987662822
cycle= 4 E= -125.282795455508  delta_E= -1.88e-08  |g|= 9.08e-07  |ddm|= 0.000119
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.12512e-06
diis-c [-1.50997281e-15  2.96084052e-06 -2.05246541e-03 -1.12123929e-02
  1.01326190e+00]
  HOMO = -0.597850778768556  LUMO = 5.33344566105833
  mo_energy =
[-3.18270709e+01 -1.77678115e+00 -5.97850779e-01 -5.97850779e-01
 -5.97850779e-01  5.33344566e+00  5.33344566e+00  5.33344566e+00
  1.09352515e+02  6.14593537e+03]
E1 = -179.77078210352326  E_coul = 54.4879866480148
cycle= 5 E= -125.282795455508  delta_E= -1.42e-14  |g|= 1.33e-09  |ddm|= 1.61e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -179.77078210352326  E_coul = 54.4879866480148
  HOMO = -0.597850779477367  LUMO = 5.33344565986138
  mo_energy =
[-3.18270709e+01 -1.77678115e+00 -5.97850779e-01 -5.97850779e-01
 -5.97850779e-01  5.33344566e+00  5.33344566e+00  5.33344566e+00
  1.09352515e+02  6.14593537e+03]
E1 = -179.77078210528202  E_coul = 54.48798664977344
Extra cycle  E= -125.282795455509  delta_E= -1.28e-13  |g|= 1.79e-10  |ddm|= 2.79e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
exp = [4.61715142e+03 1.30135988e+02 1.95224119e+01 9.62829673e-01
 5.27505325e+00 8.89438730e-01]
E = -125.28279545550859
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:27:39 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.151418          1
[INPUT] 0    0    [1    /1   ]  130.135988467        1
[INPUT] 0    0    [1    /1   ]  19.5224119161        1
[INPUT] 0    0    [1    /1   ]  0.962829672752       1
[INPUT] 1    0    [1    /1   ]  5.27505324912        1
[INPUT] 1    0    [1    /1   ]  0.889438730459       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.151417999718, 1.0]], [0, [130.1359884671672, 1.0]], [0, [19.522411916057166, 1.0]], [0, [0.9628296727521065, 1.0]], [1, [5.275053249123193, 1.0]], [1, [0.8894387304585167, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.151418]
bas 1, expnt(s) = [130.13598847]
bas 2, expnt(s) = [19.52241192]
bas 3, expnt(s) = [0.96282967]
bas 4, expnt(s) = [5.27505325]
bas 5, expnt(s) = [0.88943873]
CPU time:       118.40
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61715142e+03 1.41512764e+03 1.30135988e+02 9.73448736e+01
 1.95224119e+01 2.34647066e+01 9.62829673e-01 2.45571025e+00
 5.27505325e+00 2.33221161e+01 8.89438730e-01 2.51987756e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.818315402124433
cond(S) = 4.2588846307374935
E1 = -177.97744580225876  E_coul = 54.325159763607964
init E= -123.652286038651
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.654222230787215  LUMO = 5.2855679938502
  mo_energy =
[-3.16952706e+01 -1.82269606e+00 -6.54222231e-01 -6.54222231e-01
 -6.54222231e-01  5.28556799e+00  5.28556799e+00  5.28556799e+00
  1.09459746e+02  6.14624908e+03]
E1 = -179.74338744992696  E_coul = 54.46062063506943
cycle= 1 E= -125.282766814858  delta_E= -1.63  |g|= 0.158  |ddm|= 0.279
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.268932
diis-c [-0.07232464  1.        ]
  HOMO = -0.599573103966206  LUMO = 5.33070630850248
  mo_energy =
[-3.18335073e+01 -1.77886286e+00 -5.99573104e-01 -5.99573104e-01
 -5.99573104e-01  5.33070631e+00  5.33070631e+00  5.33070631e+00
  1.09346096e+02  6.14592950e+03]
E1 = -179.7753106720688  E_coul = 54.492515909167025
cycle= 2 E= -125.282794762902  delta_E= -2.79e-05  |g|= 0.00334  |ddm|= 0.00517
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00418267
diis-c [-1.74824912e-05 -4.11340488e-04  1.00041134e+00]
  HOMO = -0.597569038933231  LUMO = 5.33389516129312
  mo_energy =
[-3.18259855e+01 -1.77644063e+00 -5.97569039e-01 -5.97569039e-01
 -5.97569039e-01  5.33389516e+00  5.33389516e+00  5.33389516e+00
  1.09353618e+02  6.14593659e+03]
E1 = -179.77003650587488  E_coul = 54.48724106915664
cycle= 3 E= -125.282795436718  delta_E= -6.74e-07  |g|= 0.000542  |ddm|= 0.000842
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000677387
diis-c [-1.50674654e-09 -2.40941067e-04  1.39036825e-01  8.61204116e-01]
  HOMO = -0.597851178235168  LUMO = 5.33344503434573
  mo_energy =
[-3.18270721e+01 -1.77678163e+00 -5.97851178e-01 -5.97851178e-01
 -5.97851178e-01  5.33344503e+00  5.33344503e+00  5.33344503e+00
  1.09352514e+02  6.14593537e+03]
E1 = -179.77078311833046  E_coul = 54.487987662822
cycle= 4 E= -125.282795455508  delta_E= -1.88e-08  |g|= 9.08e-07  |ddm|= 0.000119
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.12512e-06
diis-c [-1.50997281e-15  2.96084052e-06 -2.05246541e-03 -1.12123929e-02
  1.01326190e+00]
  HOMO = -0.597850778768556  LUMO = 5.33344566105833
  mo_energy =
[-3.18270709e+01 -1.77678115e+00 -5.97850779e-01 -5.97850779e-01
 -5.97850779e-01  5.33344566e+00  5.33344566e+00  5.33344566e+00
  1.09352515e+02  6.14593537e+03]
E1 = -179.77078210352326  E_coul = 54.4879866480148
cycle= 5 E= -125.282795455508  delta_E= -1.42e-14  |g|= 1.33e-09  |ddm|= 1.61e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -179.77078210352326  E_coul = 54.4879866480148
  HOMO = -0.597850779477367  LUMO = 5.33344565986138
  mo_energy =
[-3.18270709e+01 -1.77678115e+00 -5.97850779e-01 -5.97850779e-01
 -5.97850779e-01  5.33344566e+00  5.33344566e+00  5.33344566e+00
  1.09352515e+02  6.14593537e+03]
E1 = -179.77078210528202  E_coul = 54.48798664977344
Extra cycle  E= -125.282795455509  delta_E= -1.28e-13  |g|= 1.79e-10  |ddm|= 2.79e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.2588846307374935
E1 = -179.77078210528202  E_coul = 54.48798664977344
init E= -125.282795455509
    CPU time for initialize scf      0.04 sec, wall time      0.04 sec
  HOMO = -0.597850779368537  LUMO = 5.33344566003514
  mo_energy =
[-3.18270709e+01 -1.77678115e+00 -5.97850779e-01 -5.97850779e-01
 -5.97850779e-01  5.33344566e+00  5.33344566e+00  5.33344566e+00
  1.09352515e+02  6.14593537e+03]
E1 = -179.77078210499272  E_coul = 54.48798664948425
cycle= 1 E= -125.282795455508  delta_E= 1.14e-13  |g|= 2.96e-11  |ddm|= 4.62e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -179.77078210499272  E_coul = 54.48798664948425
  HOMO = -0.5978507793865  LUMO = 5.33344566000649
  mo_energy =
[-3.18270709e+01 -1.77678115e+00 -5.97850779e-01 -5.97850779e-01
 -5.97850779e-01  5.33344566e+00  5.33344566e+00  5.33344566e+00
  1.09352515e+02  6.14593537e+03]
E1 = -179.7707821050402  E_coul = 54.48798664953167
Extra cycle  E= -125.282795455509  delta_E= -5.68e-14  |g|= 4.85e-12  |ddm|= 7.59e-12
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [4.61715142e+03 1.30135988e+02 1.95224119e+01 9.62829673e-01
 5.27505325e+00 8.89438730e-01]
grad_E = [ 1.35949780e-04 -8.25608685e-06  1.04321102e-04  1.25709270e-03
 -4.08937183e-05  2.35152304e-04]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:27:42 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.14211794        1
[INPUT] 0    0    [1    /1   ]  130.134391522        1
[INPUT] 0    0    [1    /1   ]  19.5232693937        1
[INPUT] 0    0    [1    /1   ]  0.963064239015       1
[INPUT] 1    0    [1    /1   ]  5.27471484601        1
[INPUT] 1    0    [1    /1   ]  0.889408056523       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.142117936545, 1.0]], [0, [130.13439152223253, 1.0]], [0, [19.52326939374961, 1.0]], [0, [0.9630642390146521, 1.0]], [1, [5.274714846006225, 1.0]], [1, [0.8894080565228986, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.14211794]
bas 1, expnt(s) = [130.13439152]
bas 2, expnt(s) = [19.52326939]
bas 3, expnt(s) = [0.96306424]
bas 4, expnt(s) = [5.27471485]
bas 5, expnt(s) = [0.88940806]
CPU time:       121.26
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61714212e+03 1.41512550e+03 1.30134392e+02 9.73439777e+01
 1.95232694e+01 2.34654796e+01 9.63064239e-01 2.45615894e+00
 5.27471485e+00 2.33202459e+01 8.89408057e-01 2.51976893e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.818295925011522
cond(S) = 4.259233206259072
E1 = -177.97798386274113  E_coul = 54.32601499668617
init E= -123.651968866055
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.65415384150887  LUMO = 5.28534703340211
  mo_energy =
[-3.16951222e+01 -1.82262201e+00 -6.54153842e-01 -6.54153842e-01
 -6.54153842e-01  5.28534703e+00  5.28534703e+00  5.28534703e+00
  1.09462339e+02  6.14623459e+03]
E1 = -179.74433559141085  E_coul = 54.4615680342285
cycle= 1 E= -125.282767557182  delta_E= -1.63  |g|= 0.158  |ddm|= 0.279
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.268983
diis-c [-0.07235201  1.        ]
  HOMO = -0.599498253959049  LUMO = 5.33049523822825
  mo_energy =
[-3.18333118e+01 -1.77880958e+00 -5.99498254e-01 -5.99498254e-01
 -5.99498254e-01  5.33049524e+00  5.33049524e+00  5.33049524e+00
  1.09348752e+02  6.14591533e+03]
E1 = -179.77623109457744  E_coul = 54.49343563460163
cycle= 2 E= -125.282795459976  delta_E= -2.79e-05  |g|= 0.00334  |ddm|= 0.00516
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00417885
diis-c [-1.74504437e-05 -4.13786532e-04  1.00041379e+00]
  HOMO = -0.59749599606012  LUMO = 5.33368113699141
  mo_energy =
[-3.18257965e+01 -1.77638919e+00 -5.97495996e-01 -5.97495996e-01
 -5.97495996e-01  5.33368114e+00  5.33368114e+00  5.33368114e+00
  1.09356267e+02  6.14592242e+03]
E1 = -179.77096134724184  E_coul = 54.48816521462481
cycle= 3 E= -125.282796132617  delta_E= -6.73e-07  |g|= 0.000542  |ddm|= 0.000841
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000676797
diis-c [-1.50922110e-09 -2.40959126e-04  1.39042417e-01  8.61198542e-01]
  HOMO = -0.597777897022409  LUMO = 5.33323140397318
  mo_energy =
[-3.18268822e+01 -1.77672996e+00 -5.97777897e-01 -5.97777897e-01
 -5.97777897e-01  5.33323140e+00  5.33323140e+00  5.33323140e+00
  1.09355164e+02  6.14592120e+03]
E1 = -179.77170735100938  E_coul = 54.488911199633584
cycle= 4 E= -125.282796151376  delta_E= -1.88e-08  |g|= 9.07e-07  |ddm|= 0.000119
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.12331e-06
diis-c [-1.48116205e-15  2.96222297e-06 -2.05342132e-03 -1.12200699e-02
  1.01327053e+00]
  HOMO = -0.597777498617363  LUMO = 5.3332320289944
  mo_energy =
[-3.18268810e+01 -1.77672948e+00 -5.97777499e-01 -5.97777499e-01
 -5.97777499e-01  5.33323203e+00  5.33323203e+00  5.33323203e+00
  1.09355165e+02  6.14592120e+03]
E1 = -179.77170633871484  E_coul = 54.48891018733906
cycle= 5 E= -125.282796151376  delta_E= 2.84e-14  |g|= 1.32e-09  |ddm|= 1.61e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -179.77170633871484  E_coul = 54.48891018733906
  HOMO = -0.597777499321004  LUMO = 5.33323202780574
  mo_energy =
[-3.18268810e+01 -1.77672948e+00 -5.97777499e-01 -5.97777499e-01
 -5.97777499e-01  5.33323203e+00  5.33323203e+00  5.33323203e+00
  1.09355165e+02  6.14592120e+03]
E1 = -179.7717063404606  E_coul = 54.48891018908487
Extra cycle  E= -125.282796151376  delta_E= 2.84e-14  |g|= 1.78e-10  |ddm|= 2.77e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
exp = [4.61714212e+03 1.30134392e+02 1.95232694e+01 9.63064239e-01
 5.27471485e+00 8.89408057e-01]
E = -125.28279615137575
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:27:43 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.14211794        1
[INPUT] 0    0    [1    /1   ]  130.134391522        1
[INPUT] 0    0    [1    /1   ]  19.5232693937        1
[INPUT] 0    0    [1    /1   ]  0.963064239015       1
[INPUT] 1    0    [1    /1   ]  5.27471484601        1
[INPUT] 1    0    [1    /1   ]  0.889408056523       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.142117936545, 1.0]], [0, [130.13439152223253, 1.0]], [0, [19.52326939374961, 1.0]], [0, [0.9630642390146521, 1.0]], [1, [5.274714846006225, 1.0]], [1, [0.8894080565228986, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.14211794]
bas 1, expnt(s) = [130.13439152]
bas 2, expnt(s) = [19.52326939]
bas 3, expnt(s) = [0.96306424]
bas 4, expnt(s) = [5.27471485]
bas 5, expnt(s) = [0.88940806]
CPU time:       121.85
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61714212e+03 1.41512550e+03 1.30134392e+02 9.73439777e+01
 1.95232694e+01 2.34654796e+01 9.63064239e-01 2.45615894e+00
 5.27471485e+00 2.33202459e+01 8.89408057e-01 2.51976893e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.818295925011522
cond(S) = 4.259233206259072
E1 = -177.97798386274113  E_coul = 54.32601499668617
init E= -123.651968866055
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.65415384150887  LUMO = 5.28534703340211
  mo_energy =
[-3.16951222e+01 -1.82262201e+00 -6.54153842e-01 -6.54153842e-01
 -6.54153842e-01  5.28534703e+00  5.28534703e+00  5.28534703e+00
  1.09462339e+02  6.14623459e+03]
E1 = -179.74433559141085  E_coul = 54.4615680342285
cycle= 1 E= -125.282767557182  delta_E= -1.63  |g|= 0.158  |ddm|= 0.279
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.268983
diis-c [-0.07235201  1.        ]
  HOMO = -0.599498253959049  LUMO = 5.33049523822825
  mo_energy =
[-3.18333118e+01 -1.77880958e+00 -5.99498254e-01 -5.99498254e-01
 -5.99498254e-01  5.33049524e+00  5.33049524e+00  5.33049524e+00
  1.09348752e+02  6.14591533e+03]
E1 = -179.77623109457744  E_coul = 54.49343563460163
cycle= 2 E= -125.282795459976  delta_E= -2.79e-05  |g|= 0.00334  |ddm|= 0.00516
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00417885
diis-c [-1.74504437e-05 -4.13786532e-04  1.00041379e+00]
  HOMO = -0.59749599606012  LUMO = 5.33368113699141
  mo_energy =
[-3.18257965e+01 -1.77638919e+00 -5.97495996e-01 -5.97495996e-01
 -5.97495996e-01  5.33368114e+00  5.33368114e+00  5.33368114e+00
  1.09356267e+02  6.14592242e+03]
E1 = -179.77096134724184  E_coul = 54.48816521462481
cycle= 3 E= -125.282796132617  delta_E= -6.73e-07  |g|= 0.000542  |ddm|= 0.000841
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000676797
diis-c [-1.50922110e-09 -2.40959126e-04  1.39042417e-01  8.61198542e-01]
  HOMO = -0.597777897022409  LUMO = 5.33323140397318
  mo_energy =
[-3.18268822e+01 -1.77672996e+00 -5.97777897e-01 -5.97777897e-01
 -5.97777897e-01  5.33323140e+00  5.33323140e+00  5.33323140e+00
  1.09355164e+02  6.14592120e+03]
E1 = -179.77170735100938  E_coul = 54.488911199633584
cycle= 4 E= -125.282796151376  delta_E= -1.88e-08  |g|= 9.07e-07  |ddm|= 0.000119
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.12331e-06
diis-c [-1.48116205e-15  2.96222297e-06 -2.05342132e-03 -1.12200699e-02
  1.01327053e+00]
  HOMO = -0.597777498617363  LUMO = 5.3332320289944
  mo_energy =
[-3.18268810e+01 -1.77672948e+00 -5.97777499e-01 -5.97777499e-01
 -5.97777499e-01  5.33323203e+00  5.33323203e+00  5.33323203e+00
  1.09355165e+02  6.14592120e+03]
E1 = -179.77170633871484  E_coul = 54.48891018733906
cycle= 5 E= -125.282796151376  delta_E= 2.84e-14  |g|= 1.32e-09  |ddm|= 1.61e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -179.77170633871484  E_coul = 54.48891018733906
  HOMO = -0.597777499321004  LUMO = 5.33323202780574
  mo_energy =
[-3.18268810e+01 -1.77672948e+00 -5.97777499e-01 -5.97777499e-01
 -5.97777499e-01  5.33323203e+00  5.33323203e+00  5.33323203e+00
  1.09355165e+02  6.14592120e+03]
E1 = -179.7717063404606  E_coul = 54.48891018908487
Extra cycle  E= -125.282796151376  delta_E= 2.84e-14  |g|= 1.78e-10  |ddm|= 2.77e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.259233206259072
E1 = -179.7717063404606  E_coul = 54.48891018908487
init E= -125.282796151376
    CPU time for initialize scf      0.04 sec, wall time      0.04 sec
  HOMO = -0.597777499212975  LUMO = 5.33323202797823
  mo_energy =
[-3.18268810e+01 -1.77672948e+00 -5.97777499e-01 -5.97777499e-01
 -5.97777499e-01  5.33323203e+00  5.33323203e+00  5.33323203e+00
  1.09355165e+02  6.14592120e+03]
E1 = -179.77170634017355  E_coul = 54.48891018879778
cycle= 1 E= -125.282796151376  delta_E= -2.84e-14  |g|= 2.94e-11  |ddm|= 4.59e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -179.77170634017355  E_coul = 54.48891018879778
  HOMO = -0.597777499230801  LUMO = 5.33323202794979
  mo_energy =
[-3.18268810e+01 -1.77672948e+00 -5.97777499e-01 -5.97777499e-01
 -5.97777499e-01  5.33323203e+00  5.33323203e+00  5.33323203e+00
  1.09355165e+02  6.14592120e+03]
E1 = -179.77170634022065  E_coul = 54.488910188844926
Extra cycle  E= -125.282796151376  delta_E= 5.68e-14  |g|= 4.96e-12  |ddm|= 7.54e-12
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [4.61714212e+03 1.30134392e+02 1.95232694e+01 9.63064239e-01
 5.27471485e+00 8.89408057e-01]
grad_E = [ 1.35957156e-04 -1.61978233e-05  1.96263382e-04  2.23309982e-03
 -9.14736364e-05  5.23389767e-04]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:27:46 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.11684756        1
[INPUT] 0    0    [1    /1   ]  130.131777347        1
[INPUT] 0    0    [1    /1   ]  19.5246555834        1
[INPUT] 0    0    [1    /1   ]  0.96344337186        1
[INPUT] 1    0    [1    /1   ]  5.27416680313        1
[INPUT] 1    0    [1    /1   ]  0.889358655416       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.116847564363, 1.0]], [0, [130.1317773470378, 1.0]], [0, [19.524655583401632, 1.0]], [0, [0.9634433718603744, 1.0]], [1, [5.2741668031315045, 1.0]], [1, [0.8893586554163592, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.11684756]
bas 1, expnt(s) = [130.13177735]
bas 2, expnt(s) = [19.52465558]
bas 3, expnt(s) = [0.96344337]
bas 4, expnt(s) = [5.2741668]
bas 5, expnt(s) = [0.88935866]
CPU time:       124.76
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61711685e+03 1.41511969e+03 1.30131777e+02 9.73425111e+01
 1.95246556e+01 2.34667291e+01 9.63443372e-01 2.45688410e+00
 5.27416680e+00 2.33172172e+01 8.89358655e-01 2.51959398e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.818264239342948
cond(S) = 4.259798227330163
E1 = -177.97885270949607  E_coul = 54.327395545754435
init E= -123.651457163742
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.654043433683561  LUMO = 5.28498963717459
  mo_energy =
[-3.16948834e+01 -1.82250215e+00 -6.54043434e-01 -6.54043434e-01
 -6.54043434e-01  5.28498964e+00  5.28498964e+00  5.28498964e+00
  1.09466505e+02  6.14619718e+03]
E1 = -179.74587200888917  E_coul = 54.46310255485636
cycle= 1 E= -125.282769454033  delta_E= -1.63  |g|= 0.158  |ddm|= 0.279
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.269066
diis-c [-0.07239628  1.        ]
  HOMO = -0.599377042845986  LUMO = 5.33015435065155
  mo_energy =
[-3.18329957e+01 -1.77872295e+00 -5.99377043e-01 -5.99377043e-01
 -5.99377043e-01  5.33015435e+00  5.33015435e+00  5.33015435e+00
  1.09353020e+02  6.14587845e+03]
E1 = -179.7777219119685  E_coul = 54.49492462935053
cycle= 2 E= -125.282797282618  delta_E= -2.78e-05  |g|= 0.00333  |ddm|= 0.00516
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00417259
diis-c [-1.73978497e-05 -4.17808890e-04  1.00041781e+00]
  HOMO = -0.597377755124821  LUMO = 5.33333539572813
  mo_energy =
[-3.18254912e+01 -1.77630561e+00 -5.97377755e-01 -5.97377755e-01
 -5.97377755e-01  5.33333540e+00  5.33333540e+00  5.33333540e+00
  1.09360524e+02  6.14588553e+03]
E1 = -179.77245943946818  E_coul = 54.489661486139596
cycle= 3 E= -125.282797953329  delta_E= -6.71e-07  |g|= 0.000541  |ddm|= 0.00084
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000675828
diis-c [-1.51323918e-09 -2.40988571e-04  1.39051447e-01  8.61189542e-01]
  HOMO = -0.597659263928634  LUMO = 5.33288631054017
  mo_energy =
[-3.18265754e+01 -1.77664598e+00 -5.97659264e-01 -5.97659264e-01
 -5.97659264e-01  5.33288631e+00  5.33288631e+00  5.33288631e+00
  1.09359422e+02  6.14588431e+03]
E1 = -179.77320444071773  E_coul = 54.49040646868231
cycle= 4 E= -125.282797972035  delta_E= -1.87e-08  |g|= 9.04e-07  |ddm|= 0.000119
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.12038e-06
diis-c [-1.45239911e-15  2.96445236e-06 -2.05495289e-03 -1.12323552e-02
  1.01328434e+00]
  HOMO = -0.597658867236645  LUMO = 5.33288693283195
  mo_energy =
[-3.18265741e+01 -1.77664551e+00 -5.97658867e-01 -5.97658867e-01
 -5.97658867e-01  5.33288693e+00  5.33288693e+00  5.33288693e+00
  1.09359423e+02  6.14588431e+03]
E1 = -179.77320343247723  E_coul = 54.49040546044179
cycle= 5 E= -125.282797972035  delta_E= -1.42e-14  |g|= 1.3e-09  |ddm|= 1.6e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -179.77320343247723  E_coul = 54.49040546044179
  HOMO = -0.59765886793185  LUMO = 5.3328869316568
  mo_energy =
[-3.18265741e+01 -1.77664551e+00 -5.97658868e-01 -5.97658868e-01
 -5.97658868e-01  5.33288693e+00  5.33288693e+00  5.33288693e+00
  1.09359423e+02  6.14588431e+03]
E1 = -179.77320343420214  E_coul = 54.4904054621667
Extra cycle  E= -125.282797972035  delta_E=    0  |g|= 1.76e-10  |ddm|= 2.74e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
exp = [4.61711685e+03 1.30131777e+02 1.95246556e+01 9.63443372e-01
 5.27416680e+00 8.89358655e-01]
E = -125.28279797203544
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:27:46 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.11684756        1
[INPUT] 0    0    [1    /1   ]  130.131777347        1
[INPUT] 0    0    [1    /1   ]  19.5246555834        1
[INPUT] 0    0    [1    /1   ]  0.96344337186        1
[INPUT] 1    0    [1    /1   ]  5.27416680313        1
[INPUT] 1    0    [1    /1   ]  0.889358655416       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.116847564363, 1.0]], [0, [130.1317773470378, 1.0]], [0, [19.524655583401632, 1.0]], [0, [0.9634433718603744, 1.0]], [1, [5.2741668031315045, 1.0]], [1, [0.8893586554163592, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.11684756]
bas 1, expnt(s) = [130.13177735]
bas 2, expnt(s) = [19.52465558]
bas 3, expnt(s) = [0.96344337]
bas 4, expnt(s) = [5.2741668]
bas 5, expnt(s) = [0.88935866]
CPU time:       125.37
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61711685e+03 1.41511969e+03 1.30131777e+02 9.73425111e+01
 1.95246556e+01 2.34667291e+01 9.63443372e-01 2.45688410e+00
 5.27416680e+00 2.33172172e+01 8.89358655e-01 2.51959398e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.818264239342948
cond(S) = 4.259798227330163
E1 = -177.97885270949607  E_coul = 54.327395545754435
init E= -123.651457163742
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.654043433683561  LUMO = 5.28498963717459
  mo_energy =
[-3.16948834e+01 -1.82250215e+00 -6.54043434e-01 -6.54043434e-01
 -6.54043434e-01  5.28498964e+00  5.28498964e+00  5.28498964e+00
  1.09466505e+02  6.14619718e+03]
E1 = -179.74587200888917  E_coul = 54.46310255485636
cycle= 1 E= -125.282769454033  delta_E= -1.63  |g|= 0.158  |ddm|= 0.279
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.269066
diis-c [-0.07239628  1.        ]
  HOMO = -0.599377042845986  LUMO = 5.33015435065155
  mo_energy =
[-3.18329957e+01 -1.77872295e+00 -5.99377043e-01 -5.99377043e-01
 -5.99377043e-01  5.33015435e+00  5.33015435e+00  5.33015435e+00
  1.09353020e+02  6.14587845e+03]
E1 = -179.7777219119685  E_coul = 54.49492462935053
cycle= 2 E= -125.282797282618  delta_E= -2.78e-05  |g|= 0.00333  |ddm|= 0.00516
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00417259
diis-c [-1.73978497e-05 -4.17808890e-04  1.00041781e+00]
  HOMO = -0.597377755124821  LUMO = 5.33333539572813
  mo_energy =
[-3.18254912e+01 -1.77630561e+00 -5.97377755e-01 -5.97377755e-01
 -5.97377755e-01  5.33333540e+00  5.33333540e+00  5.33333540e+00
  1.09360524e+02  6.14588553e+03]
E1 = -179.77245943946818  E_coul = 54.489661486139596
cycle= 3 E= -125.282797953329  delta_E= -6.71e-07  |g|= 0.000541  |ddm|= 0.00084
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000675828
diis-c [-1.51323918e-09 -2.40988571e-04  1.39051447e-01  8.61189542e-01]
  HOMO = -0.597659263928634  LUMO = 5.33288631054017
  mo_energy =
[-3.18265754e+01 -1.77664598e+00 -5.97659264e-01 -5.97659264e-01
 -5.97659264e-01  5.33288631e+00  5.33288631e+00  5.33288631e+00
  1.09359422e+02  6.14588431e+03]
E1 = -179.77320444071773  E_coul = 54.49040646868231
cycle= 4 E= -125.282797972035  delta_E= -1.87e-08  |g|= 9.04e-07  |ddm|= 0.000119
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.12038e-06
diis-c [-1.45239911e-15  2.96445236e-06 -2.05495289e-03 -1.12323552e-02
  1.01328434e+00]
  HOMO = -0.597658867236645  LUMO = 5.33288693283195
  mo_energy =
[-3.18265741e+01 -1.77664551e+00 -5.97658867e-01 -5.97658867e-01
 -5.97658867e-01  5.33288693e+00  5.33288693e+00  5.33288693e+00
  1.09359423e+02  6.14588431e+03]
E1 = -179.77320343247723  E_coul = 54.49040546044179
cycle= 5 E= -125.282797972035  delta_E= -1.42e-14  |g|= 1.3e-09  |ddm|= 1.6e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -179.77320343247723  E_coul = 54.49040546044179
  HOMO = -0.59765886793185  LUMO = 5.3328869316568
  mo_energy =
[-3.18265741e+01 -1.77664551e+00 -5.97658868e-01 -5.97658868e-01
 -5.97658868e-01  5.33288693e+00  5.33288693e+00  5.33288693e+00
  1.09359423e+02  6.14588431e+03]
E1 = -179.77320343420214  E_coul = 54.4904054621667
Extra cycle  E= -125.282797972035  delta_E=    0  |g|= 1.76e-10  |ddm|= 2.74e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.259798227330163
E1 = -179.77320343420214  E_coul = 54.4904054621667
init E= -125.282797972035
    CPU time for initialize scf      0.04 sec, wall time      0.04 sec
  HOMO = -0.597658867825117  LUMO = 5.3328869318272
  mo_energy =
[-3.18265741e+01 -1.77664551e+00 -5.97658868e-01 -5.97658868e-01
 -5.97658868e-01  5.33288693e+00  5.33288693e+00  5.33288693e+00
  1.09359423e+02  6.14588431e+03]
E1 = -179.77320343391852  E_coul = 54.49040546188309
cycle= 1 E= -125.282797972035  delta_E=    0  |g|= 2.91e-11  |ddm|= 4.54e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -179.77320343391852  E_coul = 54.49040546188309
  HOMO = -0.597658867842728  LUMO = 5.33288693179911
  mo_energy =
[-3.18265741e+01 -1.77664551e+00 -5.97658868e-01 -5.97658868e-01
 -5.97658868e-01  5.33288693e+00  5.33288693e+00  5.33288693e+00
  1.09359423e+02  6.14588431e+03]
E1 = -179.773203433965  E_coul = 54.49040546192959
Extra cycle  E= -125.282797972035  delta_E= 2.84e-14  |g|= 4.86e-12  |ddm|= 7.44e-12
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [4.61711685e+03 1.30131777e+02 1.95246556e+01 9.63443372e-01
 5.27416680e+00 8.89358655e-01]
grad_E = [ 1.35969602e-04 -2.90578962e-05  3.45095372e-04  3.80998541e-03
 -1.73755188e-04  9.92937522e-04]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:27:49 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.04916247        1
[INPUT] 0    0    [1    /1   ]  130.127500443        1
[INPUT] 0    0    [1    /1   ]  19.5268971283        1
[INPUT] 0    0    [1    /1   ]  0.964057080709       1
[INPUT] 1    0    [1    /1   ]  5.2732797768         1
[INPUT] 1    0    [1    /1   ]  0.889278794871       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.049162472917, 1.0]], [0, [130.12750044305318, 1.0]], [0, [19.526897128347937, 1.0]], [0, [0.9640570807086215, 1.0]], [1, [5.273279776798481, 1.0]], [1, [0.8892787948713643, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.04916247]
bas 1, expnt(s) = [130.12750044]
bas 2, expnt(s) = [19.52689713]
bas 3, expnt(s) = [0.96405708]
bas 4, expnt(s) = [5.27327978]
bas 5, expnt(s) = [0.88927879]
CPU time:       128.27
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61704916e+03 1.41510413e+03 1.30127500e+02 9.73401116e+01
 1.95268971e+01 2.34687497e+01 9.64057081e-01 2.45805777e+00
 5.27327978e+00 2.33123154e+01 8.89278795e-01 2.51931118e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.818212564909064
cond(S) = 4.260715645213453
E1 = -177.9802594374847  E_coul = 54.32962550064022
init E= -123.650633936844
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.653865163874478  LUMO = 5.28441094436081
  mo_energy =
[-3.16944992e+01 -1.82230773e+00 -6.53865164e-01 -6.53865164e-01
 -6.53865164e-01  5.28441094e+00  5.28441094e+00  5.28441094e+00
  1.09473202e+02  6.14610011e+03]
E1 = -179.74836147344334  E_coul = 54.46558712835363
cycle= 1 E= -125.28277434509  delta_E= -1.63  |g|= 0.158  |ddm|= 0.279
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.269199
diis-c [-0.07246784  1.        ]
  HOMO = -0.599180831547378  LUMO = 5.32960296750024
  mo_energy =
[-3.18324854e+01 -1.77858199e+00 -5.99180832e-01 -5.99180832e-01
 -5.99180832e-01  5.32960297e+00  5.32960297e+00  5.32960297e+00
  1.09359884e+02  6.14578223e+03]
E1 = -179.78013677879764  E_coul = 54.497334725993944
cycle= 2 E= -125.282802052804  delta_E= -2.77e-05  |g|= 0.00332  |ddm|= 0.00514
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00416234
diis-c [-1.73120625e-05 -4.24381341e-04  1.00042438e+00]
  HOMO = -0.597186400157511  LUMO = 5.3327760794166
  mo_energy =
[-3.18249985e+01 -1.77616964e+00 -5.97186400e-01 -5.97186400e-01
 -5.97186400e-01  5.33277608e+00  5.33277608e+00  5.33277608e+00
  1.09367370e+02  6.14578929e+03]
E1 = -179.77488621238413  E_coul = 54.492083492022026
cycle= 3 E= -125.282802720362  delta_E= -6.68e-07  |g|= 0.00054  |ddm|= 0.000838
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000674242
diis-c [-1.51982442e-09 -2.41037774e-04  1.39066056e-01  8.61174982e-01]
  HOMO = -0.597467267351785  LUMO = 5.33232805364277
  mo_energy =
[-3.18260801e+01 -1.77650938e+00 -5.97467267e-01 -5.97467267e-01
 -5.97467267e-01  5.33232805e+00  5.33232805e+00  5.33232805e+00
  1.09366271e+02  6.14578808e+03]
E1 = -179.77562957245394  E_coul = 54.49282683346982
cycle= 4 E= -125.282802738984  delta_E= -1.86e-08  |g|= 9e-07  |ddm|= 0.000119
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.11569e-06
diis-c [-1.38188282e-15  2.96798956e-06 -2.05739151e-03 -1.12519411e-02
  1.01330636e+00]
  HOMO = -0.597466873424627  LUMO = 5.33232867152978
  mo_energy =
[-3.18260789e+01 -1.77650890e+00 -5.97466873e-01 -5.97466873e-01
 -5.97466873e-01  5.33232867e+00  5.33232867e+00  5.33232867e+00
  1.09366272e+02  6.14578808e+03]
E1 = -179.7756285707541  E_coul = 54.49282583177003
cycle= 5 E= -125.282802738984  delta_E= 5.68e-14  |g|= 1.27e-09  |ddm|= 1.59e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -179.7756285707541  E_coul = 54.49282583177003
  HOMO = -0.597466874105971  LUMO = 5.33232867037683
  mo_energy =
[-3.18260789e+01 -1.77650891e+00 -5.97466874e-01 -5.97466874e-01
 -5.97466874e-01  5.33232867e+00  5.33232867e+00  5.33232867e+00
  1.09366272e+02  6.14578808e+03]
E1 = -179.77562857244482  E_coul = 54.492825833460714
Extra cycle  E= -125.282802738984  delta_E= -4.26e-14  |g|= 1.72e-10  |ddm|= 2.69e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
exp = [4.61704916e+03 1.30127500e+02 1.95268971e+01 9.64057081e-01
 5.27327978e+00 8.89278795e-01]
E = -125.2828027389841
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:27:50 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4617.04916247        1
[INPUT] 0    0    [1    /1   ]  130.127500443        1
[INPUT] 0    0    [1    /1   ]  19.5268971283        1
[INPUT] 0    0    [1    /1   ]  0.964057080709       1
[INPUT] 1    0    [1    /1   ]  5.2732797768         1
[INPUT] 1    0    [1    /1   ]  0.889278794871       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4617.049162472917, 1.0]], [0, [130.12750044305318, 1.0]], [0, [19.526897128347937, 1.0]], [0, [0.9640570807086215, 1.0]], [1, [5.273279776798481, 1.0]], [1, [0.8892787948713643, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4617.04916247]
bas 1, expnt(s) = [130.12750044]
bas 2, expnt(s) = [19.52689713]
bas 3, expnt(s) = [0.96405708]
bas 4, expnt(s) = [5.27327978]
bas 5, expnt(s) = [0.88927879]
CPU time:       128.87
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61704916e+03 1.41510413e+03 1.30127500e+02 9.73401116e+01
 1.95268971e+01 2.34687497e+01 9.64057081e-01 2.45805777e+00
 5.27327978e+00 2.33123154e+01 8.89278795e-01 2.51931118e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.818212564909064
cond(S) = 4.260715645213453
E1 = -177.9802594374847  E_coul = 54.32962550064022
init E= -123.650633936844
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.653865163874478  LUMO = 5.28441094436081
  mo_energy =
[-3.16944992e+01 -1.82230773e+00 -6.53865164e-01 -6.53865164e-01
 -6.53865164e-01  5.28441094e+00  5.28441094e+00  5.28441094e+00
  1.09473202e+02  6.14610011e+03]
E1 = -179.74836147344334  E_coul = 54.46558712835363
cycle= 1 E= -125.28277434509  delta_E= -1.63  |g|= 0.158  |ddm|= 0.279
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.269199
diis-c [-0.07246784  1.        ]
  HOMO = -0.599180831547378  LUMO = 5.32960296750024
  mo_energy =
[-3.18324854e+01 -1.77858199e+00 -5.99180832e-01 -5.99180832e-01
 -5.99180832e-01  5.32960297e+00  5.32960297e+00  5.32960297e+00
  1.09359884e+02  6.14578223e+03]
E1 = -179.78013677879764  E_coul = 54.497334725993944
cycle= 2 E= -125.282802052804  delta_E= -2.77e-05  |g|= 0.00332  |ddm|= 0.00514
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00416234
diis-c [-1.73120625e-05 -4.24381341e-04  1.00042438e+00]
  HOMO = -0.597186400157511  LUMO = 5.3327760794166
  mo_energy =
[-3.18249985e+01 -1.77616964e+00 -5.97186400e-01 -5.97186400e-01
 -5.97186400e-01  5.33277608e+00  5.33277608e+00  5.33277608e+00
  1.09367370e+02  6.14578929e+03]
E1 = -179.77488621238413  E_coul = 54.492083492022026
cycle= 3 E= -125.282802720362  delta_E= -6.68e-07  |g|= 0.00054  |ddm|= 0.000838
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000674242
diis-c [-1.51982442e-09 -2.41037774e-04  1.39066056e-01  8.61174982e-01]
  HOMO = -0.597467267351785  LUMO = 5.33232805364277
  mo_energy =
[-3.18260801e+01 -1.77650938e+00 -5.97467267e-01 -5.97467267e-01
 -5.97467267e-01  5.33232805e+00  5.33232805e+00  5.33232805e+00
  1.09366271e+02  6.14578808e+03]
E1 = -179.77562957245394  E_coul = 54.49282683346982
cycle= 4 E= -125.282802738984  delta_E= -1.86e-08  |g|= 9e-07  |ddm|= 0.000119
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.11569e-06
diis-c [-1.38188282e-15  2.96798956e-06 -2.05739151e-03 -1.12519411e-02
  1.01330636e+00]
  HOMO = -0.597466873424627  LUMO = 5.33232867152978
  mo_energy =
[-3.18260789e+01 -1.77650890e+00 -5.97466873e-01 -5.97466873e-01
 -5.97466873e-01  5.33232867e+00  5.33232867e+00  5.33232867e+00
  1.09366272e+02  6.14578808e+03]
E1 = -179.7756285707541  E_coul = 54.49282583177003
cycle= 5 E= -125.282802738984  delta_E= 5.68e-14  |g|= 1.27e-09  |ddm|= 1.59e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -179.7756285707541  E_coul = 54.49282583177003
  HOMO = -0.597466874105971  LUMO = 5.33232867037683
  mo_energy =
[-3.18260789e+01 -1.77650891e+00 -5.97466874e-01 -5.97466874e-01
 -5.97466874e-01  5.33232867e+00  5.33232867e+00  5.33232867e+00
  1.09366272e+02  6.14578808e+03]
E1 = -179.77562857244482  E_coul = 54.492825833460714
Extra cycle  E= -125.282802738984  delta_E= -4.26e-14  |g|= 1.72e-10  |ddm|= 2.69e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.260715645213453
E1 = -179.77562857244482  E_coul = 54.492825833460714
init E= -125.282802738984
    CPU time for initialize scf      0.04 sec, wall time      0.04 sec
  HOMO = -0.597466874001361  LUMO = 5.33232867054383
  mo_energy =
[-3.18260789e+01 -1.77650891e+00 -5.97466874e-01 -5.97466874e-01
 -5.97466874e-01  5.33232867e+00  5.33232867e+00  5.33232867e+00
  1.09366272e+02  6.14578808e+03]
E1 = -179.77562857216674  E_coul = 54.49282583318266
cycle= 1 E= -125.282802738984  delta_E= 1.42e-14  |g|= 2.86e-11  |ddm|= 4.45e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -179.77562857216674  E_coul = 54.49282583318266
  HOMO = -0.597466874018625  LUMO = 5.3323286705163
  mo_energy =
[-3.18260789e+01 -1.77650891e+00 -5.97466874e-01 -5.97466874e-01
 -5.97466874e-01  5.33232867e+00  5.33232867e+00  5.33232867e+00
  1.09366272e+02  6.14578808e+03]
E1 = -179.77562857221247  E_coul = 54.492825833228345
Extra cycle  E= -125.282802738984  delta_E= -2.84e-14  |g|= 4.71e-12  |ddm|= 7.3e-12
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [4.61704916e+03 1.30127500e+02 1.95268971e+01 9.64057081e-01
 5.27327978e+00 8.89278795e-01]
grad_E = [ 1.35991062e-04 -4.98722358e-05  5.85961915e-04  6.36065585e-03
 -3.07094245e-04  1.75413598e-03]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:27:53 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4616.86953222        1
[INPUT] 0    0    [1    /1   ]  130.120475736        1
[INPUT] 0    0    [1    /1   ]  19.530518763         1
[INPUT] 0    0    [1    /1   ]  0.965050647139       1
[INPUT] 1    0    [1    /1   ]  5.27184525459        1
[INPUT] 1    0    [1    /1   ]  0.889149623313       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4616.869532216638, 1.0]], [0, [130.12047573625082, 1.0]], [0, [19.5305187629888, 1.0]], [0, [0.9650506471393216, 1.0]], [1, [5.271845254585633, 1.0]], [1, [0.8891496233131824, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4616.86953222]
bas 1, expnt(s) = [130.12047574]
bas 2, expnt(s) = [19.53051876]
bas 3, expnt(s) = [0.96505065]
bas 4, expnt(s) = [5.27184525]
bas 5, expnt(s) = [0.88914962]
CPU time:       131.75
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61686953e+03 1.41506284e+03 1.30120476e+02 9.73361706e+01
 1.95305188e+01 2.34720142e+01 9.65050647e-01 2.45995750e+00
 5.27184525e+00 2.33043884e+01 8.89149623e-01 2.51885376e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.818127967814615
cond(S) = 4.262207634578512
E1 = -177.98253878060905  E_coul = 54.33322317634073
init E= -123.649315604268
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.653577775649404  LUMO = 5.28347383355966
  mo_energy =
[-3.16938832e+01 -1.82199195e+00 -6.53577776e-01 -6.53577776e-01
 -6.53577776e-01  5.28347383e+00  5.28347383e+00  5.28347383e+00
  1.09483934e+02  6.14584748e+03]
E1 = -179.7523947462453  E_coul = 54.46960772205525
cycle= 1 E= -125.28278702419  delta_E= -1.63  |g|= 0.158  |ddm|= 0.279
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.269413
diis-c [-0.0725834  1.       ]
  HOMO = -0.598863424033703  LUMO = 5.3287112622086
  mo_energy =
[-3.18316634e+01 -1.77835216e+00 -5.98863424e-01 -5.98863424e-01
 -5.98863424e-01  5.32871126e+00  5.32871126e+00  5.32871126e+00
  1.09370889e+02  6.14553097e+03]
E1 = -179.78404779987477  E_coul = 54.50123326470293
cycle= 2 E= -125.282814535172  delta_E= -2.75e-05  |g|= 0.00331  |ddm|= 0.00512
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00414558
diis-c [-1.71721066e-05 -4.35129663e-04  1.00043513e+00]
  HOMO = -0.596876946364293  LUMO = 5.33187138788337
  mo_energy =
[-3.18242053e+01 -1.77594801e+00 -5.96876946e-01 -5.96876946e-01
 -5.96876946e-01  5.33187139e+00  5.33187139e+00  5.33187139e+00
  1.09378345e+02  6.14553802e+03]
E1 = -179.7788167546952  E_coul = 54.49600155711331
cycle= 3 E= -125.282815197582  delta_E= -6.62e-07  |g|= 0.000538  |ddm|= 0.000835
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000671645
diis-c [-1.53071279e-09 -2.41121810e-04  1.39089693e-01  8.61151429e-01]
  HOMO = -0.597156761934076  LUMO = 5.33142509738675
  mo_energy =
[-3.18252828e+01 -1.77628670e+00 -5.97156762e-01 -5.97156762e-01
 -5.97156762e-01  5.33142510e+00  5.33142510e+00  5.33142510e+00
  1.09377250e+02  6.14553681e+03]
E1 = -179.7795574229983  E_coul = 54.49674220693303
cycle= 4 E= -125.282815216065  delta_E= -1.85e-08  |g|= 8.93e-07  |ddm|= 0.000118
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.10819e-06
diis-c [-1.29232936e-15  2.97361475e-06 -2.06124472e-03 -1.12829576e-02
  1.01334123e+00]
  HOMO = -0.597156372460913  LUMO = 5.33142570817945
  mo_energy =
[-3.18252816e+01 -1.77628623e+00 -5.97156372e-01 -5.97156372e-01
 -5.97156372e-01  5.33142571e+00  5.33142571e+00  5.33142571e+00
  1.09377251e+02  6.14553680e+03]
E1 = -179.77955643182855  E_coul = 54.49674121576338
cycle= 5 E= -125.282815216065  delta_E= 9.95e-14  |g|= 1.23e-09  |ddm|= 1.57e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -179.77955643182855  E_coul = 54.49674121576338
  HOMO = -0.597156373119299  LUMO = 5.33142570706325
  mo_energy =
[-3.18252816e+01 -1.77628623e+00 -5.97156373e-01 -5.97156373e-01
 -5.97156373e-01  5.33142571e+00  5.33142571e+00  5.33142571e+00
  1.09377251e+02  6.14553680e+03]
E1 = -179.7795564334623  E_coul = 54.496741217397265
Extra cycle  E= -125.282815216065  delta_E= 1.56e-13  |g|= 1.67e-10  |ddm|= 2.6e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [4.61686953e+03 1.30120476e+02 1.95305188e+01 9.65050647e-01
 5.27184525e+00 8.89149623e-01]
E = -125.28281521606502
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:27:53 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4616.86953222        1
[INPUT] 0    0    [1    /1   ]  130.120475736        1
[INPUT] 0    0    [1    /1   ]  19.530518763         1
[INPUT] 0    0    [1    /1   ]  0.965050647139       1
[INPUT] 1    0    [1    /1   ]  5.27184525459        1
[INPUT] 1    0    [1    /1   ]  0.889149623313       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4616.869532216638, 1.0]], [0, [130.12047573625082, 1.0]], [0, [19.5305187629888, 1.0]], [0, [0.9650506471393216, 1.0]], [1, [5.271845254585633, 1.0]], [1, [0.8891496233131824, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4616.86953222]
bas 1, expnt(s) = [130.12047574]
bas 2, expnt(s) = [19.53051876]
bas 3, expnt(s) = [0.96505065]
bas 4, expnt(s) = [5.27184525]
bas 5, expnt(s) = [0.88914962]
CPU time:       132.38
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61686953e+03 1.41506284e+03 1.30120476e+02 9.73361706e+01
 1.95305188e+01 2.34720142e+01 9.65050647e-01 2.45995750e+00
 5.27184525e+00 2.33043884e+01 8.89149623e-01 2.51885376e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.818127967814615
cond(S) = 4.262207634578512
E1 = -177.98253878060905  E_coul = 54.33322317634073
init E= -123.649315604268
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.653577775649404  LUMO = 5.28347383355966
  mo_energy =
[-3.16938832e+01 -1.82199195e+00 -6.53577776e-01 -6.53577776e-01
 -6.53577776e-01  5.28347383e+00  5.28347383e+00  5.28347383e+00
  1.09483934e+02  6.14584748e+03]
E1 = -179.7523947462453  E_coul = 54.46960772205525
cycle= 1 E= -125.28278702419  delta_E= -1.63  |g|= 0.158  |ddm|= 0.279
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.269413
diis-c [-0.0725834  1.       ]
  HOMO = -0.598863424033703  LUMO = 5.3287112622086
  mo_energy =
[-3.18316634e+01 -1.77835216e+00 -5.98863424e-01 -5.98863424e-01
 -5.98863424e-01  5.32871126e+00  5.32871126e+00  5.32871126e+00
  1.09370889e+02  6.14553097e+03]
E1 = -179.78404779987477  E_coul = 54.50123326470293
cycle= 2 E= -125.282814535172  delta_E= -2.75e-05  |g|= 0.00331  |ddm|= 0.00512
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00414558
diis-c [-1.71721066e-05 -4.35129663e-04  1.00043513e+00]
  HOMO = -0.596876946364293  LUMO = 5.33187138788337
  mo_energy =
[-3.18242053e+01 -1.77594801e+00 -5.96876946e-01 -5.96876946e-01
 -5.96876946e-01  5.33187139e+00  5.33187139e+00  5.33187139e+00
  1.09378345e+02  6.14553802e+03]
E1 = -179.7788167546952  E_coul = 54.49600155711331
cycle= 3 E= -125.282815197582  delta_E= -6.62e-07  |g|= 0.000538  |ddm|= 0.000835
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000671645
diis-c [-1.53071279e-09 -2.41121810e-04  1.39089693e-01  8.61151429e-01]
  HOMO = -0.597156761934076  LUMO = 5.33142509738675
  mo_energy =
[-3.18252828e+01 -1.77628670e+00 -5.97156762e-01 -5.97156762e-01
 -5.97156762e-01  5.33142510e+00  5.33142510e+00  5.33142510e+00
  1.09377250e+02  6.14553681e+03]
E1 = -179.7795574229983  E_coul = 54.49674220693303
cycle= 4 E= -125.282815216065  delta_E= -1.85e-08  |g|= 8.93e-07  |ddm|= 0.000118
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.10819e-06
diis-c [-1.29232936e-15  2.97361475e-06 -2.06124472e-03 -1.12829576e-02
  1.01334123e+00]
  HOMO = -0.597156372460913  LUMO = 5.33142570817945
  mo_energy =
[-3.18252816e+01 -1.77628623e+00 -5.97156372e-01 -5.97156372e-01
 -5.97156372e-01  5.33142571e+00  5.33142571e+00  5.33142571e+00
  1.09377251e+02  6.14553680e+03]
E1 = -179.77955643182855  E_coul = 54.49674121576338
cycle= 5 E= -125.282815216065  delta_E= 9.95e-14  |g|= 1.23e-09  |ddm|= 1.57e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -179.77955643182855  E_coul = 54.49674121576338
  HOMO = -0.597156373119299  LUMO = 5.33142570706325
  mo_energy =
[-3.18252816e+01 -1.77628623e+00 -5.97156373e-01 -5.97156373e-01
 -5.97156373e-01  5.33142571e+00  5.33142571e+00  5.33142571e+00
  1.09377251e+02  6.14553680e+03]
E1 = -179.7795564334623  E_coul = 54.496741217397265
Extra cycle  E= -125.282815216065  delta_E= 1.56e-13  |g|= 1.67e-10  |ddm|= 2.6e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.262207634578512
E1 = -179.7795564334623  E_coul = 54.496741217397265
init E= -125.282815216065
    CPU time for initialize scf      0.04 sec, wall time      0.04 sec
  HOMO = -0.597156373018219  LUMO = 5.3314257072246
  mo_energy =
[-3.18252816e+01 -1.77628623e+00 -5.97156373e-01 -5.97156373e-01
 -5.97156373e-01  5.33142571e+00  5.33142571e+00  5.33142571e+00
  1.09377251e+02  6.14553680e+03]
E1 = -179.7795564331938  E_coul = 54.496741217128594
cycle= 1 E= -125.282815216065  delta_E= -1.71e-13  |g|= 2.76e-11  |ddm|= 4.3e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -179.7795564331938  E_coul = 54.496741217128594
  HOMO = -0.597156373034902  LUMO = 5.331425707198
  mo_energy =
[-3.18252816e+01 -1.77628623e+00 -5.97156373e-01 -5.97156373e-01
 -5.97156373e-01  5.33142571e+00  5.33142571e+00  5.33142571e+00
  1.09377251e+02  6.14553680e+03]
E1 = -179.77955643323776  E_coul = 54.49674121717266
Extra cycle  E= -125.282815216065  delta_E= 8.53e-14  |g|= 4.56e-12  |ddm|= 7.05e-12
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
exp = [4.61686953e+03 1.30120476e+02 1.95305188e+01 9.65050647e-01
 5.27184525e+00 8.89149623e-01]
grad_E = [ 1.36029218e-04 -8.35349696e-05  9.75502059e-04  1.04851310e-02
 -5.22812579e-04  2.98574219e-03]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:27:56 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4616.3953014         1
[INPUT] 0    0    [1    /1   ]  130.108840358        1
[INPUT] 0    0    [1    /1   ]  19.5363663131        1
[INPUT] 0    0    [1    /1   ]  0.966660282979       1
[INPUT] 1    0    [1    /1   ]  5.26952580601        1
[INPUT] 1    0    [1    /1   ]  0.888940599475       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4616.395301399051, 1.0]], [0, [130.10884035780697, 1.0]], [0, [19.536366313092593, 1.0]], [0, [0.9666602829793428, 1.0]], [1, [5.269525806012611, 1.0]], [1, [0.8889405994750567, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4616.3953014]
bas 1, expnt(s) = [130.10884036]
bas 2, expnt(s) = [19.53636631]
bas 3, expnt(s) = [0.96666028]
bas 4, expnt(s) = [5.26952581]
bas 5, expnt(s) = [0.8889406]
CPU time:       135.36
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61639530e+03 1.41495382e+03 1.30108840e+02 9.73296426e+01
 1.95363663e+01 2.34772847e+01 9.66660283e-01 2.46303413e+00
 5.26952581e+00 2.32915726e+01 8.88940599e-01 2.51811361e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.81798849123895
cond(S) = 4.264642093087603
E1 = -177.98623701867194  E_coul = 54.33901882631487
init E= -123.647218192357
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.653115409502382  LUMO = 5.28195513248142
  mo_energy =
[-3.16929009e+01 -1.82147771e+00 -6.53115410e-01 -6.53115410e-01
 -6.53115410e-01  5.28195513e+00  5.28195513e+00  5.28195513e+00
  1.09501036e+02  6.14518851e+03]
E1 = -179.7589350705977  E_coul = 54.47611505693449
cycle= 1 E= -125.282820013663  delta_E= -1.64  |g|= 0.158  |ddm|= 0.28
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.269759
diis-c [-0.07276979  1.        ]
  HOMO = -0.598349973694435  LUMO = 5.32726909076068
  mo_energy =
[-3.18303428e+01 -1.77797569e+00 -5.98349974e-01 -5.98349974e-01
 -5.98349974e-01  5.32726909e+00  5.32726909e+00  5.32726909e+00
  1.09388437e+02  6.14487424e+03]
E1 = -179.79038643600964  E_coul = 54.507539232357516
cycle= 2 E= -125.282847203652  delta_E= -2.72e-05  |g|= 0.00329  |ddm|= 0.00509
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00411798
diis-c [-1.69428884e-05 -4.52798367e-04  1.00045280e+00]
  HOMO = -0.596376606000671  LUMO = 5.33040782879354
  mo_energy =
[-3.18229323e+01 -1.77558512e+00 -5.96376606e-01 -5.96376606e-01
 -5.96376606e-01  5.33040783e+00  5.33040783e+00  5.33040783e+00
  1.09395845e+02  6.14488124e+03]
E1 = -179.7851876193266  E_coul = 54.502339761711085
cycle= 3 E= -125.282847857616  delta_E= -6.54e-07  |g|= 0.000534  |ddm|= 0.00083
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000667363
diis-c [-1.54895638e-09 -2.41269632e-04  1.39127941e-01  8.61113329e-01]
  HOMO = -0.596654686246986  LUMO = 5.32996439881816
  mo_energy =
[-3.18240031e+01 -1.77592208e+00 -5.96654686e-01 -5.96654686e-01
 -5.96654686e-01  5.32996440e+00  5.32996440e+00  5.32996440e+00
  1.09394757e+02  6.14488004e+03]
E1 = -179.78592384143792  E_coul = 54.503075965567
cycle= 4 E= -125.282847875871  delta_E= -1.83e-08  |g|= 8.82e-07  |ddm|= 0.000118
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.09633e-06
diis-c [-1.13831268e-15  2.98242959e-06 -2.06722888e-03 -1.13313363e-02
  1.01339558e+00]
  HOMO = -0.596654303929086  LUMO = 5.32996499821813
  mo_energy =
[-3.18240019e+01 -1.77592162e+00 -5.96654304e-01 -5.96654304e-01
 -5.96654304e-01  5.32996500e+00  5.32996500e+00  5.32996500e+00
  1.09394758e+02  6.14488004e+03]
E1 = -179.78592286716705  E_coul = 54.50307499129612
cycle= 5 E= -125.282847875871  delta_E= -1.42e-14  |g|= 1.16e-09  |ddm|= 1.54e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -179.78592286716705  E_coul = 54.50307499129612
  HOMO = -0.596654304548962  LUMO = 5.32996499716354
  mo_energy =
[-3.18240019e+01 -1.77592162e+00 -5.96654305e-01 -5.96654305e-01
 -5.96654305e-01  5.32996500e+00  5.32996500e+00  5.32996500e+00
  1.09394758e+02  6.14488004e+03]
E1 = -179.78592286870548  E_coul = 54.503074992834605
Extra cycle  E= -125.282847875871  delta_E= 4.26e-14  |g|= 1.57e-10  |ddm|= 2.44e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
exp = [4.61639530e+03 1.30108840e+02 1.95363663e+01 9.66660283e-01
 5.26952581e+00 8.88940599e-01]
E = -125.28284787587089
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:27:57 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4616.3953014         1
[INPUT] 0    0    [1    /1   ]  130.108840358        1
[INPUT] 0    0    [1    /1   ]  19.5363663131        1
[INPUT] 0    0    [1    /1   ]  0.966660282979       1
[INPUT] 1    0    [1    /1   ]  5.26952580601        1
[INPUT] 1    0    [1    /1   ]  0.888940599475       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4616.395301399051, 1.0]], [0, [130.10884035780697, 1.0]], [0, [19.536366313092593, 1.0]], [0, [0.9666602829793428, 1.0]], [1, [5.269525806012611, 1.0]], [1, [0.8889405994750567, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4616.3953014]
bas 1, expnt(s) = [130.10884036]
bas 2, expnt(s) = [19.53636631]
bas 3, expnt(s) = [0.96666028]
bas 4, expnt(s) = [5.26952581]
bas 5, expnt(s) = [0.8889406]
CPU time:       135.98
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61639530e+03 1.41495382e+03 1.30108840e+02 9.73296426e+01
 1.95363663e+01 2.34772847e+01 9.66660283e-01 2.46303413e+00
 5.26952581e+00 2.32915726e+01 8.88940599e-01 2.51811361e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.81798849123895
cond(S) = 4.264642093087603
E1 = -177.98623701867194  E_coul = 54.33901882631487
init E= -123.647218192357
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.653115409502382  LUMO = 5.28195513248142
  mo_energy =
[-3.16929009e+01 -1.82147771e+00 -6.53115410e-01 -6.53115410e-01
 -6.53115410e-01  5.28195513e+00  5.28195513e+00  5.28195513e+00
  1.09501036e+02  6.14518851e+03]
E1 = -179.7589350705977  E_coul = 54.47611505693449
cycle= 1 E= -125.282820013663  delta_E= -1.64  |g|= 0.158  |ddm|= 0.28
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.269759
diis-c [-0.07276979  1.        ]
  HOMO = -0.598349973694435  LUMO = 5.32726909076068
  mo_energy =
[-3.18303428e+01 -1.77797569e+00 -5.98349974e-01 -5.98349974e-01
 -5.98349974e-01  5.32726909e+00  5.32726909e+00  5.32726909e+00
  1.09388437e+02  6.14487424e+03]
E1 = -179.79038643600964  E_coul = 54.507539232357516
cycle= 2 E= -125.282847203652  delta_E= -2.72e-05  |g|= 0.00329  |ddm|= 0.00509
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00411798
diis-c [-1.69428884e-05 -4.52798367e-04  1.00045280e+00]
  HOMO = -0.596376606000671  LUMO = 5.33040782879354
  mo_energy =
[-3.18229323e+01 -1.77558512e+00 -5.96376606e-01 -5.96376606e-01
 -5.96376606e-01  5.33040783e+00  5.33040783e+00  5.33040783e+00
  1.09395845e+02  6.14488124e+03]
E1 = -179.7851876193266  E_coul = 54.502339761711085
cycle= 3 E= -125.282847857616  delta_E= -6.54e-07  |g|= 0.000534  |ddm|= 0.00083
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000667363
diis-c [-1.54895638e-09 -2.41269632e-04  1.39127941e-01  8.61113329e-01]
  HOMO = -0.596654686246986  LUMO = 5.32996439881816
  mo_energy =
[-3.18240031e+01 -1.77592208e+00 -5.96654686e-01 -5.96654686e-01
 -5.96654686e-01  5.32996440e+00  5.32996440e+00  5.32996440e+00
  1.09394757e+02  6.14488004e+03]
E1 = -179.78592384143792  E_coul = 54.503075965567
cycle= 4 E= -125.282847875871  delta_E= -1.83e-08  |g|= 8.82e-07  |ddm|= 0.000118
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.09633e-06
diis-c [-1.13831268e-15  2.98242959e-06 -2.06722888e-03 -1.13313363e-02
  1.01339558e+00]
  HOMO = -0.596654303929086  LUMO = 5.32996499821813
  mo_energy =
[-3.18240019e+01 -1.77592162e+00 -5.96654304e-01 -5.96654304e-01
 -5.96654304e-01  5.32996500e+00  5.32996500e+00  5.32996500e+00
  1.09394758e+02  6.14488004e+03]
E1 = -179.78592286716705  E_coul = 54.50307499129612
cycle= 5 E= -125.282847875871  delta_E= -1.42e-14  |g|= 1.16e-09  |ddm|= 1.54e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -179.78592286716705  E_coul = 54.50307499129612
  HOMO = -0.596654304548962  LUMO = 5.32996499716354
  mo_energy =
[-3.18240019e+01 -1.77592162e+00 -5.96654305e-01 -5.96654305e-01
 -5.96654305e-01  5.32996500e+00  5.32996500e+00  5.32996500e+00
  1.09394758e+02  6.14488004e+03]
E1 = -179.78592286870548  E_coul = 54.503074992834605
Extra cycle  E= -125.282847875871  delta_E= 4.26e-14  |g|= 1.57e-10  |ddm|= 2.44e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.264642093087603
E1 = -179.78592286870548  E_coul = 54.503074992834605
init E= -125.282847875871
    CPU time for initialize scf      0.04 sec, wall time      0.04 sec
  HOMO = -0.5966543044538  LUMO = 5.32996499731541
  mo_energy =
[-3.18240019e+01 -1.77592162e+00 -5.96654304e-01 -5.96654304e-01
 -5.96654304e-01  5.32996500e+00  5.32996500e+00  5.32996500e+00
  1.09394758e+02  6.14488004e+03]
E1 = -179.78592286845253  E_coul = 54.50307499258158
cycle= 1 E= -125.282847875871  delta_E= -5.68e-14  |g|= 2.59e-11  |ddm|= 4.05e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -179.78592286845253  E_coul = 54.50307499258158
  HOMO = -0.596654304469511  LUMO = 5.32996499729037
  mo_energy =
[-3.18240019e+01 -1.77592162e+00 -5.96654304e-01 -5.96654304e-01
 -5.96654304e-01  5.32996500e+00  5.32996500e+00  5.32996500e+00
  1.09394758e+02  6.14488004e+03]
E1 = -179.78592286849414  E_coul = 54.50307499262317
Extra cycle  E= -125.282847875871  delta_E= -2.84e-14  |g|= 4.3e-12  |ddm|= 6.64e-12
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [4.61639530e+03 1.30108840e+02 1.95363663e+01 9.66660283e-01
 5.26952581e+00 8.88940599e-01]
grad_E = [ 0.0001361  -0.00013797  0.00160538  0.01715405 -0.00087166  0.00497746]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:28:00 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4615.14731387        1
[INPUT] 0    0    [1    /1   ]  130.089310377        1
[INPUT] 0    0    [1    /1   ]  19.5457973186        1
[INPUT] 0    0    [1    /1   ]  0.969270557909       1
[INPUT] 1    0    [1    /1   ]  5.26577662132        1
[INPUT] 1    0    [1    /1   ]  0.888602235201       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4615.14731387253, 1.0]], [0, [130.08931037653426, 1.0]], [0, [19.545797318557923, 1.0]], [0, [0.9692705579090923, 1.0]], [1, [5.265776621318893, 1.0]], [1, [0.888602235200529, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4615.14731387]
bas 1, expnt(s) = [130.08931038]
bas 2, expnt(s) = [19.54579732]
bas 3, expnt(s) = [0.96927056]
bas 4, expnt(s) = [5.26577662]
bas 5, expnt(s) = [0.88860224]
CPU time:       138.88
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61514731e+03 1.41466693e+03 1.30089310e+02 9.73186852e+01
 1.95457973e+01 2.34857843e+01 9.69270558e-01 2.46802065e+00
 5.26577662e+00 2.32708600e+01 8.88602235e-01 2.51691555e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.817755986808923
cond(S) = 4.268635237395219
E1 = -177.99224937512813  E_coul = 54.34833147390769
init E= -123.64391790122
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.65237404761334  LUMO = 5.27949095915794
  mo_energy =
[-3.16913486e+01 -1.82063681e+00 -6.52374048e-01 -6.52374048e-01
 -6.52374048e-01  5.27949096e+00  5.27949096e+00  5.27949096e+00
  1.09528030e+02  6.14346719e+03]
E1 = -179.76955669344213  E_coul = 54.486650650572045
cycle= 1 E= -125.28290604287  delta_E= -1.64  |g|= 0.159  |ddm|= 0.28
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.270314
diis-c [-0.0730699  1.       ]
  HOMO = -0.59751939786415  LUMO = 5.32493672993591
  mo_energy =
[-3.18282308e+01 -1.77735439e+00 -5.97519398e-01 -5.97519398e-01
 -5.97519398e-01  5.32493673e+00  5.32493673e+00  5.32493673e+00
  1.09416166e+02  6.14315656e+03]
E1 = -179.80067155970355  E_coul = 54.51773885285065
cycle= 2 E= -125.282932706853  delta_E= -2.67e-05  |g|= 0.00325  |ddm|= 0.00503
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0040721
diis-c [-1.65650017e-05 -4.82094608e-04  1.00048209e+00]
  HOMO = -0.595567872565413  LUMO = 5.32803987945617
  mo_energy =
[-3.18208996e+01 -1.77498664e+00 -5.95567873e-01 -5.95567873e-01
 -5.95567873e-01  5.32803988e+00  5.32803988e+00  5.32803988e+00
  1.09423494e+02  6.14316350e+03]
E1 = -179.79552657220404  E_coul = 54.51259322535162
cycle= 3 E= -125.282933346852  delta_E= -6.4e-07  |g|= 0.000529  |ddm|= 0.000822
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000660225
diis-c [-1.58013678e-09 -2.41539968e-04  1.39189806e-01  8.61051734e-01]
  HOMO = -0.59584305653942  LUMO = 5.32760121613542
  mo_energy =
[-3.18219590e+01 -1.77532066e+00 -5.95843057e-01 -5.95843057e-01
 -5.95843057e-01  5.32760122e+00  5.32760122e+00  5.32760122e+00
  1.09422417e+02  6.14316231e+03]
E1 = -179.79625536218617  E_coul = 54.51332199745532
cycle= 4 E= -125.282933364731  delta_E= -1.79e-08  |g|= 8.66e-07  |ddm|= 0.000116
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.07787e-06
diis-c [-8.98910248e-16  2.99590483e-06 -2.07626015e-03 -1.14048839e-02
  1.01347815e+00]
  HOMO = -0.595842685655947  LUMO = 5.32760179734025
  mo_energy =
[-3.18219579e+01 -1.77532022e+00 -5.95842686e-01 -5.95842686e-01
 -5.95842686e-01  5.32760180e+00  5.32760180e+00  5.32760180e+00
  1.09422418e+02  6.14316231e+03]
E1 = -179.7962544148698  E_coul = 54.513321050138956
cycle= 5 E= -125.282933364731  delta_E= 1.42e-14  |g|= 1.04e-09  |ddm|= 1.5e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -179.7962544148698  E_coul = 54.513321050138956
  HOMO = -0.595842686210067  LUMO = 5.32760179639074
  mo_energy =
[-3.18219579e+01 -1.77532022e+00 -5.95842686e-01 -5.95842686e-01
 -5.95842686e-01  5.32760180e+00  5.32760180e+00  5.32760180e+00
  1.09422418e+02  6.14316231e+03]
E1 = -179.79625441624538  E_coul = 54.51332105151449
Extra cycle  E= -125.282933364731  delta_E= -5.68e-14  |g|= 1.4e-10  |ddm|= 2.19e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
exp = [4.61514731e+03 1.30089310e+02 1.95457973e+01 9.69270558e-01
 5.26577662e+00 8.88602235e-01]
E = -125.2829333647309
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:28:01 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4615.14731387        1
[INPUT] 0    0    [1    /1   ]  130.089310377        1
[INPUT] 0    0    [1    /1   ]  19.5457973186        1
[INPUT] 0    0    [1    /1   ]  0.969270557909       1
[INPUT] 1    0    [1    /1   ]  5.26577662132        1
[INPUT] 1    0    [1    /1   ]  0.888602235201       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4615.14731387253, 1.0]], [0, [130.08931037653426, 1.0]], [0, [19.545797318557923, 1.0]], [0, [0.9692705579090923, 1.0]], [1, [5.265776621318893, 1.0]], [1, [0.888602235200529, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4615.14731387]
bas 1, expnt(s) = [130.08931038]
bas 2, expnt(s) = [19.54579732]
bas 3, expnt(s) = [0.96927056]
bas 4, expnt(s) = [5.26577662]
bas 5, expnt(s) = [0.88860224]
CPU time:       139.52
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61514731e+03 1.41466693e+03 1.30089310e+02 9.73186852e+01
 1.95457973e+01 2.34857843e+01 9.69270558e-01 2.46802065e+00
 5.26577662e+00 2.32708600e+01 8.88602235e-01 2.51691555e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.817755986808923
cond(S) = 4.268635237395219
E1 = -177.99224937512813  E_coul = 54.34833147390769
init E= -123.64391790122
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.65237404761334  LUMO = 5.27949095915794
  mo_energy =
[-3.16913486e+01 -1.82063681e+00 -6.52374048e-01 -6.52374048e-01
 -6.52374048e-01  5.27949096e+00  5.27949096e+00  5.27949096e+00
  1.09528030e+02  6.14346719e+03]
E1 = -179.76955669344213  E_coul = 54.486650650572045
cycle= 1 E= -125.28290604287  delta_E= -1.64  |g|= 0.159  |ddm|= 0.28
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.270314
diis-c [-0.0730699  1.       ]
  HOMO = -0.59751939786415  LUMO = 5.32493672993591
  mo_energy =
[-3.18282308e+01 -1.77735439e+00 -5.97519398e-01 -5.97519398e-01
 -5.97519398e-01  5.32493673e+00  5.32493673e+00  5.32493673e+00
  1.09416166e+02  6.14315656e+03]
E1 = -179.80067155970355  E_coul = 54.51773885285065
cycle= 2 E= -125.282932706853  delta_E= -2.67e-05  |g|= 0.00325  |ddm|= 0.00503
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.0040721
diis-c [-1.65650017e-05 -4.82094608e-04  1.00048209e+00]
  HOMO = -0.595567872565413  LUMO = 5.32803987945617
  mo_energy =
[-3.18208996e+01 -1.77498664e+00 -5.95567873e-01 -5.95567873e-01
 -5.95567873e-01  5.32803988e+00  5.32803988e+00  5.32803988e+00
  1.09423494e+02  6.14316350e+03]
E1 = -179.79552657220404  E_coul = 54.51259322535162
cycle= 3 E= -125.282933346852  delta_E= -6.4e-07  |g|= 0.000529  |ddm|= 0.000822
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000660225
diis-c [-1.58013678e-09 -2.41539968e-04  1.39189806e-01  8.61051734e-01]
  HOMO = -0.59584305653942  LUMO = 5.32760121613542
  mo_energy =
[-3.18219590e+01 -1.77532066e+00 -5.95843057e-01 -5.95843057e-01
 -5.95843057e-01  5.32760122e+00  5.32760122e+00  5.32760122e+00
  1.09422417e+02  6.14316231e+03]
E1 = -179.79625536218617  E_coul = 54.51332199745532
cycle= 4 E= -125.282933364731  delta_E= -1.79e-08  |g|= 8.66e-07  |ddm|= 0.000116
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.07787e-06
diis-c [-8.98910248e-16  2.99590483e-06 -2.07626015e-03 -1.14048839e-02
  1.01347815e+00]
  HOMO = -0.595842685655947  LUMO = 5.32760179734025
  mo_energy =
[-3.18219579e+01 -1.77532022e+00 -5.95842686e-01 -5.95842686e-01
 -5.95842686e-01  5.32760180e+00  5.32760180e+00  5.32760180e+00
  1.09422418e+02  6.14316231e+03]
E1 = -179.7962544148698  E_coul = 54.513321050138956
cycle= 5 E= -125.282933364731  delta_E= 1.42e-14  |g|= 1.04e-09  |ddm|= 1.5e-07
    CPU time for cycle= 5      0.02 sec, wall time      0.02 sec
E1 = -179.7962544148698  E_coul = 54.513321050138956
  HOMO = -0.595842686210067  LUMO = 5.32760179639074
  mo_energy =
[-3.18219579e+01 -1.77532022e+00 -5.95842686e-01 -5.95842686e-01
 -5.95842686e-01  5.32760180e+00  5.32760180e+00  5.32760180e+00
  1.09422418e+02  6.14316231e+03]
E1 = -179.79625441624538  E_coul = 54.51332105151449
Extra cycle  E= -125.282933364731  delta_E= -5.68e-14  |g|= 1.4e-10  |ddm|= 2.19e-10
    CPU time for scf_cycle      0.11 sec, wall time      0.12 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.268635237395219
E1 = -179.79625441624538  E_coul = 54.51332105151449
init E= -125.282933364731
    CPU time for initialize scf      0.04 sec, wall time      0.04 sec
  HOMO = -0.595842686125011  LUMO = 5.32760179652644
  mo_energy =
[-3.18219579e+01 -1.77532022e+00 -5.95842686e-01 -5.95842686e-01
 -5.95842686e-01  5.32760180e+00  5.32760180e+00  5.32760180e+00
  1.09422418e+02  6.14316231e+03]
E1 = -179.79625441601908  E_coul = 54.51332105128822
cycle= 1 E= -125.282933364731  delta_E= 2.84e-14  |g|= 2.32e-11  |ddm|= 3.62e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -179.79625441601908  E_coul = 54.51332105128822
  HOMO = -0.595842686139054  LUMO = 5.32760179650406
  mo_energy =
[-3.18219579e+01 -1.77532022e+00 -5.95842686e-01 -5.95842686e-01
 -5.95842686e-01  5.32760180e+00  5.32760180e+00  5.32760180e+00
  1.09422418e+02  6.14316231e+03]
E1 = -179.79625441605617  E_coul = 54.513321051325384
Extra cycle  E= -125.282933364731  delta_E= 8.53e-14  |g|= 3.9e-12  |ddm|= 5.94e-12
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [4.61514731e+03 1.30089310e+02 1.95457973e+01 9.69270558e-01
 5.26577662e+00 8.88602235e-01]
grad_E = [ 0.00013624 -0.00022596  0.00262363  0.02793474 -0.0014356   0.00819733]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:28:04 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4611.86839083        1
[INPUT] 0    0    [1    /1   ]  130.055853891        1
[INPUT] 0    0    [1    /1   ]  19.5609880527        1
[INPUT] 0    0    [1    /1   ]  0.973512330331       1
[INPUT] 1    0    [1    /1   ]  5.25971595648        1
[INPUT] 1    0    [1    /1   ]  0.88805393532        1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4611.868390825171, 1.0]], [0, [130.05585389081187, 1.0]], [0, [19.560988052660488, 1.0]], [0, [0.9735123303308317, 1.0]], [1, [5.2597159564783915, 1.0]], [1, [0.8880539353202888, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4611.86839083]
bas 1, expnt(s) = [130.05585389]
bas 2, expnt(s) = [19.56098805]
bas 3, expnt(s) = [0.97351233]
bas 4, expnt(s) = [5.25971596]
bas 5, expnt(s) = [0.88805394]
CPU time:       142.85
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61186839e+03 1.41391305e+03 1.30055854e+02 9.72999132e+01
 1.95609881e+01 2.34994726e+01 9.73512330e-01 2.47611674e+00
 5.25971596e+00 2.32373852e+01 8.88053935e-01 2.51497442e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.817361650431305
cond(S) = 4.275242801140166
E1 = -178.00206019204762  E_coul = 54.36323950101647
init E= -123.638820691031
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.651191425281784  LUMO = 5.27548293536153
  mo_energy =
[-3.16889332e+01 -1.81925202e+00 -6.51191425e-01 -6.51191425e-01
 -6.51191425e-01  5.27548294e+00  5.27548294e+00  5.27548294e+00
  1.09569970e+02  6.13896542e+03]
E1 = -179.78685703555584  E_coul = 54.503726258783054
cycle= 1 E= -125.283130776773  delta_E= -1.64  |g|= 0.159  |ddm|= 0.281
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.271205
diis-c [-0.07355206  1.        ]
  HOMO = -0.596175126155594  LUMO = 5.32116307201527
  mo_energy =
[-3.18248756e+01 -1.77631644e+00 -5.96175126e-01 -5.96175126e-01
 -5.96175126e-01  5.32116307e+00  5.32116307e+00  5.32116307e+00
  1.09459333e+02  6.13866075e+03]
E1 = -179.8174002890618  E_coul = 54.534243715934885
cycle= 2 E= -125.283156573127  delta_E= -2.58e-05  |g|= 0.00318  |ddm|= 0.00494
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00399455
diis-c [-1.59356866e-05 -5.31314761e-04  1.00053131e+00]
  HOMO = -0.594260626289973  LUMO = 5.32420601290521
  mo_energy =
[-3.18176790e+01 -1.77398785e+00 -5.94260626e-01 -5.94260626e-01
 -5.94260626e-01  5.32420601e+00  5.32420601e+00  5.32420601e+00
  1.09466523e+02  6.13866757e+03]
E1 = -179.81234689462892  E_coul = 54.529189704855085
cycle= 3 E= -125.283157189774  delta_E= -6.17e-07  |g|= 0.000519  |ddm|= 0.000807
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000648118
diis-c [-1.63504238e-09 -2.42059467e-04  1.39289709e-01  8.60952350e-01]
  HOMO = -0.5945308873802  LUMO = 5.32377543188939
  mo_energy =
[-3.18187192e+01 -1.77431682e+00 -5.94530887e-01 -5.94530887e-01
 -5.94530887e-01  5.32377543e+00  5.32377543e+00  5.32377543e+00
  1.09465466e+02  6.13866640e+03]
E1 = -179.81306302224212  E_coul = 54.529905815221944
cycle= 4 E= -125.28315720702  delta_E= -1.72e-08  |g|= 8.4e-07  |ddm|= 0.000114
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.04998e-06
diis-c [-5.81449843e-16  3.01572912e-06 -2.08918691e-03 -1.15114766e-02
  1.01359765e+00]
  HOMO = -0.594530534586374  LUMO = 5.32377598433736
  mo_energy =
[-3.18187181e+01 -1.77431640e+00 -5.94530535e-01 -5.94530535e-01
 -5.94530535e-01  5.32377598e+00  5.32377598e+00  5.32377598e+00
  1.09465467e+02  6.13866640e+03]
E1 = -179.81306211741963  E_coul = 54.52990491039947
cycle= 5 E= -125.28315720702  delta_E=    0  |g|= 8.25e-10  |ddm|= 1.43e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -179.81306211741963  E_coul = 54.52990491039947
  HOMO = -0.594530535025708  LUMO = 5.32377598357102
  mo_energy =
[-3.18187181e+01 -1.77431640e+00 -5.94530535e-01 -5.94530535e-01
 -5.94530535e-01  5.32377598e+00  5.32377598e+00  5.32377598e+00
  1.09465467e+02  6.13866640e+03]
E1 = -179.81306211851023  E_coul = 54.529904911490135
Extra cycle  E= -125.28315720702  delta_E= 7.11e-14  |g|= 1.11e-10  |ddm|= 1.73e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
exp = [4.61186839e+03 1.30055854e+02 1.95609881e+01 9.73512330e-01
 5.25971596e+00 8.88053935e-01]
E = -125.2831572070201
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:28:05 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4611.86839083        1
[INPUT] 0    0    [1    /1   ]  130.055853891        1
[INPUT] 0    0    [1    /1   ]  19.5609880527        1
[INPUT] 0    0    [1    /1   ]  0.973512330331       1
[INPUT] 1    0    [1    /1   ]  5.25971595648        1
[INPUT] 1    0    [1    /1   ]  0.88805393532        1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4611.868390825171, 1.0]], [0, [130.05585389081187, 1.0]], [0, [19.560988052660488, 1.0]], [0, [0.9735123303308317, 1.0]], [1, [5.2597159564783915, 1.0]], [1, [0.8880539353202888, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4611.86839083]
bas 1, expnt(s) = [130.05585389]
bas 2, expnt(s) = [19.56098805]
bas 3, expnt(s) = [0.97351233]
bas 4, expnt(s) = [5.25971596]
bas 5, expnt(s) = [0.88805394]
CPU time:       143.50
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.61186839e+03 1.41391305e+03 1.30055854e+02 9.72999132e+01
 1.95609881e+01 2.34994726e+01 9.73512330e-01 2.47611674e+00
 5.25971596e+00 2.32373852e+01 8.88053935e-01 2.51497442e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.817361650431305
cond(S) = 4.275242801140166
E1 = -178.00206019204762  E_coul = 54.36323950101647
init E= -123.638820691031
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.651191425281784  LUMO = 5.27548293536153
  mo_energy =
[-3.16889332e+01 -1.81925202e+00 -6.51191425e-01 -6.51191425e-01
 -6.51191425e-01  5.27548294e+00  5.27548294e+00  5.27548294e+00
  1.09569970e+02  6.13896542e+03]
E1 = -179.78685703555584  E_coul = 54.503726258783054
cycle= 1 E= -125.283130776773  delta_E= -1.64  |g|= 0.159  |ddm|= 0.281
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.271205
diis-c [-0.07355206  1.        ]
  HOMO = -0.596175126155594  LUMO = 5.32116307201527
  mo_energy =
[-3.18248756e+01 -1.77631644e+00 -5.96175126e-01 -5.96175126e-01
 -5.96175126e-01  5.32116307e+00  5.32116307e+00  5.32116307e+00
  1.09459333e+02  6.13866075e+03]
E1 = -179.8174002890618  E_coul = 54.534243715934885
cycle= 2 E= -125.283156573127  delta_E= -2.58e-05  |g|= 0.00318  |ddm|= 0.00494
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00399455
diis-c [-1.59356866e-05 -5.31314761e-04  1.00053131e+00]
  HOMO = -0.594260626289973  LUMO = 5.32420601290521
  mo_energy =
[-3.18176790e+01 -1.77398785e+00 -5.94260626e-01 -5.94260626e-01
 -5.94260626e-01  5.32420601e+00  5.32420601e+00  5.32420601e+00
  1.09466523e+02  6.13866757e+03]
E1 = -179.81234689462892  E_coul = 54.529189704855085
cycle= 3 E= -125.283157189774  delta_E= -6.17e-07  |g|= 0.000519  |ddm|= 0.000807
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000648118
diis-c [-1.63504238e-09 -2.42059467e-04  1.39289709e-01  8.60952350e-01]
  HOMO = -0.5945308873802  LUMO = 5.32377543188939
  mo_energy =
[-3.18187192e+01 -1.77431682e+00 -5.94530887e-01 -5.94530887e-01
 -5.94530887e-01  5.32377543e+00  5.32377543e+00  5.32377543e+00
  1.09465466e+02  6.13866640e+03]
E1 = -179.81306302224212  E_coul = 54.529905815221944
cycle= 4 E= -125.28315720702  delta_E= -1.72e-08  |g|= 8.4e-07  |ddm|= 0.000114
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.04998e-06
diis-c [-5.81449843e-16  3.01572912e-06 -2.08918691e-03 -1.15114766e-02
  1.01359765e+00]
  HOMO = -0.594530534586374  LUMO = 5.32377598433736
  mo_energy =
[-3.18187181e+01 -1.77431640e+00 -5.94530535e-01 -5.94530535e-01
 -5.94530535e-01  5.32377598e+00  5.32377598e+00  5.32377598e+00
  1.09465467e+02  6.13866640e+03]
E1 = -179.81306211741963  E_coul = 54.52990491039947
cycle= 5 E= -125.28315720702  delta_E=    0  |g|= 8.25e-10  |ddm|= 1.43e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -179.81306211741963  E_coul = 54.52990491039947
  HOMO = -0.594530535025708  LUMO = 5.32377598357102
  mo_energy =
[-3.18187181e+01 -1.77431640e+00 -5.94530535e-01 -5.94530535e-01
 -5.94530535e-01  5.32377598e+00  5.32377598e+00  5.32377598e+00
  1.09465467e+02  6.13866640e+03]
E1 = -179.81306211851023  E_coul = 54.529904911490135
Extra cycle  E= -125.28315720702  delta_E= 7.11e-14  |g|= 1.11e-10  |ddm|= 1.73e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.275242801140166
E1 = -179.81306211851023  E_coul = 54.529904911490135
init E= -125.28315720702
    CPU time for initialize scf      0.04 sec, wall time      0.04 sec
  HOMO = -0.594530534958304  LUMO = 5.32377598367851
  mo_energy =
[-3.18187181e+01 -1.77431640e+00 -5.94530535e-01 -5.94530535e-01
 -5.94530535e-01  5.32377598e+00  5.32377598e+00  5.32377598e+00
  1.09465467e+02  6.13866640e+03]
E1 = -179.81306211833083  E_coul = 54.529904911310716
cycle= 1 E= -125.28315720702  delta_E= -1.42e-14  |g|= 1.85e-11  |ddm|= 2.87e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -179.81306211833083  E_coul = 54.529904911310716
  HOMO = -0.594530534969439  LUMO = 5.32377598366077
  mo_energy =
[-3.18187181e+01 -1.77431640e+00 -5.94530535e-01 -5.94530535e-01
 -5.94530535e-01  5.32377598e+00  5.32377598e+00  5.32377598e+00
  1.09465467e+02  6.13866640e+03]
E1 = -179.81306211836025  E_coul = 54.52990491134023
Extra cycle  E= -125.28315720702  delta_E= 8.53e-14  |g|= 3.05e-12  |ddm|= 4.71e-12
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [4.61186839e+03 1.30055854e+02 1.95609881e+01 9.73512330e-01
 5.25971596e+00 8.88053935e-01]
grad_E = [ 0.00013652 -0.00036824  0.00426994  0.04536445 -0.00234738  0.01340318]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:28:08 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4603.25400345        1
[INPUT] 0    0    [1    /1   ]  129.996782711        1
[INPUT] 0    0    [1    /1   ]  19.5854313255        1
[INPUT] 0    0    [1    /1   ]  0.980435839801       1
[INPUT] 1    0    [1    /1   ]  5.24990688127        1
[INPUT] 1    0    [1    /1   ]  0.887163024979       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4603.2540034467565, 1.0]], [0, [129.9967827114483, 1.0]], [0, [19.58543132551962, 1.0]], [0, [0.980435839800869, 1.0]], [1, [5.249906881274293, 1.0]], [1, [0.887163024979067, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4603.25400345]
bas 1, expnt(s) = [129.99678271]
bas 2, expnt(s) = [19.58543133]
bas 3, expnt(s) = [0.98043584]
bas 4, expnt(s) = [5.24990688]
bas 5, expnt(s) = [0.88716302]
CPU time:       146.53
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.60325400e+03 1.41193183e+03 1.29996783e+02 9.72667662e+01
 1.95854313e+01 2.35214927e+01 9.80435840e-01 2.48931243e+00
 5.24990688e+00 2.31832273e+01 8.87163025e-01 2.51182098e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.816674800252937
cond(S) = 4.286339238956042
E1 = -178.01818187648766  E_coul = 54.3869793429198
init E= -123.631202533568
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.649319279617266  LUMO = 5.26893071626793
  mo_energy =
[-3.16852714e+01 -1.81694343e+00 -6.49319280e-01 -6.49319280e-01
 -6.49319280e-01  5.26893072e+00  5.26893072e+00  5.26893072e+00
  1.09633417e+02  6.12717262e+03]
E1 = -179.8151977613568  E_coul = 54.531478719632645
cycle= 1 E= -125.283719041724  delta_E= -1.65  |g|= 0.16  |ddm|= 0.281
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.272626
diis-c [-0.07432492  1.        ]
  HOMO = -0.593995319906462  LUMO = 5.31504640982955
  mo_energy =
[-3.18196009e+01 -1.77454757e+00 -5.93995320e-01 -5.93995320e-01
 -5.93995320e-01  5.31504641e+00  5.31504641e+00  5.31504641e+00
  1.09524864e+02  6.12687776e+03]
E1 = -179.84474227442698  E_coul = 54.56099887995728
cycle= 2 E= -125.28374339447  delta_E= -2.44e-05  |g|= 0.00307  |ddm|= 0.00477
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00386013
diis-c [-1.48724771e-05 -6.15581985e-04  1.00061558e+00]
  HOMO = -0.592145311046052  LUMO = 5.31798478870104
  mo_energy =
[-3.18126391e+01 -1.77228844e+00 -5.92145311e-01 -5.92145311e-01
 -5.92145311e-01  5.31798479e+00  5.31798479e+00  5.31798479e+00
  1.09531816e+02  6.12688438e+03]
E1 = -179.83984931616615  E_coul = 54.55610534475384
cycle= 3 E= -125.283743971412  delta_E= -5.77e-07  |g|= 0.000502  |ddm|= 0.000781
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000627005
diis-c [-1.73604097e-09 -2.43117608e-04  1.39450060e-01  8.60793057e-01]
  HOMO = -0.592406961792733  LUMO = 5.31756829260099
  mo_energy =
[-3.18136459e+01 -1.77260839e+00 -5.92406962e-01 -5.92406962e-01
 -5.92406962e-01  5.31756829e+00  5.31756829e+00  5.31756829e+00
  1.09530793e+02  6.12688326e+03]
E1 = -179.8405432184993  E_coul = 54.556799230919374
cycle= 4 E= -125.28374398758  delta_E= -1.62e-08  |g|= 8.04e-07  |ddm|= 0.000111
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.01058e-06
diis-c [-1.85007110e-16  3.04292543e-06 -2.10584767e-03 -1.16515914e-02
  1.01375440e+00]
  HOMO = -0.592406636994355  LUMO = 5.31756880061928
  mo_energy =
[-3.18136449e+01 -1.77260799e+00 -5.92406637e-01 -5.92406637e-01
 -5.92406637e-01  5.31756880e+00  5.31756880e+00  5.31756880e+00
  1.09530794e+02  6.12688325e+03]
E1 = -179.84054237896206  E_coul = 54.55679839138214
cycle= 5 E= -125.28374398758  delta_E=    0  |g|= 4.48e-10  |ddm|= 1.33e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -179.84054237896206  E_coul = 54.55679839138214
  HOMO = -0.59240663722866  LUMO = 5.31756880017938
  mo_energy =
[-3.18136449e+01 -1.77260799e+00 -5.92406637e-01 -5.92406637e-01
 -5.92406637e-01  5.31756880e+00  5.31756880e+00  5.31756880e+00
  1.09530794e+02  6.12688325e+03]
E1 = -179.84054237954288  E_coul = 54.55679839196293
Extra cycle  E= -125.28374398758  delta_E= -2.84e-14  |g|= 5.89e-11  |ddm|= 9.22e-11
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
exp = [4.60325400e+03 1.29996783e+02 1.95854313e+01 9.80435840e-01
 5.24990688e+00 8.87163025e-01]
E = -125.28374398757995
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:28:08 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4603.25400345        1
[INPUT] 0    0    [1    /1   ]  129.996782711        1
[INPUT] 0    0    [1    /1   ]  19.5854313255        1
[INPUT] 0    0    [1    /1   ]  0.980435839801       1
[INPUT] 1    0    [1    /1   ]  5.24990688127        1
[INPUT] 1    0    [1    /1   ]  0.887163024979       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4603.2540034467565, 1.0]], [0, [129.9967827114483, 1.0]], [0, [19.58543132551962, 1.0]], [0, [0.980435839800869, 1.0]], [1, [5.249906881274293, 1.0]], [1, [0.887163024979067, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4603.25400345]
bas 1, expnt(s) = [129.99678271]
bas 2, expnt(s) = [19.58543133]
bas 3, expnt(s) = [0.98043584]
bas 4, expnt(s) = [5.24990688]
bas 5, expnt(s) = [0.88716302]
CPU time:       147.19
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.60325400e+03 1.41193183e+03 1.29996783e+02 9.72667662e+01
 1.95854313e+01 2.35214927e+01 9.80435840e-01 2.48931243e+00
 5.24990688e+00 2.31832273e+01 8.87163025e-01 2.51182098e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.816674800252937
cond(S) = 4.286339238956042
E1 = -178.01818187648766  E_coul = 54.3869793429198
init E= -123.631202533568
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.649319279617266  LUMO = 5.26893071626793
  mo_energy =
[-3.16852714e+01 -1.81694343e+00 -6.49319280e-01 -6.49319280e-01
 -6.49319280e-01  5.26893072e+00  5.26893072e+00  5.26893072e+00
  1.09633417e+02  6.12717262e+03]
E1 = -179.8151977613568  E_coul = 54.531478719632645
cycle= 1 E= -125.283719041724  delta_E= -1.65  |g|= 0.16  |ddm|= 0.281
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.272626
diis-c [-0.07432492  1.        ]
  HOMO = -0.593995319906462  LUMO = 5.31504640982955
  mo_energy =
[-3.18196009e+01 -1.77454757e+00 -5.93995320e-01 -5.93995320e-01
 -5.93995320e-01  5.31504641e+00  5.31504641e+00  5.31504641e+00
  1.09524864e+02  6.12687776e+03]
E1 = -179.84474227442698  E_coul = 54.56099887995728
cycle= 2 E= -125.28374339447  delta_E= -2.44e-05  |g|= 0.00307  |ddm|= 0.00477
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00386013
diis-c [-1.48724771e-05 -6.15581985e-04  1.00061558e+00]
  HOMO = -0.592145311046052  LUMO = 5.31798478870104
  mo_energy =
[-3.18126391e+01 -1.77228844e+00 -5.92145311e-01 -5.92145311e-01
 -5.92145311e-01  5.31798479e+00  5.31798479e+00  5.31798479e+00
  1.09531816e+02  6.12688438e+03]
E1 = -179.83984931616615  E_coul = 54.55610534475384
cycle= 3 E= -125.283743971412  delta_E= -5.77e-07  |g|= 0.000502  |ddm|= 0.000781
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000627005
diis-c [-1.73604097e-09 -2.43117608e-04  1.39450060e-01  8.60793057e-01]
  HOMO = -0.592406961792733  LUMO = 5.31756829260099
  mo_energy =
[-3.18136459e+01 -1.77260839e+00 -5.92406962e-01 -5.92406962e-01
 -5.92406962e-01  5.31756829e+00  5.31756829e+00  5.31756829e+00
  1.09530793e+02  6.12688326e+03]
E1 = -179.8405432184993  E_coul = 54.556799230919374
cycle= 4 E= -125.28374398758  delta_E= -1.62e-08  |g|= 8.04e-07  |ddm|= 0.000111
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.01058e-06
diis-c [-1.85007110e-16  3.04292543e-06 -2.10584767e-03 -1.16515914e-02
  1.01375440e+00]
  HOMO = -0.592406636994355  LUMO = 5.31756880061928
  mo_energy =
[-3.18136449e+01 -1.77260799e+00 -5.92406637e-01 -5.92406637e-01
 -5.92406637e-01  5.31756880e+00  5.31756880e+00  5.31756880e+00
  1.09530794e+02  6.12688325e+03]
E1 = -179.84054237896206  E_coul = 54.55679839138214
cycle= 5 E= -125.28374398758  delta_E=    0  |g|= 4.48e-10  |ddm|= 1.33e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -179.84054237896206  E_coul = 54.55679839138214
  HOMO = -0.59240663722866  LUMO = 5.31756880017938
  mo_energy =
[-3.18136449e+01 -1.77260799e+00 -5.92406637e-01 -5.92406637e-01
 -5.92406637e-01  5.31756880e+00  5.31756880e+00  5.31756880e+00
  1.09530794e+02  6.12688325e+03]
E1 = -179.84054237954288  E_coul = 54.55679839196293
Extra cycle  E= -125.28374398758  delta_E= -2.84e-14  |g|= 5.89e-11  |ddm|= 9.22e-11
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.286339238956042
E1 = -179.84054237954288  E_coul = 54.55679839196293
init E= -125.28374398758
    CPU time for initialize scf      0.04 sec, wall time      0.04 sec
  HOMO = -0.592406637192803  LUMO = 5.31756880023653
  mo_energy =
[-3.18136449e+01 -1.77260799e+00 -5.92406637e-01 -5.92406637e-01
 -5.92406637e-01  5.31756880e+00  5.31756880e+00  5.31756880e+00
  1.09530794e+02  6.12688325e+03]
E1 = -179.8405423794473  E_coul = 54.55679839186735
cycle= 1 E= -125.28374398758  delta_E=    0  |g|= 9.83e-12  |ddm|= 1.53e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -179.8405423794473  E_coul = 54.55679839186735
  HOMO = -0.592406637198732  LUMO = 5.31756880022709
  mo_energy =
[-3.18136449e+01 -1.77260799e+00 -5.92406637e-01 -5.92406637e-01
 -5.92406637e-01  5.31756880e+00  5.31756880e+00  5.31756880e+00
  1.09530794e+02  6.12688325e+03]
E1 = -179.8405423794632  E_coul = 54.55679839188308
Extra cycle  E= -125.28374398758  delta_E= -1.56e-13  |g|= 1.76e-12  |ddm|= 2.51e-12
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [4.60325400e+03 1.29996783e+02 1.95854313e+01 9.80435840e-01
 5.24990688e+00 8.87163025e-01]
grad_E = [ 0.00013715 -0.00059857  0.00693506  0.07357848 -0.00382344  0.02183069]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:28:11 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4580.56102107        1
[INPUT] 0    0    [1    /1   ]  129.887835529        1
[INPUT] 0    0    [1    /1   ]  19.6248165553        1
[INPUT] 0    0    [1    /1   ]  0.991850748869       1
[INPUT] 1    0    [1    /1   ]  5.23395242569        1
[INPUT] 1    0    [1    /1   ]  0.885704692019       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4580.561021073851, 1.0]], [0, [129.887835529335, 1.0]], [0, [19.624816555293258, 1.0]], [0, [0.9918507488692088, 1.0]], [1, [5.233952425686207, 1.0]], [1, [0.8857046920187873, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4580.56102107]
bas 1, expnt(s) = [129.88783553]
bas 2, expnt(s) = [19.62481656]
bas 3, expnt(s) = [0.99185075]
bas 4, expnt(s) = [5.23395243]
bas 5, expnt(s) = [0.88570469]
CPU time:       150.26
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.58056102e+03 1.40670823e+03 1.29887836e+02 9.72056221e+01
 1.96248166e+01 2.35569591e+01 9.91850749e-01 2.51101767e+00
 5.23395243e+00 2.30951935e+01 8.85704692e-01 2.50666083e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.815428430358129
cond(S) = 4.305458737563086
E1 = -178.04504001907625  E_coul = 54.42453843750811
init E= -123.620501581568
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.646387241329978  LUMO = 5.25809750647747
  mo_energy =
[-3.16799771e+01 -1.81300811e+00 -6.46387241e-01 -6.46387241e-01
 -6.46387241e-01  5.25809751e+00  5.25809751e+00  5.25809751e+00
  1.09725021e+02  6.09616712e+03]
E1 = -179.86218410977298  E_coul = 54.576918634208255
cycle= 1 E= -125.285265475565  delta_E= -1.66  |g|= 0.162  |ddm|= 0.283
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.274887
diis-c [-0.07556306  1.        ]
  HOMO = -0.590439677072787  LUMO = 5.30507227610605
  mo_energy =
[-3.18114359e+01 -1.77143128e+00 -5.90439677e-01 -5.90439677e-01
 -5.90439677e-01  5.30507228e+00  5.30507228e+00  5.30507228e+00
  1.09620126e+02  6.09588872e+03]
E1 = -179.88990467627124  E_coul = 54.60461727093695
cycle= 2 E= -125.285287405334  delta_E= -2.19e-05  |g|= 0.00287  |ddm|= 0.00446
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00361759
diis-c [-1.30429678e-05 -7.63507774e-04  1.00076351e+00]
  HOMO = -0.588706928240846  LUMO = 5.30782135817988
  mo_energy =
[-3.18049022e+01 -1.76930183e+00 -5.88706928e-01 -5.88706928e-01
 -5.88706928e-01  5.30782136e+00  5.30782136e+00  5.30782136e+00
  1.09626642e+02  6.09589497e+03]
E1 = -179.88530578532706  E_coul = 54.60001787200412
cycle= 3 E= -125.285287913323  delta_E= -5.08e-07  |g|= 0.000472  |ddm|= 0.000735
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000588542
diis-c [-1.93389267e-09 -2.45414631e-04  1.39700953e-01  8.60544462e-01]
  HOMO = -0.58895282594382  LUMO = 5.30743049589858
  mo_energy =
[-3.18058477e+01 -1.76960474e+00 -5.88952826e-01 -5.88952826e-01
 -5.88952826e-01  5.30743050e+00  5.30743050e+00  5.30743050e+00
  1.09625682e+02  6.09589391e+03]
E1 = -179.88595881608754  E_coul = 54.60067088848173
cycle= 4 E= -125.285287927606  delta_E= -1.43e-08  |g|= 7.61e-07  |ddm|= 0.000104
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=9.64032e-07
diis-c [-8.28138289e-17  3.07575021e-06 -2.12252967e-03 -1.17931113e-02
  1.01391257e+00]
  HOMO = -0.588952541941342  LUMO = 5.30743093936805
  mo_energy =
[-3.18058469e+01 -1.76960440e+00 -5.88952542e-01 -5.88952542e-01
 -5.88952542e-01  5.30743094e+00  5.30743094e+00  5.30743094e+00
  1.09625682e+02  6.09589391e+03]
E1 = -179.88595806990762  E_coul = 54.600670142301794
cycle= 5 E= -125.285287927606  delta_E= -1.42e-14  |g|= 2.35e-10  |ddm|= 1.18e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -179.88595806990762  E_coul = 54.600670142301794
  HOMO = -0.588952541804382  LUMO = 5.30743093951758
  mo_energy =
[-3.18058469e+01 -1.76960440e+00 -5.88952542e-01 -5.88952542e-01
 -5.88952542e-01  5.30743094e+00  5.30743094e+00  5.30743094e+00
  1.09625682e+02  6.09589391e+03]
E1 = -179.8859580695625  E_coul = 54.60067014195669
Extra cycle  E= -125.285287927606  delta_E= 2.84e-14  |g|= 3.52e-11  |ddm|= 5.49e-11
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
exp = [4.58056102e+03 1.29887836e+02 1.96248166e+01 9.91850749e-01
 5.23395243e+00 8.85704692e-01]
E = -125.2852879276058
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:28:12 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4580.56102107        1
[INPUT] 0    0    [1    /1   ]  129.887835529        1
[INPUT] 0    0    [1    /1   ]  19.6248165553        1
[INPUT] 0    0    [1    /1   ]  0.991850748869       1
[INPUT] 1    0    [1    /1   ]  5.23395242569        1
[INPUT] 1    0    [1    /1   ]  0.885704692019       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4580.561021073851, 1.0]], [0, [129.887835529335, 1.0]], [0, [19.624816555293258, 1.0]], [0, [0.9918507488692088, 1.0]], [1, [5.233952425686207, 1.0]], [1, [0.8857046920187873, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4580.56102107]
bas 1, expnt(s) = [129.88783553]
bas 2, expnt(s) = [19.62481656]
bas 3, expnt(s) = [0.99185075]
bas 4, expnt(s) = [5.23395243]
bas 5, expnt(s) = [0.88570469]
CPU time:       150.94
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.58056102e+03 1.40670823e+03 1.29887836e+02 9.72056221e+01
 1.96248166e+01 2.35569591e+01 9.91850749e-01 2.51101767e+00
 5.23395243e+00 2.30951935e+01 8.85704692e-01 2.50666083e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.815428430358129
cond(S) = 4.305458737563086
E1 = -178.04504001907625  E_coul = 54.42453843750811
init E= -123.620501581568
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.646387241329978  LUMO = 5.25809750647747
  mo_energy =
[-3.16799771e+01 -1.81300811e+00 -6.46387241e-01 -6.46387241e-01
 -6.46387241e-01  5.25809751e+00  5.25809751e+00  5.25809751e+00
  1.09725021e+02  6.09616712e+03]
E1 = -179.86218410977298  E_coul = 54.576918634208255
cycle= 1 E= -125.285265475565  delta_E= -1.66  |g|= 0.162  |ddm|= 0.283
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.274887
diis-c [-0.07556306  1.        ]
  HOMO = -0.590439677072787  LUMO = 5.30507227610605
  mo_energy =
[-3.18114359e+01 -1.77143128e+00 -5.90439677e-01 -5.90439677e-01
 -5.90439677e-01  5.30507228e+00  5.30507228e+00  5.30507228e+00
  1.09620126e+02  6.09588872e+03]
E1 = -179.88990467627124  E_coul = 54.60461727093695
cycle= 2 E= -125.285287405334  delta_E= -2.19e-05  |g|= 0.00287  |ddm|= 0.00446
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00361759
diis-c [-1.30429678e-05 -7.63507774e-04  1.00076351e+00]
  HOMO = -0.588706928240846  LUMO = 5.30782135817988
  mo_energy =
[-3.18049022e+01 -1.76930183e+00 -5.88706928e-01 -5.88706928e-01
 -5.88706928e-01  5.30782136e+00  5.30782136e+00  5.30782136e+00
  1.09626642e+02  6.09589497e+03]
E1 = -179.88530578532706  E_coul = 54.60001787200412
cycle= 3 E= -125.285287913323  delta_E= -5.08e-07  |g|= 0.000472  |ddm|= 0.000735
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000588542
diis-c [-1.93389267e-09 -2.45414631e-04  1.39700953e-01  8.60544462e-01]
  HOMO = -0.58895282594382  LUMO = 5.30743049589858
  mo_energy =
[-3.18058477e+01 -1.76960474e+00 -5.88952826e-01 -5.88952826e-01
 -5.88952826e-01  5.30743050e+00  5.30743050e+00  5.30743050e+00
  1.09625682e+02  6.09589391e+03]
E1 = -179.88595881608754  E_coul = 54.60067088848173
cycle= 4 E= -125.285287927606  delta_E= -1.43e-08  |g|= 7.61e-07  |ddm|= 0.000104
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=9.64032e-07
diis-c [-8.28138289e-17  3.07575021e-06 -2.12252967e-03 -1.17931113e-02
  1.01391257e+00]
  HOMO = -0.588952541941342  LUMO = 5.30743093936805
  mo_energy =
[-3.18058469e+01 -1.76960440e+00 -5.88952542e-01 -5.88952542e-01
 -5.88952542e-01  5.30743094e+00  5.30743094e+00  5.30743094e+00
  1.09625682e+02  6.09589391e+03]
E1 = -179.88595806990762  E_coul = 54.600670142301794
cycle= 5 E= -125.285287927606  delta_E= -1.42e-14  |g|= 2.35e-10  |ddm|= 1.18e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -179.88595806990762  E_coul = 54.600670142301794
  HOMO = -0.588952541804382  LUMO = 5.30743093951758
  mo_energy =
[-3.18058469e+01 -1.76960440e+00 -5.88952542e-01 -5.88952542e-01
 -5.88952542e-01  5.30743094e+00  5.30743094e+00  5.30743094e+00
  1.09625682e+02  6.09589391e+03]
E1 = -179.8859580695625  E_coul = 54.60067014195669
Extra cycle  E= -125.285287927606  delta_E= 2.84e-14  |g|= 3.52e-11  |ddm|= 5.49e-11
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.305458737563086
E1 = -179.8859580695625  E_coul = 54.60067014195669
init E= -125.285287927606
    CPU time for initialize scf      0.04 sec, wall time      0.04 sec
  HOMO = -0.588952541825695  LUMO = 5.30743093948369
  mo_energy =
[-3.18058469e+01 -1.76960440e+00 -5.88952542e-01 -5.88952542e-01
 -5.88952542e-01  5.30743094e+00  5.30743094e+00  5.30743094e+00
  1.09625682e+02  6.09589391e+03]
E1 = -179.8859580696193  E_coul = 54.6006701420134
cycle= 1 E= -125.285287927606  delta_E= -1.14e-13  |g|= 5.86e-12  |ddm|= 9.07e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -179.8859580696193  E_coul = 54.6006701420134
  HOMO = -0.588952541822176  LUMO = 5.30743093948927
  mo_energy =
[-3.18058469e+01 -1.76960440e+00 -5.88952542e-01 -5.88952542e-01
 -5.88952542e-01  5.30743094e+00  5.30743094e+00  5.30743094e+00
  1.09625682e+02  6.09589391e+03]
E1 = -179.88595806960987  E_coul = 54.600670142004084
Extra cycle  E= -125.285287927606  delta_E= 1.14e-13  |g|= 9.68e-13  |ddm|= 1.49e-12
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [4.58056102e+03 1.29887836e+02 1.96248166e+01 9.91850749e-01
 5.23395243e+00 8.85704692e-01]
grad_E = [ 0.00013862 -0.00097327  0.01127091  0.11946827 -0.0062251   0.03554223]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:28:15 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4520.20435487        1
[INPUT] 0    0    [1    /1   ]  129.673853447        1
[INPUT] 0    0    [1    /1   ]  19.688943841         1
[INPUT] 0    0    [1    /1   ]  1.01113080566        1
[INPUT] 1    0    [1    /1   ]  5.20758101344        1
[INPUT] 1    0    [1    /1   ]  0.883269286201       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4520.2043548657575, 1.0]], [0, [129.67385344657026, 1.0]], [0, [19.68894384102228, 1.0]], [0, [1.0111308056632704, 1.0]], [1, [5.207581013439083, 1.0]], [1, [0.8832692862007178, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4520.20435487]
bas 1, expnt(s) = [129.67385345]
bas 2, expnt(s) = [19.68894384]
bas 3, expnt(s) = [1.01113081]
bas 4, expnt(s) = [5.20758101]
bas 5, expnt(s) = [0.88326929]
CPU time:       154.02
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.52020435e+03 1.39278338e+03 1.29673853e+02 9.70854922e+01
 1.96889438e+01 2.36146677e+01 1.01113081e+00 2.54753718e+00
 5.20758101e+00 2.29498281e+01 8.83269286e-01 2.49804814e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.813014981457105
cond(S) = 4.339989674661499
E1 = -178.09101336493134  E_coul = 54.48362351007818
init E= -123.607389854853
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.641858762741985  LUMO = 5.23969748268053
  mo_energy =
[-3.16730441e+01 -1.80600324e+00 -6.41858763e-01 -6.41858763e-01
 -6.41858763e-01  5.23969748e+00  5.23969748e+00  5.23969748e+00
  1.09845859e+02  6.01383504e+03]
E1 = -179.94217926927405  E_coul = 54.65280042053706
cycle= 1 E= -125.289378848737  delta_E= -1.68  |g|= 0.164  |ddm|= 0.286
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.278498
diis-c [-0.07756102  1.        ]
  HOMO = -0.584539282032096  LUMO = 5.28851005848641
  mo_energy =
[-3.17990687e+01 -1.76561295e+00 -5.84539282e-01 -5.84539282e-01
 -5.84539282e-01  5.28851006e+00  5.28851006e+00  5.28851006e+00
  1.09747752e+02  6.01358510e+03]
E1 = -179.96632083250853  E_coul = 54.676924106614734
cycle= 2 E= -125.289396725894  delta_E= -1.79e-05  |g|= 0.00249  |ddm|= 0.00387
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00315058
diis-c [-9.84392990e-06 -1.03062563e-03  1.00103063e+00]
  HOMO = -0.583035267763016  LUMO = 5.29089215784684
  mo_energy =
[-3.17933725e+01 -1.76374584e+00 -5.83035268e-01 -5.83035268e-01
 -5.83035268e-01  5.29089216e+00  5.29089216e+00  5.29089216e+00
  1.09753418e+02  6.01359060e+03]
E1 = -179.96230196592668  E_coul = 54.67290485422392
cycle= 3 E= -125.289397111703  delta_E= -3.86e-07  |g|= 0.000412  |ddm|= 0.000642
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000513261
diis-c [-2.35903477e-09 -2.50738917e-04  1.40037714e-01  8.60213024e-01]
  HOMO = -0.583250157314514  LUMO = 5.29055138448207
  mo_energy =
[-3.17941979e+01 -1.76401382e+00 -5.83250157e-01 -5.83250157e-01
 -5.83250157e-01  5.29055138e+00  5.29055138e+00  5.29055138e+00
  1.09752579e+02  6.01358968e+03]
E1 = -179.96287395687642  E_coul = 54.67347683426435
cycle= 4 E= -125.289397122612  delta_E= -1.09e-08  |g|= 7.4e-07  |ddm|= 9.14e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=9.44779e-07
diis-c [-1.51503151e-15  3.10789086e-06 -2.12716006e-03 -1.17729885e-02
  1.01389704e+00]
  HOMO = -0.58324991874157  LUMO = 5.29055175661757
  mo_energy =
[-3.17941972e+01 -1.76401353e+00 -5.83249919e-01 -5.83249919e-01
 -5.83249919e-01  5.29055176e+00  5.29055176e+00  5.29055176e+00
  1.09752580e+02  6.01358968e+03]
E1 = -179.96287330573372  E_coul = 54.67347618312154
cycle= 5 E= -125.289397122612  delta_E= -1.14e-13  |g|= 1.44e-09  |ddm|= 1.04e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -179.96287330573372  E_coul = 54.67347618312154
  HOMO = -0.583249917941814  LUMO = 5.29055175781503
  mo_energy =
[-3.17941972e+01 -1.76401353e+00 -5.83249918e-01 -5.83249918e-01
 -5.83249918e-01  5.29055176e+00  5.29055176e+00  5.29055176e+00
  1.09752580e+02  6.01358968e+03]
E1 = -179.96287330372812  E_coul = 54.67347618111602
Extra cycle  E= -125.289397122612  delta_E= 9.95e-14  |g|= 2.03e-10  |ddm|= 3.19e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
exp = [4.52020435e+03 1.29673853e+02 1.96889438e+01 1.01113081e+00
 5.20758101e+00 8.83269286e-01]
E = -125.28939712261209
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:28:16 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4520.20435487        1
[INPUT] 0    0    [1    /1   ]  129.673853447        1
[INPUT] 0    0    [1    /1   ]  19.688943841         1
[INPUT] 0    0    [1    /1   ]  1.01113080566        1
[INPUT] 1    0    [1    /1   ]  5.20758101344        1
[INPUT] 1    0    [1    /1   ]  0.883269286201       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4520.2043548657575, 1.0]], [0, [129.67385344657026, 1.0]], [0, [19.68894384102228, 1.0]], [0, [1.0111308056632704, 1.0]], [1, [5.207581013439083, 1.0]], [1, [0.8832692862007178, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4520.20435487]
bas 1, expnt(s) = [129.67385345]
bas 2, expnt(s) = [19.68894384]
bas 3, expnt(s) = [1.01113081]
bas 4, expnt(s) = [5.20758101]
bas 5, expnt(s) = [0.88326929]
CPU time:       154.70
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.52020435e+03 1.39278338e+03 1.29673853e+02 9.70854922e+01
 1.96889438e+01 2.36146677e+01 1.01113081e+00 2.54753718e+00
 5.20758101e+00 2.29498281e+01 8.83269286e-01 2.49804814e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.813014981457105
cond(S) = 4.339989674661499
E1 = -178.09101336493134  E_coul = 54.48362351007818
init E= -123.607389854853
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.641858762741985  LUMO = 5.23969748268053
  mo_energy =
[-3.16730441e+01 -1.80600324e+00 -6.41858763e-01 -6.41858763e-01
 -6.41858763e-01  5.23969748e+00  5.23969748e+00  5.23969748e+00
  1.09845859e+02  6.01383504e+03]
E1 = -179.94217926927405  E_coul = 54.65280042053706
cycle= 1 E= -125.289378848737  delta_E= -1.68  |g|= 0.164  |ddm|= 0.286
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.278498
diis-c [-0.07756102  1.        ]
  HOMO = -0.584539282032096  LUMO = 5.28851005848641
  mo_energy =
[-3.17990687e+01 -1.76561295e+00 -5.84539282e-01 -5.84539282e-01
 -5.84539282e-01  5.28851006e+00  5.28851006e+00  5.28851006e+00
  1.09747752e+02  6.01358510e+03]
E1 = -179.96632083250853  E_coul = 54.676924106614734
cycle= 2 E= -125.289396725894  delta_E= -1.79e-05  |g|= 0.00249  |ddm|= 0.00387
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00315058
diis-c [-9.84392990e-06 -1.03062563e-03  1.00103063e+00]
  HOMO = -0.583035267763016  LUMO = 5.29089215784684
  mo_energy =
[-3.17933725e+01 -1.76374584e+00 -5.83035268e-01 -5.83035268e-01
 -5.83035268e-01  5.29089216e+00  5.29089216e+00  5.29089216e+00
  1.09753418e+02  6.01359060e+03]
E1 = -179.96230196592668  E_coul = 54.67290485422392
cycle= 3 E= -125.289397111703  delta_E= -3.86e-07  |g|= 0.000412  |ddm|= 0.000642
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000513261
diis-c [-2.35903477e-09 -2.50738917e-04  1.40037714e-01  8.60213024e-01]
  HOMO = -0.583250157314514  LUMO = 5.29055138448207
  mo_energy =
[-3.17941979e+01 -1.76401382e+00 -5.83250157e-01 -5.83250157e-01
 -5.83250157e-01  5.29055138e+00  5.29055138e+00  5.29055138e+00
  1.09752579e+02  6.01358968e+03]
E1 = -179.96287395687642  E_coul = 54.67347683426435
cycle= 4 E= -125.289397122612  delta_E= -1.09e-08  |g|= 7.4e-07  |ddm|= 9.14e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=9.44779e-07
diis-c [-1.51503151e-15  3.10789086e-06 -2.12716006e-03 -1.17729885e-02
  1.01389704e+00]
  HOMO = -0.58324991874157  LUMO = 5.29055175661757
  mo_energy =
[-3.17941972e+01 -1.76401353e+00 -5.83249919e-01 -5.83249919e-01
 -5.83249919e-01  5.29055176e+00  5.29055176e+00  5.29055176e+00
  1.09752580e+02  6.01358968e+03]
E1 = -179.96287330573372  E_coul = 54.67347618312154
cycle= 5 E= -125.289397122612  delta_E= -1.14e-13  |g|= 1.44e-09  |ddm|= 1.04e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -179.96287330573372  E_coul = 54.67347618312154
  HOMO = -0.583249917941814  LUMO = 5.29055175781503
  mo_energy =
[-3.17941972e+01 -1.76401353e+00 -5.83249918e-01 -5.83249918e-01
 -5.83249918e-01  5.29055176e+00  5.29055176e+00  5.29055176e+00
  1.09752580e+02  6.01358968e+03]
E1 = -179.96287330372812  E_coul = 54.67347618111602
Extra cycle  E= -125.289397122612  delta_E= 9.95e-14  |g|= 2.03e-10  |ddm|= 3.19e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.339989674661499
E1 = -179.96287330372812  E_coul = 54.67347618111602
init E= -125.289397122612
    CPU time for initialize scf      0.04 sec, wall time      0.04 sec
  HOMO = -0.583249918065327  LUMO = 5.29055175761897
  mo_energy =
[-3.17941972e+01 -1.76401353e+00 -5.83249918e-01 -5.83249918e-01
 -5.83249918e-01  5.29055176e+00  5.29055176e+00  5.29055176e+00
  1.09752580e+02  6.01358968e+03]
E1 = -179.96287330405832  E_coul = 54.673476181446155
cycle= 1 E= -125.289397122612  delta_E= -8.53e-14  |g|= 3.37e-11  |ddm|= 5.28e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -179.96287330405832  E_coul = 54.673476181446155
  HOMO = -0.583249918044901  LUMO = 5.29055175765136
  mo_energy =
[-3.17941972e+01 -1.76401353e+00 -5.83249918e-01 -5.83249918e-01
 -5.83249918e-01  5.29055176e+00  5.29055176e+00  5.29055176e+00
  1.09752580e+02  6.01358968e+03]
E1 = -179.96287330400403  E_coul = 54.67347618139182
Extra cycle  E= -125.289397122612  delta_E= -4.26e-14  |g|= 5.6e-12  |ddm|= 8.69e-12
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [4.52020435e+03 1.29673853e+02 1.96889438e+01 1.01113081e+00
 5.20758101e+00 8.83269286e-01]
grad_E = [ 1.42267919e-04 -1.59217101e-03  1.84366813e-02  1.95248007e-01
 -1.01974295e-02  5.82147927e-02]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:28:19 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4354.76261948        1
[INPUT] 0    0    [1    /1   ]  129.21009565         1
[INPUT] 0    0    [1    /1   ]  19.7977276084        1
[INPUT] 0    0    [1    /1   ]  1.04577424958        1
[INPUT] 1    0    [1    /1   ]  5.16177276062        1
[INPUT] 1    0    [1    /1   ]  0.878969509624       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4354.762619484717, 1.0]], [0, [129.2100956500754, 1.0]], [0, [19.797727608393902, 1.0]], [0, [1.0457742495823747, 1.0]], [1, [5.161772760621025, 1.0]], [1, [0.878969509624031, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4354.76261948]
bas 1, expnt(s) = [129.21009565]
bas 2, expnt(s) = [19.79772761]
bas 3, expnt(s) = [1.04577425]
bas 4, expnt(s) = [5.16177276]
bas 5, expnt(s) = [0.87896951]
CPU time:       157.71
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.35476262e+03 1.35437332e+03 1.29210096e+02 9.68249676e+01
 1.97977276e+01 2.37124557e+01 1.04577425e+00 2.61272368e+00
 5.16177276e+00 2.26977597e+01 8.78969510e-01 2.48285670e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.807776328161541
cond(S) = 4.4085997371979
E1 = -178.17400292105887  E_coul = 54.576662341304726
init E= -123.597340579754
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.63498960601014  LUMO = 5.20620465049043
  mo_energy =
[-3.16664079e+01 -1.79231970e+00 -6.34989606e-01 -6.34989606e-01
 -6.34989606e-01  5.20620465e+00  5.20620465e+00  5.20620465e+00
  1.09972600e+02  5.78864836e+03]
E1 = -180.0872878143292  E_coul = 54.78655590819262
cycle= 1 E= -125.300731906137  delta_E= -1.7  |g|= 0.168  |ddm|= 0.292
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.284408
diis-c [-0.08088763  1.        ]
  HOMO = -0.574252450369896  LUMO = 5.25948028500446
  mo_energy =
[-3.17808807e+01 -1.75345639e+00 -5.74252450e-01 -5.74252450e-01
 -5.74252450e-01  5.25948029e+00  5.25948029e+00  5.25948029e+00
  1.09888536e+02  5.78845151e+03]
E1 = -180.1034396983506  E_coul = 54.80269606729013
cycle= 2 E= -125.30074363106  delta_E= -1.17e-05  |g|= 0.00166  |ddm|= 0.00259
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00214733
diis-c [-4.42546657e-06 -1.51687210e-03  1.00151687e+00]
  HOMO = -0.57325514666901  LUMO = 5.26105648384251
  mo_energy =
[-3.17770458e+01 -1.75220041e+00 -5.73255147e-01 -5.73255147e-01
 -5.73255147e-01  5.26105648e+00  5.26105648e+00  5.26105648e+00
  1.09892313e+02  5.78845529e+03]
E1 = -180.10072523888812  E_coul = 54.799981433310386
cycle= 3 E= -125.300743805578  delta_E= -1.75e-07  |g|= 0.000278  |ddm|= 0.000434
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000345505
diis-c [-3.41289718e-09 -2.63045425e-04  1.39478932e-01  8.60784113e-01]
  HOMO = -0.57340049570547  LUMO = 5.26082692226746
  mo_energy =
[-3.17776030e+01 -1.75238558e+00 -5.73400496e-01 -5.73400496e-01
 -5.73400496e-01  5.26082692e+00  5.26082692e+00  5.26082692e+00
  1.09891747e+02  5.78845467e+03]
E1 = -180.1011135883884  E_coul = 54.8003697778337
cycle= 4 E= -125.300743810555  delta_E= -4.98e-09  |g|= 9.36e-07  |ddm|= 6.21e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.19591e-06
diis-c [-9.27629456e-15  3.14276539e-06 -2.09556782e-03 -1.01281292e-02
  1.01222055e+00]
  HOMO = -0.57340016093698  LUMO = 5.26082744818675
  mo_energy =
[-3.17776019e+01 -1.75238517e+00 -5.73400161e-01 -5.73400161e-01
 -5.73400161e-01  5.26082745e+00  5.26082745e+00  5.26082745e+00
  1.09891748e+02  5.78845467e+03]
E1 = -180.10111263200184  E_coul = 54.80036882144708
cycle= 5 E= -125.300743810555  delta_E= -8.53e-14  |g|= 3.47e-09  |ddm|= 1.53e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -180.10111263200184  E_coul = 54.80036882144708
  HOMO = -0.573400159027197  LUMO = 5.26082745112651
  mo_energy =
[-3.17776018e+01 -1.75238517e+00 -5.73400159e-01 -5.73400159e-01
 -5.73400159e-01  5.26082745e+00  5.26082745e+00  5.26082745e+00
  1.09891748e+02  5.78845467e+03]
E1 = -180.10111262719602  E_coul = 54.80036881664124
Extra cycle  E= -125.300743810555  delta_E= -1.42e-14  |g|= 4.83e-10  |ddm|= 7.63e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
exp = [4.35476262e+03 1.29210096e+02 1.97977276e+01 1.04577425e+00
 5.16177276e+00 8.78969510e-01]
E = -125.30074381055478
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:28:20 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  4354.76261948        1
[INPUT] 0    0    [1    /1   ]  129.21009565         1
[INPUT] 0    0    [1    /1   ]  19.7977276084        1
[INPUT] 0    0    [1    /1   ]  1.04577424958        1
[INPUT] 1    0    [1    /1   ]  5.16177276062        1
[INPUT] 1    0    [1    /1   ]  0.878969509624       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [4354.762619484717, 1.0]], [0, [129.2100956500754, 1.0]], [0, [19.797727608393902, 1.0]], [0, [1.0457742495823747, 1.0]], [1, [5.161772760621025, 1.0]], [1, [0.878969509624031, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4354.76261948]
bas 1, expnt(s) = [129.21009565]
bas 2, expnt(s) = [19.79772761]
bas 3, expnt(s) = [1.04577425]
bas 4, expnt(s) = [5.16177276]
bas 5, expnt(s) = [0.87896951]
CPU time:       158.39
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.35476262e+03 1.35437332e+03 1.29210096e+02 9.68249676e+01
 1.97977276e+01 2.37124557e+01 1.04577425e+00 2.61272368e+00
 5.16177276e+00 2.26977597e+01 8.78969510e-01 2.48285670e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.807776328161541
cond(S) = 4.4085997371979
E1 = -178.17400292105887  E_coul = 54.576662341304726
init E= -123.597340579754
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.63498960601014  LUMO = 5.20620465049043
  mo_energy =
[-3.16664079e+01 -1.79231970e+00 -6.34989606e-01 -6.34989606e-01
 -6.34989606e-01  5.20620465e+00  5.20620465e+00  5.20620465e+00
  1.09972600e+02  5.78864836e+03]
E1 = -180.0872878143292  E_coul = 54.78655590819262
cycle= 1 E= -125.300731906137  delta_E= -1.7  |g|= 0.168  |ddm|= 0.292
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.284408
diis-c [-0.08088763  1.        ]
  HOMO = -0.574252450369896  LUMO = 5.25948028500446
  mo_energy =
[-3.17808807e+01 -1.75345639e+00 -5.74252450e-01 -5.74252450e-01
 -5.74252450e-01  5.25948029e+00  5.25948029e+00  5.25948029e+00
  1.09888536e+02  5.78845151e+03]
E1 = -180.1034396983506  E_coul = 54.80269606729013
cycle= 2 E= -125.30074363106  delta_E= -1.17e-05  |g|= 0.00166  |ddm|= 0.00259
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00214733
diis-c [-4.42546657e-06 -1.51687210e-03  1.00151687e+00]
  HOMO = -0.57325514666901  LUMO = 5.26105648384251
  mo_energy =
[-3.17770458e+01 -1.75220041e+00 -5.73255147e-01 -5.73255147e-01
 -5.73255147e-01  5.26105648e+00  5.26105648e+00  5.26105648e+00
  1.09892313e+02  5.78845529e+03]
E1 = -180.10072523888812  E_coul = 54.799981433310386
cycle= 3 E= -125.300743805578  delta_E= -1.75e-07  |g|= 0.000278  |ddm|= 0.000434
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000345505
diis-c [-3.41289718e-09 -2.63045425e-04  1.39478932e-01  8.60784113e-01]
  HOMO = -0.57340049570547  LUMO = 5.26082692226746
  mo_energy =
[-3.17776030e+01 -1.75238558e+00 -5.73400496e-01 -5.73400496e-01
 -5.73400496e-01  5.26082692e+00  5.26082692e+00  5.26082692e+00
  1.09891747e+02  5.78845467e+03]
E1 = -180.1011135883884  E_coul = 54.8003697778337
cycle= 4 E= -125.300743810555  delta_E= -4.98e-09  |g|= 9.36e-07  |ddm|= 6.21e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.19591e-06
diis-c [-9.27629456e-15  3.14276539e-06 -2.09556782e-03 -1.01281292e-02
  1.01222055e+00]
  HOMO = -0.57340016093698  LUMO = 5.26082744818675
  mo_energy =
[-3.17776019e+01 -1.75238517e+00 -5.73400161e-01 -5.73400161e-01
 -5.73400161e-01  5.26082745e+00  5.26082745e+00  5.26082745e+00
  1.09891748e+02  5.78845467e+03]
E1 = -180.10111263200184  E_coul = 54.80036882144708
cycle= 5 E= -125.300743810555  delta_E= -8.53e-14  |g|= 3.47e-09  |ddm|= 1.53e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -180.10111263200184  E_coul = 54.80036882144708
  HOMO = -0.573400159027197  LUMO = 5.26082745112651
  mo_energy =
[-3.17776018e+01 -1.75238517e+00 -5.73400159e-01 -5.73400159e-01
 -5.73400159e-01  5.26082745e+00  5.26082745e+00  5.26082745e+00
  1.09891748e+02  5.78845467e+03]
E1 = -180.10111262719602  E_coul = 54.80036881664124
Extra cycle  E= -125.300743810555  delta_E= -1.42e-14  |g|= 4.83e-10  |ddm|= 7.63e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.4085997371979
E1 = -180.10111262719602  E_coul = 54.80036881664124
init E= -125.300743810555
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.573400159322153  LUMO = 5.26082745066008
  mo_energy =
[-3.17776018e+01 -1.75238517e+00 -5.73400159e-01 -5.73400159e-01
 -5.73400159e-01  5.26082745e+00  5.26082745e+00  5.26082745e+00
  1.09891748e+02  5.78845467e+03]
E1 = -180.10111262798807  E_coul = 54.800368817433316
cycle= 1 E= -125.300743810555  delta_E= 1.42e-14  |g|= 8.04e-11  |ddm|= 1.27e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -180.10111262798807  E_coul = 54.800368817433316
  HOMO = -0.573400159273262  LUMO = 5.26082745073728
  mo_energy =
[-3.17776018e+01 -1.75238517e+00 -5.73400159e-01 -5.73400159e-01
 -5.73400159e-01  5.26082745e+00  5.26082745e+00  5.26082745e+00
  1.09891748e+02  5.78845467e+03]
E1 = -180.10111262785742  E_coul = 54.80036881730264
Extra cycle  E= -125.300743810555  delta_E= -1.42e-14  |g|= 1.33e-11  |ddm|= 2.09e-11
    CPU time for scf_cycle      0.11 sec, wall time      0.12 sec
exp = [4.35476262e+03 1.29210096e+02 1.97977276e+01 1.04577425e+00
 5.16177276e+00 8.78969510e-01]
grad_E = [ 1.52326392e-04 -2.66021958e-03  3.08533615e-02  3.26185883e-01
 -1.71101648e-02  9.76152781e-02]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:28:23 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  3850.05810495        1
[INPUT] 0    0    [1    /1   ]  127.980680323        1
[INPUT] 0    0    [1    /1   ]  20.0122583003        1
[INPUT] 0    0    [1    /1   ]  1.12026895215        1
[INPUT] 1    0    [1    /1   ]  5.0681680749         1
[INPUT] 1    0    [1    /1   ]  0.869967453584       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [3850.0581049505786, 1.0]], [0, [127.98068032292736, 1.0]], [0, [20.012258300316567, 1.0]], [0, [1.1202689521506728, 1.0]], [1, [5.068168074898645, 1.0]], [1, [0.8699674535841424, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3850.05810495]
bas 1, expnt(s) = [127.98068032]
bas 2, expnt(s) = [20.0122583]
bas 3, expnt(s) = [1.12026895]
bas 4, expnt(s) = [5.06816807]
bas 5, expnt(s) = [0.86996745]
CPU time:       161.54
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.85005810e+03 1.23485364e+03 1.27980680e+02 9.61331859e+01
 2.00122583e+01 2.39049092e+01 1.12026895e+00 2.75110236e+00
 5.06816807e+00 2.21844238e+01 8.69967454e-01 2.45111196e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.79312479271292
cond(S) = 4.582077837745508
E1 = -178.3415996861789  E_coul = 54.72443408428822
init E= -123.617165601891
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.62518320876447  LUMO = 5.13143925804447
  mo_energy =
[-3.16738063e+01 -1.75838409e+00 -6.25183209e-01 -6.25183209e-01
 -6.25183209e-01  5.13143926e+00  5.13143926e+00  5.13143926e+00
  1.09976197e+02  5.10535298e+03]
E1 = -180.40117034940863  E_coul = 55.06404615959815
cycle= 1 E= -125.33712418981  delta_E= -1.72  |g|= 0.178  |ddm|= 0.308
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.294806
diis-c [-0.08691067  1.        ]
  HOMO = -0.553367841406997  LUMO = 5.19888691014645
  mo_energy =
[-3.17561432e+01 -1.72029930e+00 -5.53367841e-01 -5.53367841e-01
 -5.53367841e-01  5.19888691e+00  5.19888691e+00  5.19888691e+00
  1.09929775e+02  5.10527738e+03]
E1 = -180.39349302110708  E_coul = 55.05635495932288
cycle= 2 E= -125.337138061784  delta_E= -1.39e-05  |g|= 0.0011  |ddm|= 0.00169
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00130527
diis-c [-1.31047712e-06 -2.13172205e-03  1.00213172e+00]
  HOMO = -0.55386564362318  LUMO = 5.19811751322737
  mo_energy =
[-3.17578170e+01 -1.72098586e+00 -5.53865644e-01 -5.53865644e-01
 -5.53865644e-01  5.19811751e+00  5.19811751e+00  5.19811751e+00
  1.09927976e+02  5.10527591e+03]
E1 = -180.39471318822132  E_coul = 55.05757508997604
cycle= 3 E= -125.337138098245  delta_E= -3.65e-08  |g|= 0.000123  |ddm|= 0.000194
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000154044
diis-c [-5.10782759e-09 -2.39391994e-04  1.06894138e-01  8.93345254e-01]
  HOMO = -0.553797952973714  LUMO = 5.19822358807838
  mo_energy =
[-3.17575574e+01 -1.72089624e+00 -5.53797953e-01 -5.53797953e-01
 -5.53797953e-01  5.19822359e+00  5.19822359e+00  5.19822359e+00
  1.09928237e+02  5.10527620e+03]
E1 = -180.39452941873466  E_coul = 55.05739131947563
cycle= 4 E= -125.337138099259  delta_E= -1.01e-09  |g|= 5.36e-06  |ddm|= 2.94e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=6.54175e-06
diis-c [-4.45849940e-14  3.31208962e-06 -1.99257236e-03  2.79796982e-02
  9.74009562e-01]
  HOMO = -0.553800699233195  LUMO = 5.19821929191988
  mo_energy =
[-3.17575678e+01 -1.72089992e+00 -5.53800699e-01 -5.53800699e-01
 -5.53800699e-01  5.19821929e+00  5.19821929e+00  5.19821929e+00
  1.09928226e+02  5.10527619e+03]
E1 = -180.39453670452218  E_coul = 55.057398605261305
cycle= 5 E= -125.337138099261  delta_E= -1.83e-12  |g|= 6.97e-09  |ddm|= 1.16e-06
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -180.39453670452218  E_coul = 55.057398605261305
  HOMO = -0.553800695430868  LUMO = 5.19821929775871
  mo_energy =
[-3.17575677e+01 -1.72089991e+00 -5.53800695e-01 -5.53800695e-01
 -5.53800695e-01  5.19821930e+00  5.19821930e+00  5.19821930e+00
  1.09928226e+02  5.10527619e+03]
E1 = -180.39453669484473  E_coul = 55.057398595583834
Extra cycle  E= -125.337138099261  delta_E= -2.84e-14  |g|= 9.62e-10  |ddm|= 1.54e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
exp = [3.85005810e+03 1.27980680e+02 2.00122583e+01 1.12026895e+00
 5.06816807e+00 8.69967454e-01]
E = -125.3371380992609
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:28:24 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  3850.05810495        1
[INPUT] 0    0    [1    /1   ]  127.980680323        1
[INPUT] 0    0    [1    /1   ]  20.0122583003        1
[INPUT] 0    0    [1    /1   ]  1.12026895215        1
[INPUT] 1    0    [1    /1   ]  5.0681680749         1
[INPUT] 1    0    [1    /1   ]  0.869967453584       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [3850.0581049505786, 1.0]], [0, [127.98068032292736, 1.0]], [0, [20.012258300316567, 1.0]], [0, [1.1202689521506728, 1.0]], [1, [5.068168074898645, 1.0]], [1, [0.8699674535841424, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3850.05810495]
bas 1, expnt(s) = [127.98068032]
bas 2, expnt(s) = [20.0122583]
bas 3, expnt(s) = [1.12026895]
bas 4, expnt(s) = [5.06816807]
bas 5, expnt(s) = [0.86996745]
CPU time:       162.23
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.85005810e+03 1.23485364e+03 1.27980680e+02 9.61331859e+01
 2.00122583e+01 2.39049092e+01 1.12026895e+00 2.75110236e+00
 5.06816807e+00 2.21844238e+01 8.69967454e-01 2.45111196e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.79312479271292
cond(S) = 4.582077837745508
E1 = -178.3415996861789  E_coul = 54.72443408428822
init E= -123.617165601891
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.62518320876447  LUMO = 5.13143925804447
  mo_energy =
[-3.16738063e+01 -1.75838409e+00 -6.25183209e-01 -6.25183209e-01
 -6.25183209e-01  5.13143926e+00  5.13143926e+00  5.13143926e+00
  1.09976197e+02  5.10535298e+03]
E1 = -180.40117034940863  E_coul = 55.06404615959815
cycle= 1 E= -125.33712418981  delta_E= -1.72  |g|= 0.178  |ddm|= 0.308
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.294806
diis-c [-0.08691067  1.        ]
  HOMO = -0.553367841406997  LUMO = 5.19888691014645
  mo_energy =
[-3.17561432e+01 -1.72029930e+00 -5.53367841e-01 -5.53367841e-01
 -5.53367841e-01  5.19888691e+00  5.19888691e+00  5.19888691e+00
  1.09929775e+02  5.10527738e+03]
E1 = -180.39349302110708  E_coul = 55.05635495932288
cycle= 2 E= -125.337138061784  delta_E= -1.39e-05  |g|= 0.0011  |ddm|= 0.00169
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00130527
diis-c [-1.31047712e-06 -2.13172205e-03  1.00213172e+00]
  HOMO = -0.55386564362318  LUMO = 5.19811751322737
  mo_energy =
[-3.17578170e+01 -1.72098586e+00 -5.53865644e-01 -5.53865644e-01
 -5.53865644e-01  5.19811751e+00  5.19811751e+00  5.19811751e+00
  1.09927976e+02  5.10527591e+03]
E1 = -180.39471318822132  E_coul = 55.05757508997604
cycle= 3 E= -125.337138098245  delta_E= -3.65e-08  |g|= 0.000123  |ddm|= 0.000194
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000154044
diis-c [-5.10782759e-09 -2.39391994e-04  1.06894138e-01  8.93345254e-01]
  HOMO = -0.553797952973714  LUMO = 5.19822358807838
  mo_energy =
[-3.17575574e+01 -1.72089624e+00 -5.53797953e-01 -5.53797953e-01
 -5.53797953e-01  5.19822359e+00  5.19822359e+00  5.19822359e+00
  1.09928237e+02  5.10527620e+03]
E1 = -180.39452941873466  E_coul = 55.05739131947563
cycle= 4 E= -125.337138099259  delta_E= -1.01e-09  |g|= 5.36e-06  |ddm|= 2.94e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=6.54175e-06
diis-c [-4.45849940e-14  3.31208962e-06 -1.99257236e-03  2.79796982e-02
  9.74009562e-01]
  HOMO = -0.553800699233195  LUMO = 5.19821929191988
  mo_energy =
[-3.17575678e+01 -1.72089992e+00 -5.53800699e-01 -5.53800699e-01
 -5.53800699e-01  5.19821929e+00  5.19821929e+00  5.19821929e+00
  1.09928226e+02  5.10527619e+03]
E1 = -180.39453670452218  E_coul = 55.057398605261305
cycle= 5 E= -125.337138099261  delta_E= -1.83e-12  |g|= 6.97e-09  |ddm|= 1.16e-06
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -180.39453670452218  E_coul = 55.057398605261305
  HOMO = -0.553800695430868  LUMO = 5.19821929775871
  mo_energy =
[-3.17575677e+01 -1.72089991e+00 -5.53800695e-01 -5.53800695e-01
 -5.53800695e-01  5.19821930e+00  5.19821930e+00  5.19821930e+00
  1.09928226e+02  5.10527619e+03]
E1 = -180.39453669484473  E_coul = 55.057398595583834
Extra cycle  E= -125.337138099261  delta_E= -2.84e-14  |g|= 9.62e-10  |ddm|= 1.54e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.582077837745508
E1 = -180.39453669484473  E_coul = 55.057398595583834
init E= -125.337138099261
    CPU time for initialize scf      0.04 sec, wall time      0.04 sec
  HOMO = -0.553800696021036  LUMO = 5.1982192968329
  mo_energy =
[-3.17575678e+01 -1.72089991e+00 -5.53800696e-01 -5.53800696e-01
 -5.53800696e-01  5.19821930e+00  5.19821930e+00  5.19821930e+00
  1.09928226e+02  5.10527619e+03]
E1 = -180.3945366964448  E_coul = 55.05739859718392
cycle= 1 E= -125.337138099261  delta_E= 2.84e-14  |g|= 1.61e-10  |ddm|= 2.56e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -180.3945366964448  E_coul = 55.05739859718392
  HOMO = -0.553800695922792  LUMO = 5.19821929698677
  mo_energy =
[-3.17575678e+01 -1.72089991e+00 -5.53800696e-01 -5.53800696e-01
 -5.53800696e-01  5.19821930e+00  5.19821930e+00  5.19821930e+00
  1.09928226e+02  5.10527619e+03]
E1 = -180.39453669617959  E_coul = 55.05739859691871
Extra cycle  E= -125.337138099261  delta_E=    0  |g|= 2.66e-11  |ddm|= 4.24e-11
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [3.85005810e+03 1.27980680e+02 2.00122583e+01 1.12026895e+00
 5.06816807e+00 8.69967454e-01]
grad_E = [ 1.88047514e-04 -4.74170944e-03  5.58056094e-02  5.86799034e-01
 -3.13588972e-02  1.78202078e-01]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:28:27 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  808.838424426        1
[INPUT] 0    0    [1    /1   ]  120.414512782        1
[INPUT] 0    0    [1    /1   ]  20.9811537921        1
[INPUT] 0    0    [1    /1   ]  1.4962650215         1
[INPUT] 1    0    [1    /1   ]  4.62508205937        1
[INPUT] 1    0    [1    /1   ]  0.826165409424       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [808.8384244261733, 1.0]], [0, [120.41451278151833, 1.0]], [0, [20.981153792143402, 1.0]], [0, [1.496265021502139, 1.0]], [1, [4.625082059367308, 1.0]], [1, [0.8261654094238282, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [808.83842443]
bas 1, expnt(s) = [120.41451278]
bas 2, expnt(s) = [20.98115379]
bas 3, expnt(s) = [1.49626502]
bas 4, expnt(s) = [4.62508206]
bas 5, expnt(s) = [0.82616541]
CPU time:       165.14
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.         808.83842443
 383.18751912 120.41451278  91.83836615  20.98115379  24.76777819
   1.49626502   3.41799495   4.62508206  19.78717049   0.82616541
   2.29783136]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.677870188926935
cond(S) = 7.97993004488082
E1 = -178.97962281082036  E_coul = 54.67305118220287
init E= -124.306571628617
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.646373364637467  LUMO = 4.68129585129285
  mo_energy =
[-3.20822980e+01 -1.51724998e+00 -6.46373365e-01 -6.46373365e-01
 -6.46373365e-01  4.68129585e+00  4.68129585e+00  4.68129585e+00
  1.09530086e+02  1.20885491e+03]
E1 = -182.0171312423555  E_coul = 56.266979810090845
cycle= 1 E= -125.750151432265  delta_E= -1.44  |g|= 0.194  |ddm|= 0.439
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.228373
diis-c [-0.05215404  1.        ]
  HOMO = -0.467231774880821  LUMO = 4.88224383581391
  mo_energy =
[-3.18998300e+01 -1.44090301e+00 -4.67231775e-01 -4.67231775e-01
 -4.67231775e-01  4.88224384e+00  4.88224384e+00  4.88224384e+00
  1.09769701e+02  1.20937533e+03]
E1 = -181.7714203100628  E_coul = 56.01984926484649
cycle= 2 E= -125.751571045216  delta_E= -0.00142  |g|= 0.0245  |ddm|= 0.0404
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0296584
diis-c [-5.38826992e-04  7.51498402e-02  9.24850160e-01]
  HOMO = -0.481110153562919  LUMO = 4.86154061699246
  mo_energy =
[-3.19506366e+01 -1.46263731e+00 -4.81110154e-01 -4.81110154e-01
 -4.81110154e-01  4.86154062e+00  4.86154062e+00  4.86154062e+00
  1.09718295e+02  1.20932320e+03]
E1 = -181.81010779490956  E_coul = 56.05849828810504
cycle= 3 E= -125.751609506805  delta_E= -3.85e-05  |g|= 0.00189  |ddm|= 0.0062
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00234966
diis-c [-1.81904878e-08 -1.95286062e-03  6.49102243e-02  9.37042636e-01]
  HOMO = -0.480092637841125  LUMO = 4.86307760182785
  mo_energy =
[-3.19466853e+01 -1.46105043e+00 -4.80092638e-01 -4.80092638e-01
 -4.80092638e-01  4.86307760e+00  4.86307760e+00  4.86307760e+00
  1.09722251e+02  1.20932772e+03]
E1 = -181.80717760796685  E_coul = 56.05556784166982
cycle= 4 E= -125.751609766297  delta_E= -2.59e-07  |g|= 1.65e-06  |ddm|= 0.000471
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=2.03968e-06
diis-c [-5.37311193e-13  1.26601414e-05 -5.10460030e-04 -6.50752841e-03
  1.00700533e+00]
  HOMO = -0.480093307381566  LUMO = 4.8630765702535
  mo_energy =
[-3.19466886e+01 -1.46105149e+00 -4.80093307e-01 -4.80093307e-01
 -4.80093307e-01  4.86307657e+00  4.86307657e+00  4.86307657e+00
  1.09722248e+02  1.20932771e+03]
E1 = -181.80717959856523  E_coul = 56.055569832268105
cycle= 5 E= -125.751609766297  delta_E= -8.53e-14  |g|= 1.76e-08  |ddm|= 3.23e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -181.80717959856523  E_coul = 56.055569832268105
  HOMO = -0.480093297480339  LUMO = 4.86307658467326
  mo_energy =
[-3.19466886e+01 -1.46105147e+00 -4.80093297e-01 -4.80093297e-01
 -4.80093297e-01  4.86307658e+00  4.86307658e+00  4.86307658e+00
  1.09722248e+02  1.20932771e+03]
E1 = -181.80717957166598  E_coul = 56.055569805368805
Extra cycle  E= -125.751609766297  delta_E= -5.68e-14  |g|= 2.58e-09  |ddm|= 4.29e-09
    CPU time for scf_cycle      0.08 sec, wall time      0.09 sec
exp = [808.83842443 120.41451278  20.98115379   1.49626502   4.62508206
   0.82616541]
E = -125.75160976629718
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:28:27 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  808.838424426        1
[INPUT] 0    0    [1    /1   ]  120.414512782        1
[INPUT] 0    0    [1    /1   ]  20.9811537921        1
[INPUT] 0    0    [1    /1   ]  1.4962650215         1
[INPUT] 1    0    [1    /1   ]  4.62508205937        1
[INPUT] 1    0    [1    /1   ]  0.826165409424       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [808.8384244261733, 1.0]], [0, [120.41451278151833, 1.0]], [0, [20.981153792143402, 1.0]], [0, [1.496265021502139, 1.0]], [1, [4.625082059367308, 1.0]], [1, [0.8261654094238282, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [808.83842443]
bas 1, expnt(s) = [120.41451278]
bas 2, expnt(s) = [20.98115379]
bas 3, expnt(s) = [1.49626502]
bas 4, expnt(s) = [4.62508206]
bas 5, expnt(s) = [0.82616541]
CPU time:       165.82
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.         808.83842443
 383.18751912 120.41451278  91.83836615  20.98115379  24.76777819
   1.49626502   3.41799495   4.62508206  19.78717049   0.82616541
   2.29783136]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.677870188926935
cond(S) = 7.97993004488082
E1 = -178.97962281082036  E_coul = 54.67305118220287
init E= -124.306571628617
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.646373364637467  LUMO = 4.68129585129285
  mo_energy =
[-3.20822980e+01 -1.51724998e+00 -6.46373365e-01 -6.46373365e-01
 -6.46373365e-01  4.68129585e+00  4.68129585e+00  4.68129585e+00
  1.09530086e+02  1.20885491e+03]
E1 = -182.0171312423555  E_coul = 56.266979810090845
cycle= 1 E= -125.750151432265  delta_E= -1.44  |g|= 0.194  |ddm|= 0.439
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.228373
diis-c [-0.05215404  1.        ]
  HOMO = -0.467231774880821  LUMO = 4.88224383581391
  mo_energy =
[-3.18998300e+01 -1.44090301e+00 -4.67231775e-01 -4.67231775e-01
 -4.67231775e-01  4.88224384e+00  4.88224384e+00  4.88224384e+00
  1.09769701e+02  1.20937533e+03]
E1 = -181.7714203100628  E_coul = 56.01984926484649
cycle= 2 E= -125.751571045216  delta_E= -0.00142  |g|= 0.0245  |ddm|= 0.0404
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0296584
diis-c [-5.38826992e-04  7.51498402e-02  9.24850160e-01]
  HOMO = -0.481110153562919  LUMO = 4.86154061699246
  mo_energy =
[-3.19506366e+01 -1.46263731e+00 -4.81110154e-01 -4.81110154e-01
 -4.81110154e-01  4.86154062e+00  4.86154062e+00  4.86154062e+00
  1.09718295e+02  1.20932320e+03]
E1 = -181.81010779490956  E_coul = 56.05849828810504
cycle= 3 E= -125.751609506805  delta_E= -3.85e-05  |g|= 0.00189  |ddm|= 0.0062
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00234966
diis-c [-1.81904878e-08 -1.95286062e-03  6.49102243e-02  9.37042636e-01]
  HOMO = -0.480092637841125  LUMO = 4.86307760182785
  mo_energy =
[-3.19466853e+01 -1.46105043e+00 -4.80092638e-01 -4.80092638e-01
 -4.80092638e-01  4.86307760e+00  4.86307760e+00  4.86307760e+00
  1.09722251e+02  1.20932772e+03]
E1 = -181.80717760796685  E_coul = 56.05556784166982
cycle= 4 E= -125.751609766297  delta_E= -2.59e-07  |g|= 1.65e-06  |ddm|= 0.000471
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=2.03968e-06
diis-c [-5.37311193e-13  1.26601414e-05 -5.10460030e-04 -6.50752841e-03
  1.00700533e+00]
  HOMO = -0.480093307381566  LUMO = 4.8630765702535
  mo_energy =
[-3.19466886e+01 -1.46105149e+00 -4.80093307e-01 -4.80093307e-01
 -4.80093307e-01  4.86307657e+00  4.86307657e+00  4.86307657e+00
  1.09722248e+02  1.20932771e+03]
E1 = -181.80717959856523  E_coul = 56.055569832268105
cycle= 5 E= -125.751609766297  delta_E= -8.53e-14  |g|= 1.76e-08  |ddm|= 3.23e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -181.80717959856523  E_coul = 56.055569832268105
  HOMO = -0.480093297480339  LUMO = 4.86307658467326
  mo_energy =
[-3.19466886e+01 -1.46105147e+00 -4.80093297e-01 -4.80093297e-01
 -4.80093297e-01  4.86307658e+00  4.86307658e+00  4.86307658e+00
  1.09722248e+02  1.20932771e+03]
E1 = -181.80717957166598  E_coul = 56.055569805368805
Extra cycle  E= -125.751609766297  delta_E= -5.68e-14  |g|= 2.58e-09  |ddm|= 4.29e-09
    CPU time for scf_cycle      0.08 sec, wall time      0.08 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 7.97993004488082
E1 = -181.80717957166598  E_coul = 56.055569805368805
init E= -125.751609766297
    CPU time for initialize scf      0.04 sec, wall time      0.04 sec
  HOMO = -0.480093299086889  LUMO = 4.86307658226233
  mo_energy =
[-3.19466886e+01 -1.46105148e+00 -4.80093299e-01 -4.80093299e-01
 -4.80093299e-01  4.86307658e+00  4.86307658e+00  4.86307658e+00
  1.09722248e+02  1.20932771e+03]
E1 = -181.80717957621977  E_coul = 56.05556980992259
cycle= 1 E= -125.751609766297  delta_E=    0  |g|= 4.39e-10  |ddm|= 7.32e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -181.80717957621977  E_coul = 56.05556980992259
  HOMO = -0.480093298813121  LUMO = 4.86307658267267
  mo_energy =
[-3.19466886e+01 -1.46105148e+00 -4.80093299e-01 -4.80093299e-01
 -4.80093299e-01  4.86307658e+00  4.86307658e+00  4.86307658e+00
  1.09722248e+02  1.20932771e+03]
E1 = -181.80717957544553  E_coul = 56.05556980914835
Extra cycle  E= -125.751609766297  delta_E=    0  |g|= 7.47e-11  |ddm|= 1.24e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [808.83842443 120.41451278  20.98115379   1.49626502   4.62508206
   0.82616541]
grad_E = [-2.12862294e-04  1.04909802e-02  9.85178700e-02  1.57717897e+00
 -1.06363774e-01  5.60354344e-01]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:28:30 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  3006.71952768        1
[INPUT] 0    0    [1    /1   ]  118.97298018         1
[INPUT] 0    0    [1    /1   ]  19.7119607313        1
[INPUT] 0    0    [1    /1   ]  1.18822574269        1
[INPUT] 1    0    [1    /1   ]  5.05565284874        1
[INPUT] 1    0    [1    /1   ]  0.867135240038       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [3006.719527678314, 1.0]], [0, [118.9729801799878, 1.0]], [0, [19.71196073125418, 1.0]], [0, [1.188225742686287, 1.0]], [1, [5.055652848744654, 1.0]], [1, [0.8671352400376962, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3006.71952768]
bas 1, expnt(s) = [118.97298018]
bas 2, expnt(s) = [19.71196073]
bas 3, expnt(s) = [1.18822574]
bas 4, expnt(s) = [5.05565285]
bas 5, expnt(s) = [0.86713524]
CPU time:       168.79
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.00671953e+03 1.02585201e+03 1.18972980e+02 9.10125494e+01
 1.97119607e+01 2.36353693e+01 1.18822574e+00 2.87534024e+00
 5.05565285e+00 2.21159678e+01 8.67135240e-01 2.44114141e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.776371866406922
cond(S) = 4.982257228305116
E1 = -178.48173868212524  E_coul = 54.815743682446026
init E= -123.665994999679
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.620943045623156  LUMO = 5.12221781867286
  mo_energy =
[-3.17265930e+01 -1.72274483e+00 -6.20943046e-01 -6.20943046e-01
 -6.20943046e-01  5.12221782e+00  5.12221782e+00  5.12221782e+00
  1.02535978e+02  3.95658391e+03]
E1 = -180.75652209376204  E_coul = 55.318444655548305
cycle= 1 E= -125.438077438214  delta_E= -1.77  |g|= 0.203  |ddm|= 0.327
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.326421
diis-c [-0.10655041  1.        ]
  HOMO = -0.535219256506357  LUMO = 5.20648576826089
  mo_energy =
[-3.17719345e+01 -1.68225269e+00 -5.35219257e-01 -5.35219257e-01
 -5.35219257e-01  5.20648577e+00  5.20648577e+00  5.20648577e+00
  1.02526399e+02  3.95661660e+03]
E1 = -180.72391336835273  E_coul = 55.28578329509176
cycle= 2 E= -125.438130073261  delta_E= -5.26e-05  |g|= 0.00367  |ddm|= 0.00577
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00431029
diis-c [-1.82265115e-05 -1.82132146e-03  1.00182132e+00]
  HOMO = -0.537278669475458  LUMO = 5.20327366317099
  mo_energy =
[-3.17792475e+01 -1.68512004e+00 -5.37278669e-01 -5.37278669e-01
 -5.37278669e-01  5.20327366e+00  5.20327366e+00  5.20327366e+00
  1.02518937e+02  3.95661025e+03]
E1 = -180.729268825387  E_coul = 55.29113808451054
cycle= 3 E= -125.438130740876  delta_E= -6.68e-07  |g|= 0.000542  |ddm|= 0.000851
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000670683
diis-c [-1.14084524e-08 -3.70277813e-04  1.34374689e-01  8.65995589e-01]
  HOMO = -0.536993652928494  LUMO = 5.20372220764857
  mo_energy =
[-3.17781508e+01 -1.68472942e+00 -5.36993653e-01 -5.36993653e-01
 -5.36993653e-01  5.20372221e+00  5.20372221e+00  5.20372221e+00
  1.02520039e+02  3.95661147e+03]
E1 = -180.72849226571387  E_coul = 55.290361505637776
cycle= 4 E= -125.438130760076  delta_E= -1.92e-08  |g|= 5.22e-06  |ddm|= 0.000124
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=6.13763e-06
diis-c [-1.16689511e-13  4.11039255e-06 -1.97596977e-03 -3.45490229e-03
  1.00542676e+00]
  HOMO = -0.536996185059446  LUMO = 5.20371825690045
  mo_energy =
[-3.17781599e+01 -1.68473296e+00 -5.36996185e-01 -5.36996185e-01
 -5.36996185e-01  5.20371826e+00  5.20371826e+00  5.20371826e+00
  1.02520030e+02  3.95661147e+03]
E1 = -180.7284988149873  E_coul = 55.29036805490981
cycle= 5 E= -125.438130760077  delta_E= -1.39e-12  |g|= 9.31e-09  |ddm|= 1.04e-06
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -180.7284988149873  E_coul = 55.29036805490981
  HOMO = -0.536996180258074  LUMO = 5.20371826419336
  mo_energy =
[-3.17781599e+01 -1.68473295e+00 -5.36996180e-01 -5.36996180e-01
 -5.36996180e-01  5.20371826e+00  5.20371826e+00  5.20371826e+00
  1.02520030e+02  3.95661147e+03]
E1 = -180.72849880278062  E_coul = 55.2903680427033
Extra cycle  E= -125.438130760077  delta_E= 1.71e-13  |g|= 1.21e-09  |ddm|= 1.93e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
exp = [3.00671953e+03 1.18972980e+02 1.97119607e+01 1.18822574e+00
 5.05565285e+00 8.67135240e-01]
E = -125.43813076007731
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:28:31 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  1666.90029153        1
[INPUT] 0    0    [1    /1   ]  119.851732496        1
[INPUT] 0    0    [1    /1   ]  20.4856555753        1
[INPUT] 0    0    [1    /1   ]  1.37600521385        1
[INPUT] 1    0    [1    /1   ]  4.7931786752         1
[INPUT] 1    0    [1    /1   ]  0.842160200634       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [1666.900291529975, 1.0]], [0, [119.8517324956648, 1.0]], [0, [20.48565557527882, 1.0]], [0, [1.3760052138487875, 1.0]], [1, [4.79317867519735, 1.0]], [1, [0.8421602006340737, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1666.90029153]
bas 1, expnt(s) = [119.8517325]
bas 2, expnt(s) = [20.48565558]
bas 3, expnt(s) = [1.37600521]
bas 4, expnt(s) = [4.79317868]
bas 5, expnt(s) = [0.8421602]
CPU time:       169.50
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.66690029e+03 6.59093823e+02 1.19851732e+02 9.15162596e+01
 2.04856556e+01 2.43277769e+01 1.37600521e+00 3.20981560e+00
 4.79317868e+00 2.06901632e+01 8.42160201e-01 2.35357360e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.719751488806306
cond(S) = 5.808220434576117
E1 = -178.97507078125147  E_coul = 54.81365698200173
init E= -124.16141379925
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.629680987864098  LUMO = 4.86270456535798
  mo_energy =
[-3.19415550e+01 -1.60814165e+00 -6.29680988e-01 -6.29680988e-01
 -6.29680988e-01  4.86270457e+00  4.86270457e+00  4.86270457e+00
  1.06255577e+02  2.23651661e+03]
E1 = -181.6284094199855  E_coul = 55.937411592770665
cycle= 1 E= -125.690997827215  delta_E= -1.53  |g|= 0.203  |ddm|= 0.391
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.27959
diis-c [-0.0781705  1.       ]
  HOMO = -0.491626172107838  LUMO = 5.01321630979717
  mo_energy =
[-3.18516916e+01 -1.55056115e+00 -4.91626172e-01 -4.91626172e-01
 -4.91626172e-01  5.01321631e+00  5.01321631e+00  5.01321631e+00
  1.06396945e+02  2.23690110e+03]
E1 = -181.47890445515074  E_coul = 55.78732938453881
cycle= 2 E= -125.691575070612  delta_E= -0.000577  |g|= 0.0153  |ddm|= 0.0247
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0183778
diis-c [-3.09446559e-04  1.87069714e-02  9.81293029e-01]
  HOMO = -0.500649351386727  LUMO = 4.99948436303832
  mo_energy =
[-3.18846899e+01 -1.56409012e+00 -5.00649351e-01 -5.00649351e-01
 -5.00649351e-01  4.99948436e+00  4.99948436e+00  4.99948436e+00
  1.06363589e+02  2.23686842e+03]
E1 = -181.50357488585774  E_coul = 55.81198571918468
cycle= 3 E= -125.691589166673  delta_E= -1.41e-05  |g|= 0.00212  |ddm|= 0.00394
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00261764
diis-c [-2.81733070e-08 -8.54276616e-04  1.21398731e-01  8.79455545e-01]
  HOMO = -0.499521586599727  LUMO = 5.00121155312618
  mo_energy =
[-3.18803797e+01 -1.56240770e+00 -4.99521587e-01 -4.99521587e-01
 -4.99521587e-01  5.00121155e+00  5.00121155e+00  5.00121155e+00
  1.06367922e+02  2.23687322e+03]
E1 = -181.50041884041374  E_coul = 55.80882936593233
cycle= 4 E= -125.691589474481  delta_E= -3.08e-07  |g|= 6.22e-06  |ddm|= 0.000505
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=7.28538e-06
diis-c [-3.87786573e-13  6.61879398e-06 -1.51499505e-03 -8.12854113e-03
  1.00963692e+00]
  HOMO = -0.499524585135345  LUMO = 5.00120708156124
  mo_energy =
[-3.18803902e+01 -1.56241222e+00 -4.99524585e-01 -4.99524585e-01
 -4.99524585e-01  5.00120708e+00  5.00120708e+00  5.00120708e+00
  1.06367911e+02  2.23687321e+03]
E1 = -181.50042672593787  E_coul = 55.80883725145449
cycle= 5 E= -125.691589474483  delta_E= -1.96e-12  |g|= 1.54e-08  |ddm|= 1.26e-06
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -181.50042672593787  E_coul = 55.80883725145449
  HOMO = -0.499524577067058  LUMO = 5.00120709250106
  mo_energy =
[-3.18803902e+01 -1.56241221e+00 -4.99524577e-01 -4.99524577e-01
 -4.99524577e-01  5.00120709e+00  5.00120709e+00  5.00120709e+00
  1.06367911e+02  2.23687321e+03]
E1 = -181.5004267048736  E_coul = 55.80883723039019
Extra cycle  E= -125.691589474483  delta_E= -2.84e-14  |g|= 2.04e-09  |ddm|= 3.34e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
exp = [1.66690029e+03 1.19851732e+02 2.04856556e+01 1.37600521e+00
 4.79317868e+00 8.42160201e-01]
E = -125.69158947448341
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:28:32 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  1185.95046729        1
[INPUT] 0    0    [1    /1   ]  120.167174878        1
[INPUT] 0    0    [1    /1   ]  20.7633858759        1
[INPUT] 0    0    [1    /1   ]  1.44341169766        1
[INPUT] 1    0    [1    /1   ]  4.69895931767        1
[INPUT] 1    0    [1    /1   ]  0.833195005563       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [1185.9504672901971, 1.0]], [0, [120.16717487801941, 1.0]], [0, [20.76338587591146, 1.0]], [0, [1.443411697660044, 1.0]], [1, [4.698959317668227, 1.0]], [1, [0.833195005563368, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1185.95046729]
bas 1, expnt(s) = [120.16717488]
bas 2, expnt(s) = [20.76338588]
bas 3, expnt(s) = [1.4434117]
bas 4, expnt(s) = [4.69895932]
bas 5, expnt(s) = [0.83319501]
CPU time:       170.20
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.18595047e+03 5.10581338e+02 1.20167175e+02 9.16968491e+01
 2.07633859e+01 2.45747244e+01 1.44341170e+00 3.32703745e+00
 4.69895932e+00 2.01830362e+01 8.33195006e-01 2.32229675e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.696651613755208
cond(S) = 6.5557430048135314
E1 = -179.08432975037294  E_coul = 54.747709541496164
init E= -124.336620208877
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.638138617857772  LUMO = 4.7622648268409
  mo_energy =
[-3.20475526e+01 -1.56105333e+00 -6.38138618e-01 -6.38138618e-01
 -6.38138618e-01  4.76226483e+00  4.76226483e+00  4.76226483e+00
  1.07898440e+02  1.65022588e+03]
E1 = -181.92916185267666  E_coul = 56.13542215388667
cycle= 1 E= -125.79373969879  delta_E= -1.46  |g|= 0.197  |ddm|= 0.417
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.245673
diis-c [-0.06035519  1.        ]
  HOMO = -0.477586682806587  LUMO = 4.94064431689288
  mo_energy =
[-3.19033936e+01 -1.49359184e+00 -4.77586683e-01 -4.77586683e-01
 -4.77586683e-01  4.94064432e+00  4.94064432e+00  4.94064432e+00
  1.08099293e+02  1.65071474e+03]
E1 = -181.7272269999942  E_coul = 55.93249390574057
cycle= 2 E= -125.794733094254  delta_E= -0.000993  |g|= 0.0204  |ddm|= 0.0333
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0245342
diis-c [-4.63850229e-04  4.58155686e-02  9.54184431e-01]
  HOMO = -0.489389437549182  LUMO = 4.92287745049339
  mo_energy =
[-3.19465838e+01 -1.51173688e+00 -4.89389438e-01 -4.89389438e-01
 -4.89389438e-01  4.92287745e+00  4.92287745e+00  4.92287745e+00
  1.08055639e+02  1.65067115e+03]
E1 = -181.75986018788453  E_coul = 55.96510122964107
cycle= 3 E= -125.794758958243  delta_E= -2.59e-05  |g|= 0.00223  |ddm|= 0.00522
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00275635
diis-c [-2.66636210e-08 -1.32623314e-03  9.55399377e-02  9.05786295e-01]
  HOMO = -0.488196147323689  LUMO = 4.92468877749953
  mo_energy =
[-3.19420011e+01 -1.50991018e+00 -4.88196147e-01 -4.88196147e-01
 -4.88196147e-01  4.92468878e+00  4.92468878e+00  4.92468878e+00
  1.08060241e+02  1.65067632e+03]
E1 = -181.75647556520337  E_coul = 55.9617162576249
cycle= 4 E= -125.794759307578  delta_E= -3.49e-07  |g|= 4.72e-06  |ddm|= 0.000543
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=5.65393e-06
diis-c [-4.98380723e-13  8.79095214e-06 -1.02005292e-03 -7.47763715e-03
  1.00848890e+00]
  HOMO = -0.488198440341606  LUMO = 4.92468539944388
  mo_energy =
[-3.19420095e+01 -1.50991371e+00 -4.88198440e-01 -4.88198440e-01
 -4.88198440e-01  4.92468540e+00  4.92468540e+00  4.92468540e+00
  1.08060232e+02  1.65067631e+03]
E1 = -181.7564817313853  E_coul = 55.96172242380565
cycle= 5 E= -125.79475930758  delta_E= -1.18e-12  |g|= 1.77e-08  |ddm|= 9.87e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -181.7564817313853  E_coul = 55.96172242380565
  HOMO = -0.488198430789597  LUMO = 4.92468541247965
  mo_energy =
[-3.19420094e+01 -1.50991370e+00 -4.88198431e-01 -4.88198431e-01
 -4.88198431e-01  4.92468541e+00  4.92468541e+00  4.92468541e+00
  1.08060232e+02  1.65067631e+03]
E1 = -181.75648170606956  E_coul = 55.96172239848983
Extra cycle  E= -125.79475930758  delta_E= -8.53e-14  |g|= 2.43e-09  |ddm|= 4.03e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
exp = [1.18595047e+03 1.20167175e+02 2.07633859e+01 1.44341170e+00
 4.69895932e+00 8.33195006e-01]
E = -125.79475930757974
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:28:32 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  1185.95046729        1
[INPUT] 0    0    [1    /1   ]  120.167174878        1
[INPUT] 0    0    [1    /1   ]  20.7633858759        1
[INPUT] 0    0    [1    /1   ]  1.44341169766        1
[INPUT] 1    0    [1    /1   ]  4.69895931767        1
[INPUT] 1    0    [1    /1   ]  0.833195005563       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [1185.9504672901971, 1.0]], [0, [120.16717487801941, 1.0]], [0, [20.76338587591146, 1.0]], [0, [1.443411697660044, 1.0]], [1, [4.698959317668227, 1.0]], [1, [0.833195005563368, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1185.95046729]
bas 1, expnt(s) = [120.16717488]
bas 2, expnt(s) = [20.76338588]
bas 3, expnt(s) = [1.4434117]
bas 4, expnt(s) = [4.69895932]
bas 5, expnt(s) = [0.83319501]
CPU time:       170.91
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.18595047e+03 5.10581338e+02 1.20167175e+02 9.16968491e+01
 2.07633859e+01 2.45747244e+01 1.44341170e+00 3.32703745e+00
 4.69895932e+00 2.01830362e+01 8.33195006e-01 2.32229675e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.696651613755208
cond(S) = 6.5557430048135314
E1 = -179.08432975037294  E_coul = 54.747709541496164
init E= -124.336620208877
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.638138617857772  LUMO = 4.7622648268409
  mo_energy =
[-3.20475526e+01 -1.56105333e+00 -6.38138618e-01 -6.38138618e-01
 -6.38138618e-01  4.76226483e+00  4.76226483e+00  4.76226483e+00
  1.07898440e+02  1.65022588e+03]
E1 = -181.92916185267666  E_coul = 56.13542215388667
cycle= 1 E= -125.79373969879  delta_E= -1.46  |g|= 0.197  |ddm|= 0.417
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.245673
diis-c [-0.06035519  1.        ]
  HOMO = -0.477586682806587  LUMO = 4.94064431689288
  mo_energy =
[-3.19033936e+01 -1.49359184e+00 -4.77586683e-01 -4.77586683e-01
 -4.77586683e-01  4.94064432e+00  4.94064432e+00  4.94064432e+00
  1.08099293e+02  1.65071474e+03]
E1 = -181.7272269999942  E_coul = 55.93249390574057
cycle= 2 E= -125.794733094254  delta_E= -0.000993  |g|= 0.0204  |ddm|= 0.0333
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0245342
diis-c [-4.63850229e-04  4.58155686e-02  9.54184431e-01]
  HOMO = -0.489389437549182  LUMO = 4.92287745049339
  mo_energy =
[-3.19465838e+01 -1.51173688e+00 -4.89389438e-01 -4.89389438e-01
 -4.89389438e-01  4.92287745e+00  4.92287745e+00  4.92287745e+00
  1.08055639e+02  1.65067115e+03]
E1 = -181.75986018788453  E_coul = 55.96510122964107
cycle= 3 E= -125.794758958243  delta_E= -2.59e-05  |g|= 0.00223  |ddm|= 0.00522
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00275635
diis-c [-2.66636210e-08 -1.32623314e-03  9.55399377e-02  9.05786295e-01]
  HOMO = -0.488196147323689  LUMO = 4.92468877749953
  mo_energy =
[-3.19420011e+01 -1.50991018e+00 -4.88196147e-01 -4.88196147e-01
 -4.88196147e-01  4.92468878e+00  4.92468878e+00  4.92468878e+00
  1.08060241e+02  1.65067632e+03]
E1 = -181.75647556520337  E_coul = 55.9617162576249
cycle= 4 E= -125.794759307578  delta_E= -3.49e-07  |g|= 4.72e-06  |ddm|= 0.000543
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=5.65393e-06
diis-c [-4.98380723e-13  8.79095214e-06 -1.02005292e-03 -7.47763715e-03
  1.00848890e+00]
  HOMO = -0.488198440341606  LUMO = 4.92468539944388
  mo_energy =
[-3.19420095e+01 -1.50991371e+00 -4.88198440e-01 -4.88198440e-01
 -4.88198440e-01  4.92468540e+00  4.92468540e+00  4.92468540e+00
  1.08060232e+02  1.65067631e+03]
E1 = -181.7564817313853  E_coul = 55.96172242380565
cycle= 5 E= -125.79475930758  delta_E= -1.18e-12  |g|= 1.77e-08  |ddm|= 9.87e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -181.7564817313853  E_coul = 55.96172242380565
  HOMO = -0.488198430789597  LUMO = 4.92468541247965
  mo_energy =
[-3.19420094e+01 -1.50991370e+00 -4.88198431e-01 -4.88198431e-01
 -4.88198431e-01  4.92468541e+00  4.92468541e+00  4.92468541e+00
  1.08060232e+02  1.65067631e+03]
E1 = -181.75648170606956  E_coul = 55.96172239848983
Extra cycle  E= -125.79475930758  delta_E= -8.53e-14  |g|= 2.43e-09  |ddm|= 4.03e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 6.5557430048135314
E1 = -181.75648170606956  E_coul = 55.96172239848983
init E= -125.79475930758
    CPU time for initialize scf      0.04 sec, wall time      0.04 sec
  HOMO = -0.488198432301736  LUMO = 4.92468541018887
  mo_energy =
[-3.19420095e+01 -1.50991370e+00 -4.88198432e-01 -4.88198432e-01
 -4.88198432e-01  4.92468541e+00  4.92468541e+00  4.92468541e+00
  1.08060232e+02  1.65067631e+03]
E1 = -181.75648171033194  E_coul = 55.96172240275228
cycle= 1 E= -125.79475930758  delta_E= 8.53e-14  |g|= 4.14e-10  |ddm|= 6.84e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -181.75648171033194  E_coul = 55.96172240275228
  HOMO = -0.488198432045004  LUMO = 4.92468541057718
  mo_energy =
[-3.19420095e+01 -1.50991370e+00 -4.88198432e-01 -4.88198432e-01
 -4.88198432e-01  4.92468541e+00  4.92468541e+00  4.92468541e+00
  1.08060232e+02  1.65067631e+03]
E1 = -181.75648170961074  E_coul = 55.96172240203104
Extra cycle  E= -125.79475930758  delta_E= -4.26e-14  |g|= 7e-11  |ddm|= 1.16e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.18595047e+03 1.20167175e+02 2.07633859e+01 1.44341170e+00
 4.69895932e+00 8.33195006e-01]
grad_E = [ 4.07547756e-04  1.00496014e-03  1.14787069e-01  1.45770901e+00
 -9.22062987e-02  5.00052527e-01]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:28:35 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  577.290231887        1
[INPUT] 0    0    [1    /1   ]  81.9844107257        1
[INPUT] 0    0    [1    /1   ]  18.2084129579        1
[INPUT] 0    0    [1    /1   ]  1.3995809739         1
[INPUT] 1    0    [1    /1   ]  5.08676263035        1
[INPUT] 1    0    [1    /1   ]  0.863825287916       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [577.2902318868946, 1.0]], [0, [81.98441072570904, 1.0]], [0, [18.208412957914636, 1.0]], [0, [1.3995809739033491, 1.0]], [1, [5.086762630345434, 1.0]], [1, [0.863825287916482, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [577.29023189]
bas 1, expnt(s) = [81.98441073]
bas 2, expnt(s) = [18.20841296]
bas 3, expnt(s) = [1.39958097]
bas 4, expnt(s) = [5.08676263]
bas 5, expnt(s) = [0.86382529]
CPU time:       173.92
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.         577.29023189
 297.55049769  81.98441073  68.83566048  18.20841296  22.26994247
   1.39958097   3.25097438   5.08676263  22.28621073   0.86382529
   2.42949933]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.713542724926935
cond(S) = 10.027692818510719
E1 = -179.88204618089807  E_coul = 54.82948083502095
init E= -125.052565345877
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.630930557551022  LUMO = 5.12531527946083
  mo_energy =
[-3.22249998e+01 -1.61218690e+00 -6.30930558e-01 -6.30930558e-01
 -6.30930558e-01  5.12531528e+00  5.12531528e+00  5.12531528e+00
  7.36601540e+01  8.15321710e+02]
E1 = -182.3808424150221  E_coul = 56.089810420304595
cycle= 1 E= -126.291031994718  delta_E= -1.24  |g|= 0.233  |ddm|= 0.432
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.251013
diis-c [-0.06300774  1.        ]
  HOMO = -0.483754814466822  LUMO = 5.28721655059652
  mo_energy =
[-3.21012503e+01 -1.54852307e+00 -4.83754814e-01 -4.83754814e-01
 -4.83754814e-01  5.28721655e+00  5.28721655e+00  5.28721655e+00
  7.37910029e+01  8.15692547e+02]
E1 = -182.22735599004426  E_coul = 55.935572130950405
cycle= 2 E= -126.291783859094  delta_E= -0.000752  |g|= 0.0173  |ddm|= 0.0263
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0197528
diis-c [-3.55396630e-04  2.30174544e-02  9.76982546e-01]
  HOMO = -0.493014847601584  LUMO = 5.27246614906783
  mo_energy =
[-3.21347809e+01 -1.56251489e+00 -4.93014848e-01 -4.93014848e-01
 -4.93014848e-01  5.27246615e+00  5.27246615e+00  5.27246615e+00
  7.37576119e+01  8.15661219e+02]
E1 = -182.25199436598496  E_coul = 55.96019575450784
cycle= 3 E= -126.291798611477  delta_E= -1.48e-05  |g|= 0.00213  |ddm|= 0.00386
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00260679
diis-c [-3.93624543e-08 -1.90117339e-03  1.09580334e-01  8.92320839e-01]
  HOMO = -0.491947280851788  LUMO = 5.27419219451519
  mo_energy =
[-3.21305045e+01 -1.56092759e+00 -4.91947281e-01 -4.91947281e-01
 -4.91947281e-01  5.27419219e+00  5.27419219e+00  5.27419219e+00
  7.37617368e+01  8.15666124e+02]
E1 = -182.24898897326298  E_coul = 55.957190075344265
cycle= 4 E= -126.291798897919  delta_E= -2.86e-07  |g|= 7.32e-06  |ddm|= 0.000474
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=8.35658e-06
diis-c [-1.42956312e-12  2.18435081e-05 -1.65469331e-03 -1.01664072e-02
  1.01179926e+00]
  HOMO = -0.491950511976405  LUMO = 5.27418705865078
  mo_energy =
[-3.21305163e+01 -1.56093254e+00 -4.91950512e-01 -4.91950512e-01
 -4.91950512e-01  5.27418706e+00  5.27418706e+00  5.27418706e+00
  7.37617245e+01  8.15666111e+02]
E1 = -182.24899730782872  E_coul = 55.957198409907775
cycle= 5 E= -126.291798897921  delta_E= -2.23e-12  |g|= 3.23e-08  |ddm|= 1.31e-06
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -182.24899730782872  E_coul = 55.957198409907775
  HOMO = -0.491950496818694  LUMO = 5.27418708152534
  mo_energy =
[-3.21305162e+01 -1.56093252e+00 -4.91950497e-01 -4.91950497e-01
 -4.91950497e-01  5.27418708e+00  5.27418708e+00  5.27418708e+00
  7.37617246e+01  8.15666111e+02]
E1 = -182.2489972684642  E_coul = 55.957198370543274
Extra cycle  E= -126.291798897921  delta_E= 1.42e-14  |g|= 4e-09  |ddm|= 6.13e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
exp = [577.29023189  81.98441073  18.20841296   1.39958097   5.08676263
   0.86382529]
E = -126.29179889792093
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:28:36 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  577.290231887        1
[INPUT] 0    0    [1    /1   ]  81.9844107257        1
[INPUT] 0    0    [1    /1   ]  18.2084129579        1
[INPUT] 0    0    [1    /1   ]  1.3995809739         1
[INPUT] 1    0    [1    /1   ]  5.08676263035        1
[INPUT] 1    0    [1    /1   ]  0.863825287916       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [577.2902318868946, 1.0]], [0, [81.98441072570904, 1.0]], [0, [18.208412957914636, 1.0]], [0, [1.3995809739033491, 1.0]], [1, [5.086762630345434, 1.0]], [1, [0.863825287916482, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [577.29023189]
bas 1, expnt(s) = [81.98441073]
bas 2, expnt(s) = [18.20841296]
bas 3, expnt(s) = [1.39958097]
bas 4, expnt(s) = [5.08676263]
bas 5, expnt(s) = [0.86382529]
CPU time:       174.63
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.         577.29023189
 297.55049769  81.98441073  68.83566048  18.20841296  22.26994247
   1.39958097   3.25097438   5.08676263  22.28621073   0.86382529
   2.42949933]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.713542724926935
cond(S) = 10.027692818510719
E1 = -179.88204618089807  E_coul = 54.82948083502095
init E= -125.052565345877
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.630930557551022  LUMO = 5.12531527946083
  mo_energy =
[-3.22249998e+01 -1.61218690e+00 -6.30930558e-01 -6.30930558e-01
 -6.30930558e-01  5.12531528e+00  5.12531528e+00  5.12531528e+00
  7.36601540e+01  8.15321710e+02]
E1 = -182.3808424150221  E_coul = 56.089810420304595
cycle= 1 E= -126.291031994718  delta_E= -1.24  |g|= 0.233  |ddm|= 0.432
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.251013
diis-c [-0.06300774  1.        ]
  HOMO = -0.483754814466822  LUMO = 5.28721655059652
  mo_energy =
[-3.21012503e+01 -1.54852307e+00 -4.83754814e-01 -4.83754814e-01
 -4.83754814e-01  5.28721655e+00  5.28721655e+00  5.28721655e+00
  7.37910029e+01  8.15692547e+02]
E1 = -182.22735599004426  E_coul = 55.935572130950405
cycle= 2 E= -126.291783859094  delta_E= -0.000752  |g|= 0.0173  |ddm|= 0.0263
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0197528
diis-c [-3.55396630e-04  2.30174544e-02  9.76982546e-01]
  HOMO = -0.493014847601584  LUMO = 5.27246614906783
  mo_energy =
[-3.21347809e+01 -1.56251489e+00 -4.93014848e-01 -4.93014848e-01
 -4.93014848e-01  5.27246615e+00  5.27246615e+00  5.27246615e+00
  7.37576119e+01  8.15661219e+02]
E1 = -182.25199436598496  E_coul = 55.96019575450784
cycle= 3 E= -126.291798611477  delta_E= -1.48e-05  |g|= 0.00213  |ddm|= 0.00386
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00260679
diis-c [-3.93624543e-08 -1.90117339e-03  1.09580334e-01  8.92320839e-01]
  HOMO = -0.491947280851788  LUMO = 5.27419219451519
  mo_energy =
[-3.21305045e+01 -1.56092759e+00 -4.91947281e-01 -4.91947281e-01
 -4.91947281e-01  5.27419219e+00  5.27419219e+00  5.27419219e+00
  7.37617368e+01  8.15666124e+02]
E1 = -182.24898897326298  E_coul = 55.957190075344265
cycle= 4 E= -126.291798897919  delta_E= -2.86e-07  |g|= 7.32e-06  |ddm|= 0.000474
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=8.35658e-06
diis-c [-1.42956312e-12  2.18435081e-05 -1.65469331e-03 -1.01664072e-02
  1.01179926e+00]
  HOMO = -0.491950511976405  LUMO = 5.27418705865078
  mo_energy =
[-3.21305163e+01 -1.56093254e+00 -4.91950512e-01 -4.91950512e-01
 -4.91950512e-01  5.27418706e+00  5.27418706e+00  5.27418706e+00
  7.37617245e+01  8.15666111e+02]
E1 = -182.24899730782872  E_coul = 55.957198409907775
cycle= 5 E= -126.291798897921  delta_E= -2.23e-12  |g|= 3.23e-08  |ddm|= 1.31e-06
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -182.24899730782872  E_coul = 55.957198409907775
  HOMO = -0.491950496818694  LUMO = 5.27418708152534
  mo_energy =
[-3.21305162e+01 -1.56093252e+00 -4.91950497e-01 -4.91950497e-01
 -4.91950497e-01  5.27418708e+00  5.27418708e+00  5.27418708e+00
  7.37617246e+01  8.15666111e+02]
E1 = -182.2489972684642  E_coul = 55.957198370543274
Extra cycle  E= -126.291798897921  delta_E= 1.42e-14  |g|= 4e-09  |ddm|= 6.13e-09
    CPU time for scf_cycle      0.08 sec, wall time      0.08 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 10.027692818510719
E1 = -182.2489972684642  E_coul = 55.957198370543274
init E= -126.291798897921
    CPU time for initialize scf      0.04 sec, wall time      0.04 sec
  HOMO = -0.491950499132948  LUMO = 5.27418707778524
  mo_energy =
[-3.21305162e+01 -1.56093252e+00 -4.91950499e-01 -4.91950499e-01
 -4.91950499e-01  5.27418708e+00  5.27418708e+00  5.27418708e+00
  7.37617245e+01  8.15666111e+02]
E1 = -182.24899727491805  E_coul = 55.95719837699709
cycle= 1 E= -126.291798897921  delta_E= -2.84e-14  |g|= 6.65e-10  |ddm|= 1.02e-09
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -182.24899727491805  E_coul = 55.95719837699709
  HOMO = -0.491950498748374  LUMO = 5.2741870784044
  mo_energy =
[-3.21305162e+01 -1.56093252e+00 -4.91950499e-01 -4.91950499e-01
 -4.91950499e-01  5.27418708e+00  5.27418708e+00  5.27418708e+00
  7.37617245e+01  8.15666111e+02]
E1 = -182.24899727385107  E_coul = 55.957198375930204
Extra cycle  E= -126.291798897921  delta_E= 8.53e-14  |g|= 1.1e-10  |ddm|= 1.68e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
exp = [577.29023189  81.98441073  18.20841296   1.39958097   5.08676263
   0.86382529]
grad_E = [ 5.24665838e-04 -1.39262358e-02  1.53153150e-01  1.35709888e+00
 -2.29272680e-02  2.72913070e-01]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:28:39 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  1e-09                1
[INPUT] 0    0    [1    /1   ]  57.3552022171        1
[INPUT] 0    0    [1    /1   ]  16.1717957381        1
[INPUT] 0    0    [1    /1   ]  1.33542874006        1
[INPUT] 1    0    [1    /1   ]  4.91758514003        1
[INPUT] 1    0    [1    /1   ]  0.850042270597       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [1e-09, 1.0]], [0, [57.35520221710829, 1.0]], [0, [16.171795738127273, 1.0]], [0, [1.335428740060762, 1.0]], [1, [4.9175851400299475, 1.0]], [1, [0.8500422705971014, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1.e-09]
bas 1, expnt(s) = [57.35520222]
bas 2, expnt(s) = [16.17179574]
bas 3, expnt(s) = [1.33542874]
bas 4, expnt(s) = [4.91758514]
bas 5, expnt(s) = [0.85004227]
CPU time:       177.54
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.00000000e-09 4.49277867e-07 5.73552022e+01 5.26556085e+01
 1.61717957e+01 2.03743475e+01 1.33542874e+00 3.13856092e+00
 4.91758514e+00 2.13635909e+01 8.50042271e-01 2.38114063e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.730310477787924
cond(S) = 9.156187192063648
E1 = -174.15799959169766  E_coul = 54.35601486471544
init E= -119.801984726982
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.643462789463624  LUMO = -1.36077475813698e-05
  mo_energy =
[-2.98200722e+01 -1.47681926e+00 -6.43462789e-01 -6.43462789e-01
 -6.43462789e-01 -1.36077476e-05  4.94324537e+00  4.94324537e+00
  4.94324537e+00  5.36504591e+01]
E1 = -176.25464149523046  E_coul = 55.44596266033289
cycle= 1 E= -120.808678834898  delta_E= -1.01  |g|= 0.14  |ddm|= 0.378
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.135195
diis-c [-0.0182778  1.       ]
  HOMO = -0.506423829165795  LUMO = 1.50045428134714e-09
  mo_energy =
[-2.97542936e+01 -1.40820097e+00 -5.06423829e-01 -5.06423829e-01
 -5.06423829e-01  1.50045428e-09  5.09378403e+00  5.09378403e+00
  5.09378403e+00  5.37320327e+01]
E1 = -176.09988486686092  E_coul = 55.290491809911174
cycle= 2 E= -120.80939305695  delta_E= -0.000714  |g|= 0.0178  |ddm|= 0.0268
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0190806
diis-c [-1.79519855e-04  9.17186552e-02  9.08281345e-01]
  HOMO = -0.515125374829361  LUMO = 1.50044998951567e-09
  mo_energy =
[-2.97858725e+01 -1.42108445e+00 -5.15125375e-01 -5.15125375e-01
 -5.15125375e-01  1.50044999e-09  5.08037216e+00  5.08037216e+00
  5.08037216e+00  5.37012609e+01]
E1 = -176.12358938967782  E_coul = 55.31418061027042
cycle= 3 E= -120.809408779407  delta_E= -1.57e-05  |g|= 0.000958  |ddm|= 0.00374
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00121091
diis-c [-1.81721922e-09 -4.03492753e-03  3.88620552e-02  9.65172872e-01]
  HOMO = -0.514668076696176  LUMO = 1.50045018975478e-09
  mo_energy =
[-2.97838855e+01 -1.42045047e+00 -5.14668077e-01 -5.14668077e-01
 -5.14668077e-01  1.50045019e-09  5.08109938e+00  5.08109938e+00
  5.08109938e+00  5.37029522e+01]
E1 = -176.1221433831904  E_coul = 55.31273453717439
cycle= 4 E= -120.809408846016  delta_E= -6.66e-08  |g|= 1.55e-06  |ddm|= 0.000232
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.38586e-06
diis-c [-6.58038721e-18  1.01499461e-04 -9.51047535e-04 -2.46309118e-02
  1.02548046e+00]
  HOMO = -0.514667636382445  LUMO = 1.50045019001978e-09
  mo_energy =
[-2.97838849e+01 -1.42044983e+00 -5.14667636e-01 -5.14667636e-01
 -5.14667636e-01  1.50045019e-09  5.08109990e+00  5.08109990e+00
  5.08109990e+00  5.37029530e+01]
E1 = -176.12214242190052  E_coul = 55.31273357588442
cycle= 5 E= -120.809408846016  delta_E= -8.53e-14  |g|= 2.28e-09  |ddm|= 1.52e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -176.12214242190052  E_coul = 55.31273357588442
  HOMO = -0.51466763770427  LUMO = 1.50045018992207e-09
  mo_energy =
[-2.97838849e+01 -1.42044983e+00 -5.14667638e-01 -5.14667638e-01
 -5.14667638e-01  1.50045019e-09  5.08109990e+00  5.08109990e+00
  5.08109990e+00  5.37029530e+01]
E1 = -176.12214242567916  E_coul = 55.31273357966314
Extra cycle  E= -120.809408846016  delta_E= 7.11e-14  |g|= 3.99e-10  |ddm|= 5.98e-10
    CPU time for scf_cycle      0.08 sec, wall time      0.08 sec
exp = [1.00000000e-09 5.73552022e+01 1.61717957e+01 1.33542874e+00
 4.91758514e+00 8.50042271e-01]
E = -120.80940884601603
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:28:40 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  519.561208698        1
[INPUT] 0    0    [1    /1   ]  79.5214898748        1
[INPUT] 0    0    [1    /1   ]  18.0047512359        1
[INPUT] 0    0    [1    /1   ]  1.39316575052        1
[INPUT] 1    0    [1    /1   ]  5.06984488131        1
[INPUT] 1    0    [1    /1   ]  0.862446986185       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [519.5612086983051, 1.0]], [0, [79.52148987484897, 1.0]], [0, [18.0047512359359, 1.0]], [0, [1.3931657505190904, 1.0]], [1, [5.069844881313886, 1.0]], [1, [0.862446986184544, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [519.5612087]
bas 1, expnt(s) = [79.52148987]
bas 2, expnt(s) = [18.00475124]
bas 3, expnt(s) = [1.39316575]
bas 4, expnt(s) = [5.06984488]
bas 5, expnt(s) = [0.86244699]
CPU time:       178.24
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.         519.5612087
 274.94293415  79.52148987  67.27882613  18.00475124  22.08286249
   1.39316575   3.23979191   5.06984488  22.19359887   0.86244699
   2.42465473]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.717138485585364
cond(S) = 10.707221078182204
E1 = -179.9719863638096  E_coul = 54.824558450151514
init E= -125.147427913658
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.629995385109102  LUMO = 5.10947052844789
  mo_energy =
[-3.22389698e+01 -1.61833824e+00 -6.29995385e-01 -6.29995385e-01
 -6.29995385e-01  5.10947053e+00  5.10947053e+00  5.10947053e+00
  7.15667329e+01  7.43983943e+02]
E1 = -182.36267003122882  E_coul = 56.041915570286825
cycle= 1 E= -126.320754460942  delta_E= -1.17  |g|= 0.227  |ddm|= 0.433
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.235988
diis-c [-0.05569034  1.        ]
  HOMO = -0.48639819400699  LUMO = 5.26698156731354
  mo_energy =
[-3.21234502e+01 -1.55717580e+00 -4.86398194e-01 -4.86398194e-01
 -4.86398194e-01  5.26698157e+00  5.26698157e+00  5.26698157e+00
  7.16861401e+01  7.44327966e+02]
E1 = -182.21559542802603  E_coul = 55.89413187340519
cycle= 2 E= -126.321463554621  delta_E= -0.000709  |g|= 0.0167  |ddm|= 0.0254
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0189996
diis-c [-3.30284066e-04  2.30078225e-02  9.76992178e-01]
  HOMO = -0.495297476326829  LUMO = 5.25286353954918
  mo_energy =
[-3.21554959e+01 -1.57058621e+00 -4.95297476e-01 -4.95297476e-01
 -4.95297476e-01  5.25286354e+00  5.25286354e+00  5.25286354e+00
  7.16542303e+01  7.44298093e+02]
E1 = -182.23926473551515  E_coul = 55.91778759453473
cycle= 3 E= -126.32147714098  delta_E= -1.36e-05  |g|= 0.00205  |ddm|= 0.00371
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00251056
diis-c [-3.77469638e-08 -2.08549625e-03  1.09254238e-01  8.92831259e-01]
  HOMO = -0.494271497742923  LUMO = 5.25451688606024
  mo_energy =
[-3.21513844e+01 -1.56906774e+00 -4.94271498e-01 -4.94271498e-01
 -4.94271498e-01  5.25451689e+00  5.25451689e+00  5.25451689e+00
  7.16581783e+01  7.44302802e+02]
E1 = -182.23636496209892  E_coul = 55.91488755491982
cycle= 4 E= -126.321477407179  delta_E= -2.66e-07  |g|= 6.78e-06  |ddm|= 0.000457
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=7.80309e-06
diis-c [-1.45188302e-12  2.48657715e-05 -1.66052475e-03 -1.03818281e-02
  1.01201749e+00]
  HOMO = -0.49427447189901  LUMO = 5.25451215294424
  mo_energy =
[-3.21513955e+01 -1.56907228e+00 -4.94274472e-01 -4.94274472e-01
 -4.94274472e-01  5.25451215e+00  5.25451215e+00  5.25451215e+00
  7.16581668e+01  7.44302790e+02]
E1 = -182.23637271756775  E_coul = 55.91489531038676
cycle= 5 E= -126.321477407181  delta_E= -1.9e-12  |g|= 3.37e-08  |ddm|= 1.22e-06
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -182.23637271756775  E_coul = 55.91489531038676
  HOMO = -0.494274455793904  LUMO = 5.25451217739598
  mo_energy =
[-3.21513954e+01 -1.56907226e+00 -4.94274456e-01 -4.94274456e-01
 -4.94274456e-01  5.25451218e+00  5.25451218e+00  5.25451218e+00
  7.16581668e+01  7.44302790e+02]
E1 = -182.2363726754822  E_coul = 55.914895268301095
Extra cycle  E= -126.321477407181  delta_E= -9.95e-14  |g|= 4.3e-09  |ddm|= 6.56e-09
    CPU time for scf_cycle      0.08 sec, wall time      0.08 sec
exp = [519.5612087   79.52148987  18.00475124   1.39316575   5.06984488
   0.86244699]
E = -126.32147740718109
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:28:40 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  519.561208698        1
[INPUT] 0    0    [1    /1   ]  79.5214898748        1
[INPUT] 0    0    [1    /1   ]  18.0047512359        1
[INPUT] 0    0    [1    /1   ]  1.39316575052        1
[INPUT] 1    0    [1    /1   ]  5.06984488131        1
[INPUT] 1    0    [1    /1   ]  0.862446986185       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [519.5612086983051, 1.0]], [0, [79.52148987484897, 1.0]], [0, [18.0047512359359, 1.0]], [0, [1.3931657505190904, 1.0]], [1, [5.069844881313886, 1.0]], [1, [0.862446986184544, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [519.5612087]
bas 1, expnt(s) = [79.52148987]
bas 2, expnt(s) = [18.00475124]
bas 3, expnt(s) = [1.39316575]
bas 4, expnt(s) = [5.06984488]
bas 5, expnt(s) = [0.86244699]
CPU time:       178.95
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.         519.5612087
 274.94293415  79.52148987  67.27882613  18.00475124  22.08286249
   1.39316575   3.23979191   5.06984488  22.19359887   0.86244699
   2.42465473]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.717138485585364
cond(S) = 10.707221078182204
E1 = -179.9719863638096  E_coul = 54.824558450151514
init E= -125.147427913658
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.629995385109102  LUMO = 5.10947052844789
  mo_energy =
[-3.22389698e+01 -1.61833824e+00 -6.29995385e-01 -6.29995385e-01
 -6.29995385e-01  5.10947053e+00  5.10947053e+00  5.10947053e+00
  7.15667329e+01  7.43983943e+02]
E1 = -182.36267003122882  E_coul = 56.041915570286825
cycle= 1 E= -126.320754460942  delta_E= -1.17  |g|= 0.227  |ddm|= 0.433
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.235988
diis-c [-0.05569034  1.        ]
  HOMO = -0.48639819400699  LUMO = 5.26698156731354
  mo_energy =
[-3.21234502e+01 -1.55717580e+00 -4.86398194e-01 -4.86398194e-01
 -4.86398194e-01  5.26698157e+00  5.26698157e+00  5.26698157e+00
  7.16861401e+01  7.44327966e+02]
E1 = -182.21559542802603  E_coul = 55.89413187340519
cycle= 2 E= -126.321463554621  delta_E= -0.000709  |g|= 0.0167  |ddm|= 0.0254
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0189996
diis-c [-3.30284066e-04  2.30078225e-02  9.76992178e-01]
  HOMO = -0.495297476326829  LUMO = 5.25286353954918
  mo_energy =
[-3.21554959e+01 -1.57058621e+00 -4.95297476e-01 -4.95297476e-01
 -4.95297476e-01  5.25286354e+00  5.25286354e+00  5.25286354e+00
  7.16542303e+01  7.44298093e+02]
E1 = -182.23926473551515  E_coul = 55.91778759453473
cycle= 3 E= -126.32147714098  delta_E= -1.36e-05  |g|= 0.00205  |ddm|= 0.00371
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00251056
diis-c [-3.77469638e-08 -2.08549625e-03  1.09254238e-01  8.92831259e-01]
  HOMO = -0.494271497742923  LUMO = 5.25451688606024
  mo_energy =
[-3.21513844e+01 -1.56906774e+00 -4.94271498e-01 -4.94271498e-01
 -4.94271498e-01  5.25451689e+00  5.25451689e+00  5.25451689e+00
  7.16581783e+01  7.44302802e+02]
E1 = -182.23636496209892  E_coul = 55.91488755491982
cycle= 4 E= -126.321477407179  delta_E= -2.66e-07  |g|= 6.78e-06  |ddm|= 0.000457
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=7.80309e-06
diis-c [-1.45188302e-12  2.48657715e-05 -1.66052475e-03 -1.03818281e-02
  1.01201749e+00]
  HOMO = -0.49427447189901  LUMO = 5.25451215294424
  mo_energy =
[-3.21513955e+01 -1.56907228e+00 -4.94274472e-01 -4.94274472e-01
 -4.94274472e-01  5.25451215e+00  5.25451215e+00  5.25451215e+00
  7.16581668e+01  7.44302790e+02]
E1 = -182.23637271756775  E_coul = 55.91489531038676
cycle= 5 E= -126.321477407181  delta_E= -1.9e-12  |g|= 3.37e-08  |ddm|= 1.22e-06
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -182.23637271756775  E_coul = 55.91489531038676
  HOMO = -0.494274455793904  LUMO = 5.25451217739598
  mo_energy =
[-3.21513954e+01 -1.56907226e+00 -4.94274456e-01 -4.94274456e-01
 -4.94274456e-01  5.25451218e+00  5.25451218e+00  5.25451218e+00
  7.16581668e+01  7.44302790e+02]
E1 = -182.2363726754822  E_coul = 55.914895268301095
Extra cycle  E= -126.321477407181  delta_E= -9.95e-14  |g|= 4.3e-09  |ddm|= 6.56e-09
    CPU time for scf_cycle      0.08 sec, wall time      0.08 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 10.707221078182204
E1 = -182.2363726754822  E_coul = 55.914895268301095
init E= -126.321477407181
    CPU time for initialize scf      0.04 sec, wall time      0.04 sec
  HOMO = -0.494274458273134  LUMO = 5.25451217340392
  mo_energy =
[-3.21513954e+01 -1.56907226e+00 -4.94274458e-01 -4.94274458e-01
 -4.94274458e-01  5.25451217e+00  5.25451217e+00  5.25451217e+00
  7.16581668e+01  7.44302790e+02]
E1 = -182.23637268241316  E_coul = 55.91489527523198
cycle= 1 E= -126.321477407181  delta_E= -9.95e-14  |g|= 7.16e-10  |ddm|= 1.09e-09
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -182.23637268241316  E_coul = 55.91489527523198
  HOMO = -0.494274457859624  LUMO = 5.25451217406734
  mo_energy =
[-3.21513954e+01 -1.56907226e+00 -4.94274458e-01 -4.94274458e-01
 -4.94274458e-01  5.25451217e+00  5.25451217e+00  5.25451217e+00
  7.16581668e+01  7.44302790e+02]
E1 = -182.23637268126296  E_coul = 55.914895274081786
Extra cycle  E= -126.321477407181  delta_E= 1.42e-14  |g|= 1.19e-10  |ddm|= 1.81e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
exp = [519.5612087   79.52148987  18.00475124   1.39316575   5.06984488
   0.86244699]
grad_E = [ 2.14358212e-04 -1.15830164e-02  1.46715951e-01  1.34144870e+00
 -2.54998471e-02  2.73593549e-01]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:28:43 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  364.33302295         1
[INPUT] 0    0    [1    /1   ]  60.9488998416        1
[INPUT] 0    0    [1    /1   ]  15.7757248698        1
[INPUT] 0    0    [1    /1   ]  1.23944656472        1
[INPUT] 1    0    [1    /1   ]  4.72297161324        1
[INPUT] 1    0    [1    /1   ]  0.837219253006       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [364.3330229496279, 1.0]], [0, [60.94889984162748, 1.0]], [0, [15.775724869812802, 1.0]], [0, [1.2394465647175008, 1.0]], [1, [4.722971613237254, 1.0]], [1, [0.8372192530059817, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [364.33302295]
bas 1, expnt(s) = [60.94889984]
bas 2, expnt(s) = [15.77572487]
bas 3, expnt(s) = [1.23944656]
bas 4, expnt(s) = [4.72297161]
bas 5, expnt(s) = [0.83721925]
CPU time:       181.95
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.         364.33302295
 210.68757631  60.94889984  55.11114414  15.77572487  19.99894182
   1.23944656   2.96780854   4.72297161  20.31204087   0.83721925
   2.33632578]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.782165029094955
cond(S) = 13.364921756219612
E1 = -180.470729644775  E_coul = 54.6935913695899
init E= -125.777138275185
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.617134301646117  LUMO = 4.8000056500816
  mo_energy =
[-32.32862269  -1.72700648  -0.6171343   -0.6171343   -0.6171343
   4.80000565   4.80000565   4.80000565  53.31222372 513.60652517]
E1 = -181.6912639799863  E_coul = 55.182189904244126
cycle= 1 E= -126.509074075742  delta_E= -0.732  |g|= 0.198  |ddm|= 0.379
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.183093
diis-c [-0.03352293  1.        ]
  HOMO = -0.537557003823952  LUMO = 4.88216249191452
  mo_energy =
[-32.34716464  -1.70370419  -0.537557    -0.537557    -0.537557
   4.88216249   4.88216249   4.88216249  53.2925007  513.68841756]
E1 = -181.65851586538344  E_coul = 55.14924713616948
cycle= 2 E= -126.509268729214  delta_E= -0.000195  |g|= 0.00572  |ddm|= 0.00988
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00533699
diis-c [-2.17251726e-05 -1.44079195e-02  1.01440792e+00]
  HOMO = -0.539904451287377  LUMO = 4.87881373353609
  mo_energy =
[-32.35337051  -1.70716469  -0.53990445  -0.53990445  -0.53990445
   4.87881373   4.87881373   4.87881373  53.28552626 513.68601658]
E1 = -181.66403833151182  E_coul = 55.15476887107801
cycle= 3 E= -126.509269460434  delta_E= -7.31e-07  |g|= 0.000624  |ddm|= 0.000878
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000746969
diis-c [-2.86873213e-08 -2.36093863e-03  1.36569916e-01  8.65791023e-01]
  HOMO = -0.539588915989759  LUMO = 4.87928440183275
  mo_energy =
[-32.35216017  -1.70673282  -0.53958892  -0.53958892  -0.53958892
   4.8792844    4.8792844    4.8792844   53.28664771 513.68735381]
E1 = -181.66312473841325  E_coul = 55.15385525298818
cycle= 4 E= -126.509269485425  delta_E= -2.5e-08  |g|= 1.13e-05  |ddm|= 0.000146
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.25074e-05
diis-c [-1.95920622e-12  4.17325219e-05 -2.94432305e-03 -1.46782618e-03
  1.00437042e+00]
  HOMO = -0.539594060849615  LUMO = 4.87927680070878
  mo_energy =
[-32.3521781   -1.70674013  -0.53959406  -0.53959406  -0.53959406
   4.8792768    4.8792768    4.8792768   53.28662967 513.68733561]
E1 = -181.66313846036218  E_coul = 55.153868974931065
cycle= 5 E= -126.509269485431  delta_E= -6.04e-12  |g|= 4.74e-08  |ddm|= 2.18e-06
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -181.66313846036218  E_coul = 55.153868974931065
  HOMO = -0.539594038954323  LUMO = 4.87927683206525
  mo_energy =
[-32.35217804  -1.7067401   -0.53959404  -0.53959404  -0.53959404
   4.87927683   4.87927683   4.87927683  53.28662973 513.68733561]
E1 = -181.66313840207036  E_coul = 55.1538689166392
Extra cycle  E= -126.509269485431  delta_E= -5.68e-14  |g|= 6.07e-09  |ddm|= 9.2e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [364.33302295  60.94889984  15.77572487   1.23944656   4.72297161
   0.83721925]
E = -126.50926948543116
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:28:44 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  364.33302295         1
[INPUT] 0    0    [1    /1   ]  60.9488998416        1
[INPUT] 0    0    [1    /1   ]  15.7757248698        1
[INPUT] 0    0    [1    /1   ]  1.23944656472        1
[INPUT] 1    0    [1    /1   ]  4.72297161324        1
[INPUT] 1    0    [1    /1   ]  0.837219253006       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [364.3330229496279, 1.0]], [0, [60.94889984162748, 1.0]], [0, [15.775724869812802, 1.0]], [0, [1.2394465647175008, 1.0]], [1, [4.722971613237254, 1.0]], [1, [0.8372192530059817, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [364.33302295]
bas 1, expnt(s) = [60.94889984]
bas 2, expnt(s) = [15.77572487]
bas 3, expnt(s) = [1.23944656]
bas 4, expnt(s) = [4.72297161]
bas 5, expnt(s) = [0.83721925]
CPU time:       182.73
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.         364.33302295
 210.68757631  60.94889984  55.11114414  15.77572487  19.99894182
   1.23944656   2.96780854   4.72297161  20.31204087   0.83721925
   2.33632578]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.782165029094955
cond(S) = 13.364921756219612
E1 = -180.470729644775  E_coul = 54.6935913695899
init E= -125.777138275185
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.617134301646117  LUMO = 4.8000056500816
  mo_energy =
[-32.32862269  -1.72700648  -0.6171343   -0.6171343   -0.6171343
   4.80000565   4.80000565   4.80000565  53.31222372 513.60652517]
E1 = -181.6912639799863  E_coul = 55.182189904244126
cycle= 1 E= -126.509074075742  delta_E= -0.732  |g|= 0.198  |ddm|= 0.379
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.183093
diis-c [-0.03352293  1.        ]
  HOMO = -0.537557003823952  LUMO = 4.88216249191452
  mo_energy =
[-32.34716464  -1.70370419  -0.537557    -0.537557    -0.537557
   4.88216249   4.88216249   4.88216249  53.2925007  513.68841756]
E1 = -181.65851586538344  E_coul = 55.14924713616948
cycle= 2 E= -126.509268729214  delta_E= -0.000195  |g|= 0.00572  |ddm|= 0.00988
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00533699
diis-c [-2.17251726e-05 -1.44079195e-02  1.01440792e+00]
  HOMO = -0.539904451287377  LUMO = 4.87881373353609
  mo_energy =
[-32.35337051  -1.70716469  -0.53990445  -0.53990445  -0.53990445
   4.87881373   4.87881373   4.87881373  53.28552626 513.68601658]
E1 = -181.66403833151182  E_coul = 55.15476887107801
cycle= 3 E= -126.509269460434  delta_E= -7.31e-07  |g|= 0.000624  |ddm|= 0.000878
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000746969
diis-c [-2.86873213e-08 -2.36093863e-03  1.36569916e-01  8.65791023e-01]
  HOMO = -0.539588915989759  LUMO = 4.87928440183275
  mo_energy =
[-32.35216017  -1.70673282  -0.53958892  -0.53958892  -0.53958892
   4.8792844    4.8792844    4.8792844   53.28664771 513.68735381]
E1 = -181.66312473841325  E_coul = 55.15385525298818
cycle= 4 E= -126.509269485425  delta_E= -2.5e-08  |g|= 1.13e-05  |ddm|= 0.000146
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.25074e-05
diis-c [-1.95920622e-12  4.17325219e-05 -2.94432305e-03 -1.46782618e-03
  1.00437042e+00]
  HOMO = -0.539594060849615  LUMO = 4.87927680070878
  mo_energy =
[-32.3521781   -1.70674013  -0.53959406  -0.53959406  -0.53959406
   4.8792768    4.8792768    4.8792768   53.28662967 513.68733561]
E1 = -181.66313846036218  E_coul = 55.153868974931065
cycle= 5 E= -126.509269485431  delta_E= -6.04e-12  |g|= 4.74e-08  |ddm|= 2.18e-06
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -181.66313846036218  E_coul = 55.153868974931065
  HOMO = -0.539594038954323  LUMO = 4.87927683206525
  mo_energy =
[-32.35217804  -1.7067401   -0.53959404  -0.53959404  -0.53959404
   4.87927683   4.87927683   4.87927683  53.28662973 513.68733561]
E1 = -181.66313840207036  E_coul = 55.1538689166392
Extra cycle  E= -126.509269485431  delta_E= -5.68e-14  |g|= 6.07e-09  |ddm|= 9.2e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 13.364921756219612
E1 = -181.66313840207036  E_coul = 55.1538689166392
init E= -126.509269485431
    CPU time for initialize scf      0.04 sec, wall time      0.05 sec
  HOMO = -0.539594042477016  LUMO = 4.87927682679555
  mo_energy =
[-32.35217805  -1.70674011  -0.53959404  -0.53959404  -0.53959404
   4.87927683   4.87927683   4.87927683  53.28662972 513.6873356 ]
E1 = -181.66313841223473  E_coul = 55.15386892680366
cycle= 1 E= -126.509269485431  delta_E= 8.53e-14  |g|= 1.07e-09  |ddm|= 1.62e-09
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
E1 = -181.66313841223473  E_coul = 55.15386892680366
  HOMO = -0.539594041853276  LUMO = 4.87927682772407
  mo_energy =
[-32.35217805  -1.70674011  -0.53959404  -0.53959404  -0.53959404
   4.87927683   4.87927683   4.87927683  53.28662972 513.6873356 ]
E1 = -181.66313841044712  E_coul = 55.15386892501607
Extra cycle  E= -126.509269485431  delta_E= 2.84e-14  |g|= 1.88e-10  |ddm|= 2.85e-10
    CPU time for scf_cycle      0.11 sec, wall time      0.12 sec
exp = [364.33302295  60.94889984  15.77572487   1.23944656   4.72297161
   0.83721925]
grad_E = [-9.59157973e-05 -2.10150911e-02  1.26608311e-01  9.34355798e-01
 -8.95439872e-02  3.46822337e-01]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:28:47 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  441.751525976        1
[INPUT] 0    0    [1    /1   ]  66.5658589034        1
[INPUT] 0    0    [1    /1   ]  15.0887261493        1
[INPUT] 0    0    [1    /1   ]  1.08923440075        1
[INPUT] 1    0    [1    /1   ]  4.7261172873         1
[INPUT] 1    0    [1    /1   ]  0.845072120073       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [441.75152597588175, 1.0]], [0, [66.56585890342355, 1.0]], [0, [15.088726149324696, 1.0]], [0, [1.0892344007457295, 1.0]], [1, [4.726117287302544, 1.0]], [1, [0.8450721200729967, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [441.75152598]
bas 1, expnt(s) = [66.5658589]
bas 2, expnt(s) = [15.08872615]
bas 3, expnt(s) = [1.0892344]
bas 4, expnt(s) = [4.72611729]
bas 5, expnt(s) = [0.84507212]
CPU time:       185.92
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.         441.75152598
 243.44371568  66.5658589   58.87808542  15.08872615  19.34213707
   1.0892344    2.69374224   4.72611729  20.32895299   0.84507212
   2.36375037]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.820728122728191
cond(S) = 10.484818997148063
E1 = -180.89123869580752  E_coul = 54.5424170422143
init E= -126.348821653593
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.62199601969099  LUMO = 4.81573408768461
  mo_energy =
[-32.44077912  -1.79957794  -0.62199602  -0.62199602  -0.62199602
   4.81573409   4.81573409   4.81573409  53.91688451 608.41951847]
E1 = -181.35135173495794  E_coul = 54.60036325461246
cycle= 1 E= -126.750988480345  delta_E= -0.402  |g|= 0.119  |ddm|= 0.296
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.115873
diis-c [-0.01342651  1.        ]
  HOMO = -0.5775818461226  LUMO = 4.85425166016525
  mo_energy =
[-3.25590906e+01 -1.78352821e+00 -5.77581846e-01 -5.77581846e-01
 -5.77581846e-01  4.85425166e+00  4.85425166e+00  4.85425166e+00
  5.38166532e+01  6.08310367e+02]
E1 = -181.40208748390847  E_coul = 54.6510072197071
cycle= 2 E= -126.751080264201  delta_E= -9.18e-05  |g|= 0.0051  |ddm|= 0.00819
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00646525
diis-c [-4.01965072e-05  1.08244432e-02  9.89175557e-01]
  HOMO = -0.57459365716975  LUMO = 4.85870083105187
  mo_energy =
[-3.25467075e+01 -1.77982327e+00 -5.74593657e-01 -5.74593657e-01
 -5.74593657e-01  4.85870083e+00  4.85870083e+00  4.85870083e+00
  5.38279223e+01  6.08326423e+02]
E1 = -181.3931882983392  E_coul = 54.64210623616715
cycle= 3 E= -126.751082062172  delta_E= -1.8e-06  |g|= 0.000901  |ddm|= 0.00144
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00105932
diis-c [-5.06023806e-09 -1.99423471e-03  1.32591257e-01  8.69402978e-01]
  HOMO = -0.575040012468864  LUMO = 4.85804886411676
  mo_energy =
[-3.25483435e+01 -1.78039268e+00 -5.75040012e-01 -5.75040012e-01
 -5.75040012e-01  4.85804886e+00  4.85804886e+00  4.85804886e+00
  5.38263682e+01  6.08324696e+02]
E1 = -181.3944302478249  E_coul = 54.643348136930214
cycle= 4 E= -126.751082110895  delta_E= -4.87e-08  |g|= 3.18e-06  |ddm|= 0.000199
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.2769e-06
diis-c [-3.99840068e-13  3.03615333e-05 -2.37580068e-03 -1.80817319e-02
  1.02042717e+00]
  HOMO = -0.575041309384971  LUMO = 4.85804703680145
  mo_energy =
[-3.25483471e+01 -1.78039445e+00 -5.75041309e-01 -5.75041309e-01
 -5.75041309e-01  4.85804704e+00  4.85804704e+00  4.85804704e+00
  5.38263641e+01  6.08324694e+02]
E1 = -181.39443328818555  E_coul = 54.64335117729041
cycle= 5 E= -126.751082110895  delta_E= -4.41e-13  |g|= 1.62e-08  |ddm|= 4.86e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -181.39443328818555  E_coul = 54.64335117729041
  HOMO = -0.575041302949452  LUMO = 4.85804704553562
  mo_energy =
[-3.25483471e+01 -1.78039444e+00 -5.75041303e-01 -5.75041303e-01
 -5.75041303e-01  4.85804705e+00  4.85804705e+00  4.85804705e+00
  5.38263641e+01  6.08324694e+02]
E1 = -181.3944332714171  E_coul = 54.6433511605219
Extra cycle  E= -126.751082110895  delta_E= -7.11e-14  |g|= 1.77e-09  |ddm|= 2.67e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
exp = [441.75152598  66.5658589   15.08872615   1.0892344    4.72611729
   0.84507212]
E = -126.75108211089521
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:28:48 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  441.751525976        1
[INPUT] 0    0    [1    /1   ]  66.5658589034        1
[INPUT] 0    0    [1    /1   ]  15.0887261493        1
[INPUT] 0    0    [1    /1   ]  1.08923440075        1
[INPUT] 1    0    [1    /1   ]  4.7261172873         1
[INPUT] 1    0    [1    /1   ]  0.845072120073       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [441.75152597588175, 1.0]], [0, [66.56585890342355, 1.0]], [0, [15.088726149324696, 1.0]], [0, [1.0892344007457295, 1.0]], [1, [4.726117287302544, 1.0]], [1, [0.8450721200729967, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [441.75152598]
bas 1, expnt(s) = [66.5658589]
bas 2, expnt(s) = [15.08872615]
bas 3, expnt(s) = [1.0892344]
bas 4, expnt(s) = [4.72611729]
bas 5, expnt(s) = [0.84507212]
CPU time:       186.64
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.         441.75152598
 243.44371568  66.5658589   58.87808542  15.08872615  19.34213707
   1.0892344    2.69374224   4.72611729  20.32895299   0.84507212
   2.36375037]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.820728122728191
cond(S) = 10.484818997148063
E1 = -180.89123869580752  E_coul = 54.5424170422143
init E= -126.348821653593
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.62199601969099  LUMO = 4.81573408768461
  mo_energy =
[-32.44077912  -1.79957794  -0.62199602  -0.62199602  -0.62199602
   4.81573409   4.81573409   4.81573409  53.91688451 608.41951847]
E1 = -181.35135173495794  E_coul = 54.60036325461246
cycle= 1 E= -126.750988480345  delta_E= -0.402  |g|= 0.119  |ddm|= 0.296
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.115873
diis-c [-0.01342651  1.        ]
  HOMO = -0.5775818461226  LUMO = 4.85425166016525
  mo_energy =
[-3.25590906e+01 -1.78352821e+00 -5.77581846e-01 -5.77581846e-01
 -5.77581846e-01  4.85425166e+00  4.85425166e+00  4.85425166e+00
  5.38166532e+01  6.08310367e+02]
E1 = -181.40208748390847  E_coul = 54.6510072197071
cycle= 2 E= -126.751080264201  delta_E= -9.18e-05  |g|= 0.0051  |ddm|= 0.00819
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00646525
diis-c [-4.01965072e-05  1.08244432e-02  9.89175557e-01]
  HOMO = -0.57459365716975  LUMO = 4.85870083105187
  mo_energy =
[-3.25467075e+01 -1.77982327e+00 -5.74593657e-01 -5.74593657e-01
 -5.74593657e-01  4.85870083e+00  4.85870083e+00  4.85870083e+00
  5.38279223e+01  6.08326423e+02]
E1 = -181.3931882983392  E_coul = 54.64210623616715
cycle= 3 E= -126.751082062172  delta_E= -1.8e-06  |g|= 0.000901  |ddm|= 0.00144
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00105932
diis-c [-5.06023806e-09 -1.99423471e-03  1.32591257e-01  8.69402978e-01]
  HOMO = -0.575040012468864  LUMO = 4.85804886411676
  mo_energy =
[-3.25483435e+01 -1.78039268e+00 -5.75040012e-01 -5.75040012e-01
 -5.75040012e-01  4.85804886e+00  4.85804886e+00  4.85804886e+00
  5.38263682e+01  6.08324696e+02]
E1 = -181.3944302478249  E_coul = 54.643348136930214
cycle= 4 E= -126.751082110895  delta_E= -4.87e-08  |g|= 3.18e-06  |ddm|= 0.000199
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.2769e-06
diis-c [-3.99840068e-13  3.03615333e-05 -2.37580068e-03 -1.80817319e-02
  1.02042717e+00]
  HOMO = -0.575041309384971  LUMO = 4.85804703680145
  mo_energy =
[-3.25483471e+01 -1.78039445e+00 -5.75041309e-01 -5.75041309e-01
 -5.75041309e-01  4.85804704e+00  4.85804704e+00  4.85804704e+00
  5.38263641e+01  6.08324694e+02]
E1 = -181.39443328818555  E_coul = 54.64335117729041
cycle= 5 E= -126.751082110895  delta_E= -4.41e-13  |g|= 1.62e-08  |ddm|= 4.86e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -181.39443328818555  E_coul = 54.64335117729041
  HOMO = -0.575041302949452  LUMO = 4.85804704553562
  mo_energy =
[-3.25483471e+01 -1.78039444e+00 -5.75041303e-01 -5.75041303e-01
 -5.75041303e-01  4.85804705e+00  4.85804705e+00  4.85804705e+00
  5.38263641e+01  6.08324694e+02]
E1 = -181.3944332714171  E_coul = 54.6433511605219
Extra cycle  E= -126.751082110895  delta_E= -7.11e-14  |g|= 1.77e-09  |ddm|= 2.67e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 10.484818997148063
E1 = -181.3944332714171  E_coul = 54.6433511605219
init E= -126.751082110895
    CPU time for initialize scf      0.04 sec, wall time      0.04 sec
  HOMO = -0.575041303977374  LUMO = 4.85804704402083
  mo_energy =
[-3.25483471e+01 -1.78039444e+00 -5.75041304e-01 -5.75041304e-01
 -5.75041304e-01  4.85804704e+00  4.85804704e+00  4.85804704e+00
  5.38263641e+01  6.08324694e+02]
E1 = -181.39443327432372  E_coul = 54.64335116342862
cycle= 1 E= -126.751082110895  delta_E= 1.14e-13  |g|= 3.08e-10  |ddm|= 4.67e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -181.39443327432372  E_coul = 54.64335116342862
  HOMO = -0.575041303795688  LUMO = 4.8580470442869
  mo_energy =
[-3.25483471e+01 -1.78039444e+00 -5.75041304e-01 -5.75041304e-01
 -5.75041304e-01  4.85804704e+00  4.85804704e+00  4.85804704e+00
  5.38263641e+01  6.08324694e+02]
E1 = -181.39443327381213  E_coul = 54.64335116291706
Extra cycle  E= -126.751082110895  delta_E= 2.84e-14  |g|= 5.42e-11  |ddm|= 8.21e-11
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [441.75152598  66.5658589   15.08872615   1.0892344    4.72611729
   0.84507212]
grad_E = [ 2.11705768e-04 -8.08294177e-03  4.11339072e-02  4.79478140e-01
 -9.98869221e-02  3.24823993e-01]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:28:52 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  423.708332857        1
[INPUT] 0    0    [1    /1   ]  67.5667447924        1
[INPUT] 0    0    [1    /1   ]  14.3952772032        1
[INPUT] 0    0    [1    /1   ]  0.938229247197       1
[INPUT] 1    0    [1    /1   ]  5.39212091313        1
[INPUT] 1    0    [1    /1   ]  0.909090223368       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [423.7083328572522, 1.0]], [0, [67.56674479242223, 1.0]], [0, [14.39527720319269, 1.0]], [0, [0.9382292471969618, 1.0]], [1, [5.392120913125559, 1.0]], [1, [0.9090902233678955, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [423.70833286]
bas 1, expnt(s) = [67.56674479]
bas 2, expnt(s) = [14.3952772]
bas 3, expnt(s) = [0.93822925]
bas 4, expnt(s) = [5.39212091]
bas 5, expnt(s) = [0.90909022]
CPU time:       189.91
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.         423.70833286
 235.94744458  67.56674479  59.5408145   14.3952772   18.67153609
   0.93822925   2.40850055   5.39212091  23.97087683   0.90909022
   2.58966225]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.822487071641238
cond(S) = 9.971040408154684
E1 = -180.71952226335614  E_coul = 54.28598456225924
init E= -126.433537701097
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.655734308637961  LUMO = 5.41737607348322
  mo_energy =
[-32.45848341  -1.8354519   -0.65573431  -0.65573431  -0.65573431
   5.41737607   5.41737607   5.41737607  52.01414009 589.86978826]
E1 = -181.17206159695814  E_coul = 54.37105406154661
cycle= 1 E= -126.801007535412  delta_E= -0.367  |g|= 0.0619  |ddm|= 0.288
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0696584
diis-c [-0.0048523  1.       ]
  HOMO = -0.605631639668123  LUMO = 5.45349836427728
  mo_energy =
[-32.60959536  -1.78856511  -0.60563164  -0.60563164  -0.60563164
   5.45349836   5.45349836   5.45349836  51.90485501 589.631914  ]
E1 = -181.2440074928841  E_coul = 54.44286721433235
cycle= 2 E= -126.801140278552  delta_E= -0.000133  |g|= 0.008  |ddm|= 0.0114
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00964714
diis-c [-2.55182206e-05  1.05784781e-01  8.94215219e-01]
  HOMO = -0.601670016460591  LUMO = 5.45991137491405
  mo_energy =
[-32.59394664  -1.78398116  -0.60167002  -0.60167002  -0.60167002
   5.45991137   5.45991137   5.45991137  51.91966418 589.65032493]
E1 = -181.23346837863434  E_coul = 54.43232458636
cycle= 3 E= -126.801143792274  delta_E= -3.51e-06  |g|= 0.000347  |ddm|= 0.00167
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000424485
diis-c [-4.99232673e-09 -3.24913525e-03  2.12972050e-02  9.81951930e-01]
  HOMO = -0.601830744859523  LUMO = 5.45965539854265
  mo_energy =
[-32.59454372  -1.78416182  -0.60183074  -0.60183074  -0.60183074
   5.4596554    5.4596554    5.4596554   51.91912345 589.64978425]
E1 = -181.23389869976066  E_coul = 54.43275490114299
cycle= 4 E= -126.801143798618  delta_E= -6.34e-09  |g|= 9.21e-07  |ddm|= 6.82e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.05543e-06
diis-c [-4.01031031e-14  2.22699923e-05 -2.45134544e-04 -6.83093502e-03
  1.00705380e+00]
  HOMO = -0.601830366947686  LUMO = 5.45965597573954
  mo_energy =
[-32.59454243  -1.78416137  -0.60183037  -0.60183037  -0.60183037
   5.45965598   5.45965598   5.45965598  51.91912476 589.64978548]
E1 = -181.23389778930772  E_coul = 54.432753990690095
cycle= 5 E= -126.801143798618  delta_E= 2.84e-14  |g|= 4.15e-09  |ddm|= 1.43e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -181.23389778930772  E_coul = 54.432753990690095
  HOMO = -0.601830366497407  LUMO = 5.45965597637079
  mo_energy =
[-32.59454243  -1.78416137  -0.60183037  -0.60183037  -0.60183037
   5.45965598   5.45965598   5.45965598  51.91912476 589.64978547]
E1 = -181.2338977893961  E_coul = 54.43275399077844
Extra cycle  E= -126.801143798618  delta_E= -4.26e-14  |g|= 9.28e-11  |ddm|= 2.03e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
exp = [423.70833286  67.56674479  14.3952772    0.93822925   5.39212091
   0.90909022]
E = -126.80114379861767
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:28:52 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  423.708332857        1
[INPUT] 0    0    [1    /1   ]  67.5667447924        1
[INPUT] 0    0    [1    /1   ]  14.3952772032        1
[INPUT] 0    0    [1    /1   ]  0.938229247197       1
[INPUT] 1    0    [1    /1   ]  5.39212091313        1
[INPUT] 1    0    [1    /1   ]  0.909090223368       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [423.7083328572522, 1.0]], [0, [67.56674479242223, 1.0]], [0, [14.39527720319269, 1.0]], [0, [0.9382292471969618, 1.0]], [1, [5.392120913125559, 1.0]], [1, [0.9090902233678955, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [423.70833286]
bas 1, expnt(s) = [67.56674479]
bas 2, expnt(s) = [14.3952772]
bas 3, expnt(s) = [0.93822925]
bas 4, expnt(s) = [5.39212091]
bas 5, expnt(s) = [0.90909022]
CPU time:       190.67
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.         423.70833286
 235.94744458  67.56674479  59.5408145   14.3952772   18.67153609
   0.93822925   2.40850055   5.39212091  23.97087683   0.90909022
   2.58966225]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.822487071641238
cond(S) = 9.971040408154684
E1 = -180.71952226335614  E_coul = 54.28598456225924
init E= -126.433537701097
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.655734308637961  LUMO = 5.41737607348322
  mo_energy =
[-32.45848341  -1.8354519   -0.65573431  -0.65573431  -0.65573431
   5.41737607   5.41737607   5.41737607  52.01414009 589.86978826]
E1 = -181.17206159695814  E_coul = 54.37105406154661
cycle= 1 E= -126.801007535412  delta_E= -0.367  |g|= 0.0619  |ddm|= 0.288
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0696584
diis-c [-0.0048523  1.       ]
  HOMO = -0.605631639668123  LUMO = 5.45349836427728
  mo_energy =
[-32.60959536  -1.78856511  -0.60563164  -0.60563164  -0.60563164
   5.45349836   5.45349836   5.45349836  51.90485501 589.631914  ]
E1 = -181.2440074928841  E_coul = 54.44286721433235
cycle= 2 E= -126.801140278552  delta_E= -0.000133  |g|= 0.008  |ddm|= 0.0114
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00964714
diis-c [-2.55182206e-05  1.05784781e-01  8.94215219e-01]
  HOMO = -0.601670016460591  LUMO = 5.45991137491405
  mo_energy =
[-32.59394664  -1.78398116  -0.60167002  -0.60167002  -0.60167002
   5.45991137   5.45991137   5.45991137  51.91966418 589.65032493]
E1 = -181.23346837863434  E_coul = 54.43232458636
cycle= 3 E= -126.801143792274  delta_E= -3.51e-06  |g|= 0.000347  |ddm|= 0.00167
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000424485
diis-c [-4.99232673e-09 -3.24913525e-03  2.12972050e-02  9.81951930e-01]
  HOMO = -0.601830744859523  LUMO = 5.45965539854265
  mo_energy =
[-32.59454372  -1.78416182  -0.60183074  -0.60183074  -0.60183074
   5.4596554    5.4596554    5.4596554   51.91912345 589.64978425]
E1 = -181.23389869976066  E_coul = 54.43275490114299
cycle= 4 E= -126.801143798618  delta_E= -6.34e-09  |g|= 9.21e-07  |ddm|= 6.82e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.05543e-06
diis-c [-4.01031031e-14  2.22699923e-05 -2.45134544e-04 -6.83093502e-03
  1.00705380e+00]
  HOMO = -0.601830366947686  LUMO = 5.45965597573954
  mo_energy =
[-32.59454243  -1.78416137  -0.60183037  -0.60183037  -0.60183037
   5.45965598   5.45965598   5.45965598  51.91912476 589.64978548]
E1 = -181.23389778930772  E_coul = 54.432753990690095
cycle= 5 E= -126.801143798618  delta_E= 2.84e-14  |g|= 4.15e-09  |ddm|= 1.43e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -181.23389778930772  E_coul = 54.432753990690095
  HOMO = -0.601830366497407  LUMO = 5.45965597637079
  mo_energy =
[-32.59454243  -1.78416137  -0.60183037  -0.60183037  -0.60183037
   5.45965598   5.45965598   5.45965598  51.91912476 589.64978547]
E1 = -181.2338977893961  E_coul = 54.43275399077844
Extra cycle  E= -126.801143798618  delta_E= -4.26e-14  |g|= 9.28e-11  |ddm|= 2.03e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 9.971040408154684
E1 = -181.2338977893961  E_coul = 54.43275399077844
init E= -126.801143798618
    CPU time for initialize scf      0.04 sec, wall time      0.04 sec
  HOMO = -0.601830366486944  LUMO = 5.45965597638389
  mo_energy =
[-32.59454243  -1.78416137  -0.60183037  -0.60183037  -0.60183037
   5.45965598   5.45965598   5.45965598  51.91912476 589.64978547]
E1 = -181.23389778939526  E_coul = 54.43275399077762
cycle= 1 E= -126.801143798618  delta_E= 4.26e-14  |g|= 2.11e-12  |ddm|= 4.6e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -181.23389778939526  E_coul = 54.43275399077762
  HOMO = -0.601830366486905  LUMO = 5.45965597638388
  mo_energy =
[-32.59454243  -1.78416137  -0.60183037  -0.60183037  -0.60183037
   5.45965598   5.45965598   5.45965598  51.91912476 589.64978547]
E1 = -181.2338977893957  E_coul = 54.43275399077812
Extra cycle  E= -126.801143798618  delta_E= 2.84e-14  |g|= 3.19e-13  |ddm|= 1.39e-13
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [423.70833286  67.56674479  14.3952772    0.93822925   5.39212091
   0.90909022]
grad_E = [-0.00061956  0.00908771 -0.04132287 -0.04689304  0.00219834  0.03231949]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:28:55 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  466.317553326        1
[INPUT] 0    0    [1    /1   ]  67.1703070973        1
[INPUT] 0    0    [1    /1   ]  14.579220821         1
[INPUT] 0    0    [1    /1   ]  0.944989888537       1
[INPUT] 1    0    [1    /1   ]  5.39122508079        1
[INPUT] 1    0    [1    /1   ]  0.903962314623       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [466.3175533258451, 1.0]], [0, [67.17030709730206, 1.0]], [0, [14.579220820971294, 1.0]], [0, [0.9449898885370086, 1.0]], [1, [5.391225080785432, 1.0]], [1, [0.9039623146226535, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [466.31755333]
bas 1, expnt(s) = [67.1703071]
bas 2, expnt(s) = [14.57922082]
bas 3, expnt(s) = [0.94498989]
bas 4, expnt(s) = [5.39122508]
bas 5, expnt(s) = [0.90396231]
CPU time:       193.75
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.         466.31755333
 253.52824317  67.1703071   59.27861179  14.57922082  18.8501912
   0.94498989   2.42150514   5.39122508  23.96589886   0.90396231
   2.57141575]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.823903653666289
cond(S) = 9.556753237727849
E1 = -180.73999437907085  E_coul = 54.31230628669121
init E= -126.42768809238
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.65395034698081  LUMO = 5.40251294905002
  mo_energy =
[-32.45351691  -1.83738368  -0.65395035  -0.65395035  -0.65395035
   5.40251295   5.40251295   5.40251295  52.16007354 634.0408958 ]
E1 = -181.1744427271148  E_coul = 54.363482244452726
cycle= 1 E= -126.810960482662  delta_E= -0.383  |g|= 0.0897  |ddm|= 0.285
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0928692
diis-c [-0.00862468  1.        ]
  HOMO = -0.607399299349437  LUMO = 5.43442760605127
  mo_energy =
[-3.26056243e+01 -1.79600462e+00 -6.07399299e-01 -6.07399299e-01
 -6.07399299e-01  5.43442761e+00  5.43442761e+00  5.43442761e+00
  5.20485081e+01  6.33819818e+02]
E1 = -181.24968506407063  E_coul = 54.43857605469546
cycle= 2 E= -126.811109009375  delta_E= -0.000149  |g|= 0.00829  |ddm|= 0.0118
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0100879
diis-c [-6.03456038e-05  6.50218139e-02  9.34978186e-01]
  HOMO = -0.603103142061098  LUMO = 5.44142005138677
  mo_energy =
[-3.25883967e+01 -1.79100461e+00 -6.03103142e-01 -6.03103142e-01
 -6.03103142e-01  5.44142005e+00  5.44142005e+00  5.44142005e+00
  5.20647484e+01  6.33840643e+02]
E1 = -181.23808448597794  E_coul = 54.426971629534336
cycle= 3 E= -126.811112856444  delta_E= -3.85e-06  |g|= 0.000764  |ddm|= 0.00183
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000918436
diis-c [-1.19339650e-08 -1.82215924e-03  7.32254843e-02  9.28596675e-01]
  HOMO = -0.603465014970777  LUMO = 5.4408387239093
  mo_energy =
[-3.25897700e+01 -1.79142284e+00 -6.03465015e-01 -6.03465015e-01
 -6.03465015e-01  5.44083872e+00  5.44083872e+00  5.44083872e+00
  5.20634702e+01  6.33839244e+02]
E1 = -181.23904988930127  E_coul = 54.4279370010506
cycle= 4 E= -126.811112888251  delta_E= -3.18e-08  |g|= 1.53e-06  |ddm|= 0.000152
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=2.0248e-06
diis-c [-4.82053250e-14  2.68334851e-05 -1.35385113e-03 -1.68849619e-02
  1.01821198e+00]
  HOMO = -0.60346508242341  LUMO = 5.44083865968996
  mo_energy =
[-3.25897698e+01 -1.79142286e+00 -6.03465082e-01 -6.03465082e-01
 -6.03465082e-01  5.44083866e+00  5.44083866e+00  5.44083866e+00
  5.20634707e+01  6.33839247e+02]
E1 = -181.2390500890078  E_coul = 54.427937200757164
cycle= 5 E= -126.811112888251  delta_E= 2.84e-14  |g|= 7.65e-09  |ddm|= 6.1e-08
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -181.2390500890078  E_coul = 54.427937200757164
  HOMO = -0.603465080013228  LUMO = 5.44083866320225
  mo_energy =
[-3.25897697e+01 -1.79142285e+00 -6.03465080e-01 -6.03465080e-01
 -6.03465080e-01  5.44083866e+00  5.44083866e+00  5.44083866e+00
  5.20634707e+01  6.33839247e+02]
E1 = -181.23905008443532  E_coul = 54.42793719618459
Extra cycle  E= -126.811112888251  delta_E= -8.53e-14  |g|= 4.94e-10  |ddm|= 7.52e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
exp = [466.31755333  67.1703071   14.57922082   0.94498989   5.39122508
   0.90396231]
E = -126.81111288825073
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:28:56 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  466.317553326        1
[INPUT] 0    0    [1    /1   ]  67.1703070973        1
[INPUT] 0    0    [1    /1   ]  14.579220821         1
[INPUT] 0    0    [1    /1   ]  0.944989888537       1
[INPUT] 1    0    [1    /1   ]  5.39122508079        1
[INPUT] 1    0    [1    /1   ]  0.903962314623       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [466.3175533258451, 1.0]], [0, [67.17030709730206, 1.0]], [0, [14.579220820971294, 1.0]], [0, [0.9449898885370086, 1.0]], [1, [5.391225080785432, 1.0]], [1, [0.9039623146226535, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [466.31755333]
bas 1, expnt(s) = [67.1703071]
bas 2, expnt(s) = [14.57922082]
bas 3, expnt(s) = [0.94498989]
bas 4, expnt(s) = [5.39122508]
bas 5, expnt(s) = [0.90396231]
CPU time:       194.50
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.         466.31755333
 253.52824317  67.1703071   59.27861179  14.57922082  18.8501912
   0.94498989   2.42150514   5.39122508  23.96589886   0.90396231
   2.57141575]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.823903653666289
cond(S) = 9.556753237727849
E1 = -180.73999437907085  E_coul = 54.31230628669121
init E= -126.42768809238
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.65395034698081  LUMO = 5.40251294905002
  mo_energy =
[-32.45351691  -1.83738368  -0.65395035  -0.65395035  -0.65395035
   5.40251295   5.40251295   5.40251295  52.16007354 634.0408958 ]
E1 = -181.1744427271148  E_coul = 54.363482244452726
cycle= 1 E= -126.810960482662  delta_E= -0.383  |g|= 0.0897  |ddm|= 0.285
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0928692
diis-c [-0.00862468  1.        ]
  HOMO = -0.607399299349437  LUMO = 5.43442760605127
  mo_energy =
[-3.26056243e+01 -1.79600462e+00 -6.07399299e-01 -6.07399299e-01
 -6.07399299e-01  5.43442761e+00  5.43442761e+00  5.43442761e+00
  5.20485081e+01  6.33819818e+02]
E1 = -181.24968506407063  E_coul = 54.43857605469546
cycle= 2 E= -126.811109009375  delta_E= -0.000149  |g|= 0.00829  |ddm|= 0.0118
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0100879
diis-c [-6.03456038e-05  6.50218139e-02  9.34978186e-01]
  HOMO = -0.603103142061098  LUMO = 5.44142005138677
  mo_energy =
[-3.25883967e+01 -1.79100461e+00 -6.03103142e-01 -6.03103142e-01
 -6.03103142e-01  5.44142005e+00  5.44142005e+00  5.44142005e+00
  5.20647484e+01  6.33840643e+02]
E1 = -181.23808448597794  E_coul = 54.426971629534336
cycle= 3 E= -126.811112856444  delta_E= -3.85e-06  |g|= 0.000764  |ddm|= 0.00183
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000918436
diis-c [-1.19339650e-08 -1.82215924e-03  7.32254843e-02  9.28596675e-01]
  HOMO = -0.603465014970777  LUMO = 5.4408387239093
  mo_energy =
[-3.25897700e+01 -1.79142284e+00 -6.03465015e-01 -6.03465015e-01
 -6.03465015e-01  5.44083872e+00  5.44083872e+00  5.44083872e+00
  5.20634702e+01  6.33839244e+02]
E1 = -181.23904988930127  E_coul = 54.4279370010506
cycle= 4 E= -126.811112888251  delta_E= -3.18e-08  |g|= 1.53e-06  |ddm|= 0.000152
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=2.0248e-06
diis-c [-4.82053250e-14  2.68334851e-05 -1.35385113e-03 -1.68849619e-02
  1.01821198e+00]
  HOMO = -0.60346508242341  LUMO = 5.44083865968996
  mo_energy =
[-3.25897698e+01 -1.79142286e+00 -6.03465082e-01 -6.03465082e-01
 -6.03465082e-01  5.44083866e+00  5.44083866e+00  5.44083866e+00
  5.20634707e+01  6.33839247e+02]
E1 = -181.2390500890078  E_coul = 54.427937200757164
cycle= 5 E= -126.811112888251  delta_E= 2.84e-14  |g|= 7.65e-09  |ddm|= 6.1e-08
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -181.2390500890078  E_coul = 54.427937200757164
  HOMO = -0.603465080013228  LUMO = 5.44083866320225
  mo_energy =
[-3.25897697e+01 -1.79142285e+00 -6.03465080e-01 -6.03465080e-01
 -6.03465080e-01  5.44083866e+00  5.44083866e+00  5.44083866e+00
  5.20634707e+01  6.33839247e+02]
E1 = -181.23905008443532  E_coul = 54.42793719618459
Extra cycle  E= -126.811112888251  delta_E= -8.53e-14  |g|= 4.94e-10  |ddm|= 7.52e-10
    CPU time for scf_cycle      0.08 sec, wall time      0.09 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 9.556753237727849
E1 = -181.23905008443532  E_coul = 54.42793719618459
init E= -126.811112888251
    CPU time for initialize scf      0.04 sec, wall time      0.04 sec
  HOMO = -0.603465080289678  LUMO = 5.44083866274988
  mo_energy =
[-3.25897698e+01 -1.79142285e+00 -6.03465080e-01 -6.03465080e-01
 -6.03465080e-01  5.44083866e+00  5.44083866e+00  5.44083866e+00
  5.20634707e+01  6.33839247e+02]
E1 = -181.23905008521695  E_coul = 54.427937196966205
cycle= 1 E= -126.811112888251  delta_E=    0  |g|= 8.77e-11  |ddm|= 1.24e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -181.23905008521695  E_coul = 54.427937196966205
  HOMO = -0.603465080241112  LUMO = 5.44083866282835
  mo_energy =
[-3.25897698e+01 -1.79142285e+00 -6.03465080e-01 -6.03465080e-01
 -6.03465080e-01  5.44083866e+00  5.44083866e+00  5.44083866e+00
  5.20634707e+01  6.33839247e+02]
E1 = -181.23905008508734  E_coul = 54.42793719683671
Extra cycle  E= -126.811112888251  delta_E= 9.95e-14  |g|= 1.44e-11  |ddm|= 2.04e-11
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
exp = [466.31755333  67.1703071   14.57922082   0.94498989   5.39122508
   0.90396231]
grad_E = [ 0.00035403 -0.00351788 -0.00127269 -0.03010238  0.00906984 -0.02010126]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:28:59 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  453.838258217        1
[INPUT] 0    0    [1    /1   ]  68.3231820678        1
[INPUT] 0    0    [1    /1   ]  14.8354711077        1
[INPUT] 0    0    [1    /1   ]  0.966767831405       1
[INPUT] 1    0    [1    /1   ]  5.30499138268        1
[INPUT] 1    0    [1    /1   ]  0.894242093148       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [453.8382582168736, 1.0]], [0, [68.3231820677601, 1.0]], [0, [14.835471107740517, 1.0]], [0, [0.9667678314054396, 1.0]], [1, [5.304991382677593, 1.0]], [1, [0.8942420931476742, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [453.83825822]
bas 1, expnt(s) = [68.32318207]
bas 2, expnt(s) = [14.83547111]
bas 3, expnt(s) = [0.96676783]
bas 4, expnt(s) = [5.30499138]
bas 5, expnt(s) = [0.89424209]
CPU time:       197.48
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.         453.83825822
 248.42245658  68.32318207  60.0400559   14.83547111  19.09813816
   0.96676783   2.46323966   5.30499138  23.48768674   0.89424209
   2.53689959]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.825254381585825
cond(S) = 9.81869611167963
E1 = -180.82120211136228  E_coul = 54.37390911665321
init E= -126.447292994709
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.647912480139305  LUMO = 5.3212127150875
  mo_energy =
[-32.44646037  -1.8339405   -0.64791248  -0.64791248  -0.64791248
   5.32121272   5.32121272   5.32121272  53.73391549 625.54691043]
E1 = -181.20715513532005  E_coul = 54.39170590322861
cycle= 1 E= -126.815449232091  delta_E= -0.368  |g|= 0.0869  |ddm|= 0.284
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0886387
diis-c [-0.00785682  1.        ]
  HOMO = -0.604345127703311  LUMO = 5.35026817379267
  mo_energy =
[-3.26001032e+01 -1.79882242e+00 -6.04345128e-01 -6.04345128e-01
 -6.04345128e-01  5.35026817e+00  5.35026817e+00  5.35026817e+00
  5.36161569e+01  6.25340402e+02]
E1 = -181.28412558186878  E_coul = 54.46852596138145
cycle= 2 E= -126.815599620487  delta_E= -0.00015  |g|= 0.00837  |ddm|= 0.012
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0102332
diis-c [-5.36165878e-05  7.48658836e-02  9.25134116e-01]
  HOMO = -0.600000027104626  LUMO = 5.35726296624955
  mo_energy =
[-3.25827195e+01 -1.79369595e+00 -6.00000027e-01 -6.00000027e-01
 -6.00000027e-01  5.35726297e+00  5.35726297e+00  5.35726297e+00
  5.36325540e+01  6.25361309e+02]
E1 = -181.272245689016  E_coul = 54.456642008376605
cycle= 3 E= -126.815603680639  delta_E= -4.06e-06  |g|= 0.000698  |ddm|= 0.00188
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000833212
diis-c [-6.84803583e-09 -1.79516865e-03  6.50393271e-02  9.36755842e-01]
  HOMO = -0.600331219982286  LUMO = 5.35673792592507
  mo_energy =
[-3.25839561e+01 -1.79408634e+00 -6.00331220e-01 -6.00331220e-01
 -6.00331220e-01  5.35673793e+00  5.35673793e+00  5.35673793e+00
  5.36313931e+01  6.25360085e+02]
E1 = -181.27313190046976  E_coul = 54.457528193330425
cycle= 4 E= -126.815603707139  delta_E= -2.65e-08  |g|= 1.21e-06  |ddm|= 0.00014
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.59406e-06
diis-c [-3.00655640e-14  2.62106920e-05 -1.12500855e-03 -1.65623286e-02
  1.01766113e+00]
  HOMO = -0.600331465045244  LUMO = 5.3567375789193
  mo_energy =
[-3.25839565e+01 -1.79408660e+00 -6.00331465e-01 -6.00331465e-01
 -6.00331465e-01  5.35673758e+00  5.35673758e+00  5.35673758e+00
  5.36313929e+01  6.25360087e+02]
E1 = -181.2731325095622  E_coul = 54.45752880242294
cycle= 5 E= -126.815603707139  delta_E= 7.11e-14  |g|= 6.41e-09  |ddm|= 9.96e-08
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -181.2731325095622  E_coul = 54.45752880242294
  HOMO = -0.600331462903658  LUMO = 5.35673758206781
  mo_energy =
[-3.25839565e+01 -1.79408660e+00 -6.00331463e-01 -6.00331463e-01
 -6.00331463e-01  5.35673758e+00  5.35673758e+00  5.35673758e+00
  5.36313929e+01  6.25360087e+02]
E1 = -181.27313250527808  E_coul = 54.45752879813884
Extra cycle  E= -126.815603707139  delta_E= 1.42e-14  |g|= 4.6e-10  |ddm|= 6.93e-10
    CPU time for scf_cycle      0.08 sec, wall time      0.09 sec
exp = [453.83825822  68.32318207  14.83547111   0.96676783   5.30499138
   0.89424209]
E = -126.81560370713925
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:29:00 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  453.838258217        1
[INPUT] 0    0    [1    /1   ]  68.3231820678        1
[INPUT] 0    0    [1    /1   ]  14.8354711077        1
[INPUT] 0    0    [1    /1   ]  0.966767831405       1
[INPUT] 1    0    [1    /1   ]  5.30499138268        1
[INPUT] 1    0    [1    /1   ]  0.894242093148       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [453.8382582168736, 1.0]], [0, [68.3231820677601, 1.0]], [0, [14.835471107740517, 1.0]], [0, [0.9667678314054396, 1.0]], [1, [5.304991382677593, 1.0]], [1, [0.8942420931476742, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [453.83825822]
bas 1, expnt(s) = [68.32318207]
bas 2, expnt(s) = [14.83547111]
bas 3, expnt(s) = [0.96676783]
bas 4, expnt(s) = [5.30499138]
bas 5, expnt(s) = [0.89424209]
CPU time:       198.22
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.         453.83825822
 248.42245658  68.32318207  60.0400559   14.83547111  19.09813816
   0.96676783   2.46323966   5.30499138  23.48768674   0.89424209
   2.53689959]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.825254381585825
cond(S) = 9.81869611167963
E1 = -180.82120211136228  E_coul = 54.37390911665321
init E= -126.447292994709
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.647912480139305  LUMO = 5.3212127150875
  mo_energy =
[-32.44646037  -1.8339405   -0.64791248  -0.64791248  -0.64791248
   5.32121272   5.32121272   5.32121272  53.73391549 625.54691043]
E1 = -181.20715513532005  E_coul = 54.39170590322861
cycle= 1 E= -126.815449232091  delta_E= -0.368  |g|= 0.0869  |ddm|= 0.284
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0886387
diis-c [-0.00785682  1.        ]
  HOMO = -0.604345127703311  LUMO = 5.35026817379267
  mo_energy =
[-3.26001032e+01 -1.79882242e+00 -6.04345128e-01 -6.04345128e-01
 -6.04345128e-01  5.35026817e+00  5.35026817e+00  5.35026817e+00
  5.36161569e+01  6.25340402e+02]
E1 = -181.28412558186878  E_coul = 54.46852596138145
cycle= 2 E= -126.815599620487  delta_E= -0.00015  |g|= 0.00837  |ddm|= 0.012
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0102332
diis-c [-5.36165878e-05  7.48658836e-02  9.25134116e-01]
  HOMO = -0.600000027104626  LUMO = 5.35726296624955
  mo_energy =
[-3.25827195e+01 -1.79369595e+00 -6.00000027e-01 -6.00000027e-01
 -6.00000027e-01  5.35726297e+00  5.35726297e+00  5.35726297e+00
  5.36325540e+01  6.25361309e+02]
E1 = -181.272245689016  E_coul = 54.456642008376605
cycle= 3 E= -126.815603680639  delta_E= -4.06e-06  |g|= 0.000698  |ddm|= 0.00188
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000833212
diis-c [-6.84803583e-09 -1.79516865e-03  6.50393271e-02  9.36755842e-01]
  HOMO = -0.600331219982286  LUMO = 5.35673792592507
  mo_energy =
[-3.25839561e+01 -1.79408634e+00 -6.00331220e-01 -6.00331220e-01
 -6.00331220e-01  5.35673793e+00  5.35673793e+00  5.35673793e+00
  5.36313931e+01  6.25360085e+02]
E1 = -181.27313190046976  E_coul = 54.457528193330425
cycle= 4 E= -126.815603707139  delta_E= -2.65e-08  |g|= 1.21e-06  |ddm|= 0.00014
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.59406e-06
diis-c [-3.00655640e-14  2.62106920e-05 -1.12500855e-03 -1.65623286e-02
  1.01766113e+00]
  HOMO = -0.600331465045244  LUMO = 5.3567375789193
  mo_energy =
[-3.25839565e+01 -1.79408660e+00 -6.00331465e-01 -6.00331465e-01
 -6.00331465e-01  5.35673758e+00  5.35673758e+00  5.35673758e+00
  5.36313929e+01  6.25360087e+02]
E1 = -181.2731325095622  E_coul = 54.45752880242294
cycle= 5 E= -126.815603707139  delta_E= 7.11e-14  |g|= 6.41e-09  |ddm|= 9.96e-08
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -181.2731325095622  E_coul = 54.45752880242294
  HOMO = -0.600331462903658  LUMO = 5.35673758206781
  mo_energy =
[-3.25839565e+01 -1.79408660e+00 -6.00331463e-01 -6.00331463e-01
 -6.00331463e-01  5.35673758e+00  5.35673758e+00  5.35673758e+00
  5.36313929e+01  6.25360087e+02]
E1 = -181.27313250527808  E_coul = 54.45752879813884
Extra cycle  E= -126.815603707139  delta_E= 1.42e-14  |g|= 4.6e-10  |ddm|= 6.93e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 9.81869611167963
E1 = -181.27313250527808  E_coul = 54.45752879813884
init E= -126.815603707139
    CPU time for initialize scf      0.04 sec, wall time      0.04 sec
  HOMO = -0.600331463163924  LUMO = 5.3567375816478
  mo_energy =
[-3.25839565e+01 -1.79408660e+00 -6.00331463e-01 -6.00331463e-01
 -6.00331463e-01  5.35673758e+00  5.35673758e+00  5.35673758e+00
  5.36313929e+01  6.25360087e+02]
E1 = -181.27313250601404  E_coul = 54.457528798874854
cycle= 1 E= -126.815603707139  delta_E= 5.68e-14  |g|= 8.19e-11  |ddm|= 1.17e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -181.27313250601404  E_coul = 54.457528798874854
  HOMO = -0.600331463118209  LUMO = 5.35673758172086
  mo_energy =
[-3.25839565e+01 -1.79408660e+00 -6.00331463e-01 -6.00331463e-01
 -6.00331463e-01  5.35673758e+00  5.35673758e+00  5.35673758e+00
  5.36313929e+01  6.25360087e+02]
E1 = -181.27313250589089  E_coul = 54.45752879875168
Extra cycle  E= -126.815603707139  delta_E= -1.42e-14  |g|= 1.36e-11  |ddm|= 1.95e-11
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [453.83825822  68.32318207  14.83547111   0.96676783   5.30499138
   0.89424209]
grad_E = [ 1.00456137e-05 -2.98504175e-04  1.37352228e-03  5.16935312e-02
  7.18180619e-06 -2.73820729e-03]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:29:03 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  452.926064211        1
[INPUT] 0    0    [1    /1   ]  68.2688128954        1
[INPUT] 0    0    [1    /1   ]  14.7962608008        1
[INPUT] 0    0    [1    /1   ]  0.95428270321        1
[INPUT] 1    0    [1    /1   ]  5.31383956929        1
[INPUT] 1    0    [1    /1   ]  0.896096315405       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [452.9260642110038, 1.0]], [0, [68.26881289537448, 1.0]], [0, [14.796260800810291, 1.0]], [0, [0.9542827032099134, 1.0]], [1, [5.313839569293581, 1.0]], [1, [0.8960963154045591, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [452.92606421]
bas 1, expnt(s) = [68.2688129]
bas 2, expnt(s) = [14.7962608]
bas 3, expnt(s) = [0.9542827]
bas 4, expnt(s) = [5.31383957]
bas 5, expnt(s) = [0.89609632]
CPU time:       201.20
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.         452.92606421
 248.04787413  68.2688129   60.00421902  14.7962608   19.0602682
   0.9542827    2.43934267   5.31383957  23.53666579   0.89609632
   2.54347666]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.825976499240223
cond(S) = 9.790445747177841
E1 = -180.77742554078998  E_coul = 54.33479054011562
init E= -126.442635000674
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.651130551682114  LUMO = 5.32854475870752
  mo_energy =
[-32.4540499   -1.83642759  -0.65113055  -0.65113055  -0.65113055
   5.32854476   5.32854476   5.32854476  53.53497126 624.23235963]
E1 = -181.1689442278332  E_coul = 54.35316464313435
cycle= 1 E= -126.815779584699  delta_E= -0.373  |g|= 0.085  |ddm|= 0.285
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0874113
diis-c [-0.00764074  1.        ]
  HOMO = -0.607549742339919  LUMO = 5.35759750672367
  mo_energy =
[-3.26090695e+01 -1.79968039e+00 -6.07549742e-01 -6.07549742e-01
 -6.07549742e-01  5.35759751e+00  5.35759751e+00  5.35759751e+00
  5.34176859e+01  6.24019091e+02]
E1 = -181.2468844447913  E_coul = 54.43095041670135
cycle= 2 E= -126.81593402809  delta_E= -0.000154  |g|= 0.00852  |ddm|= 0.0122
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0103811
diis-c [-5.28528863e-05  7.84012985e-02  9.21598702e-01]
  HOMO = -0.603154506662184  LUMO = 5.36466801458519
  mo_energy =
[-3.25915506e+01 -1.79453017e+00 -6.03154507e-01 -6.03154507e-01
 -6.03154507e-01  5.36466801e+00  5.36466801e+00  5.36466801e+00
  5.34342429e+01  6.24040077e+02]
E1 = -181.23492958921864  E_coul = 54.418991401395296
cycle= 3 E= -126.815938187823  delta_E= -4.16e-06  |g|= 0.000668  |ddm|= 0.00189
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000799673
diis-c [-8.47416668e-09 -1.91162398e-03  6.04877640e-02  9.41423860e-01]
  HOMO = -0.60347141659165  LUMO = 5.3641656818666
  mo_energy =
[-3.25927349e+01 -1.79489962e+00 -6.03471417e-01 -6.03471417e-01
 -6.03471417e-01  5.36416568e+00  5.36416568e+00  5.36416568e+00
  5.34331357e+01  6.24038910e+02]
E1 = -181.23577789599412  E_coul = 54.419839683849695
cycle= 4 E= -126.815938212144  delta_E= -2.43e-08  |g|= 1.2e-06  |ddm|= 0.000134
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.63492e-06
diis-c [-3.71728660e-14  2.67046584e-05 -1.05222068e-03 -1.61861683e-02
  1.01721168e+00]
  HOMO = -0.603471520908059  LUMO = 5.36416554883892
  mo_energy =
[-3.25927349e+01 -1.79489970e+00 -6.03471521e-01 -6.03471521e-01
 -6.03471521e-01  5.36416555e+00  5.36416555e+00  5.36416555e+00
  5.34331359e+01  6.24038912e+02]
E1 = -181.23577818287927  E_coul = 54.41983997073468
cycle= 5 E= -126.815938212145  delta_E= -1.71e-13  |g|= 6.54e-09  |ddm|= 5.91e-08
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -181.23577818287927  E_coul = 54.41983997073468
  HOMO = -0.603471518850267  LUMO = 5.36416555185992
  mo_energy =
[-3.25927349e+01 -1.79489970e+00 -6.03471519e-01 -6.03471519e-01
 -6.03471519e-01  5.36416555e+00  5.36416555e+00  5.36416555e+00
  5.34331360e+01  6.24038912e+02]
E1 = -181.2357781789307  E_coul = 54.419839966786235
Extra cycle  E= -126.815938212144  delta_E= 1.42e-13  |g|= 4.24e-10  |ddm|= 6.47e-10
    CPU time for scf_cycle      0.08 sec, wall time      0.08 sec
exp = [452.92606421  68.2688129   14.7962608    0.9542827    5.31383957
   0.89609632]
E = -126.81593821214446
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:29:04 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  452.926064211        1
[INPUT] 0    0    [1    /1   ]  68.2688128954        1
[INPUT] 0    0    [1    /1   ]  14.7962608008        1
[INPUT] 0    0    [1    /1   ]  0.95428270321        1
[INPUT] 1    0    [1    /1   ]  5.31383956929        1
[INPUT] 1    0    [1    /1   ]  0.896096315405       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [452.9260642110038, 1.0]], [0, [68.26881289537448, 1.0]], [0, [14.796260800810291, 1.0]], [0, [0.9542827032099134, 1.0]], [1, [5.313839569293581, 1.0]], [1, [0.8960963154045591, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [452.92606421]
bas 1, expnt(s) = [68.2688129]
bas 2, expnt(s) = [14.7962608]
bas 3, expnt(s) = [0.9542827]
bas 4, expnt(s) = [5.31383957]
bas 5, expnt(s) = [0.89609632]
CPU time:       201.97
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.         452.92606421
 248.04787413  68.2688129   60.00421902  14.7962608   19.0602682
   0.9542827    2.43934267   5.31383957  23.53666579   0.89609632
   2.54347666]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.825976499240223
cond(S) = 9.790445747177841
E1 = -180.77742554078998  E_coul = 54.33479054011562
init E= -126.442635000674
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.651130551682114  LUMO = 5.32854475870752
  mo_energy =
[-32.4540499   -1.83642759  -0.65113055  -0.65113055  -0.65113055
   5.32854476   5.32854476   5.32854476  53.53497126 624.23235963]
E1 = -181.1689442278332  E_coul = 54.35316464313435
cycle= 1 E= -126.815779584699  delta_E= -0.373  |g|= 0.085  |ddm|= 0.285
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0874113
diis-c [-0.00764074  1.        ]
  HOMO = -0.607549742339919  LUMO = 5.35759750672367
  mo_energy =
[-3.26090695e+01 -1.79968039e+00 -6.07549742e-01 -6.07549742e-01
 -6.07549742e-01  5.35759751e+00  5.35759751e+00  5.35759751e+00
  5.34176859e+01  6.24019091e+02]
E1 = -181.2468844447913  E_coul = 54.43095041670135
cycle= 2 E= -126.81593402809  delta_E= -0.000154  |g|= 0.00852  |ddm|= 0.0122
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0103811
diis-c [-5.28528863e-05  7.84012985e-02  9.21598702e-01]
  HOMO = -0.603154506662184  LUMO = 5.36466801458519
  mo_energy =
[-3.25915506e+01 -1.79453017e+00 -6.03154507e-01 -6.03154507e-01
 -6.03154507e-01  5.36466801e+00  5.36466801e+00  5.36466801e+00
  5.34342429e+01  6.24040077e+02]
E1 = -181.23492958921864  E_coul = 54.418991401395296
cycle= 3 E= -126.815938187823  delta_E= -4.16e-06  |g|= 0.000668  |ddm|= 0.00189
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000799673
diis-c [-8.47416668e-09 -1.91162398e-03  6.04877640e-02  9.41423860e-01]
  HOMO = -0.60347141659165  LUMO = 5.3641656818666
  mo_energy =
[-3.25927349e+01 -1.79489962e+00 -6.03471417e-01 -6.03471417e-01
 -6.03471417e-01  5.36416568e+00  5.36416568e+00  5.36416568e+00
  5.34331357e+01  6.24038910e+02]
E1 = -181.23577789599412  E_coul = 54.419839683849695
cycle= 4 E= -126.815938212144  delta_E= -2.43e-08  |g|= 1.2e-06  |ddm|= 0.000134
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.63492e-06
diis-c [-3.71728660e-14  2.67046584e-05 -1.05222068e-03 -1.61861683e-02
  1.01721168e+00]
  HOMO = -0.603471520908059  LUMO = 5.36416554883892
  mo_energy =
[-3.25927349e+01 -1.79489970e+00 -6.03471521e-01 -6.03471521e-01
 -6.03471521e-01  5.36416555e+00  5.36416555e+00  5.36416555e+00
  5.34331359e+01  6.24038912e+02]
E1 = -181.23577818287927  E_coul = 54.41983997073468
cycle= 5 E= -126.815938212145  delta_E= -1.71e-13  |g|= 6.54e-09  |ddm|= 5.91e-08
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -181.23577818287927  E_coul = 54.41983997073468
  HOMO = -0.603471518850267  LUMO = 5.36416555185992
  mo_energy =
[-3.25927349e+01 -1.79489970e+00 -6.03471519e-01 -6.03471519e-01
 -6.03471519e-01  5.36416555e+00  5.36416555e+00  5.36416555e+00
  5.34331360e+01  6.24038912e+02]
E1 = -181.2357781789307  E_coul = 54.419839966786235
Extra cycle  E= -126.815938212144  delta_E= 1.42e-13  |g|= 4.24e-10  |ddm|= 6.47e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 9.790445747177841
E1 = -181.2357781789307  E_coul = 54.419839966786235
init E= -126.815938212144
    CPU time for initialize scf      0.04 sec, wall time      0.04 sec
  HOMO = -0.603471519089643  LUMO = 5.36416555147302
  mo_energy =
[-3.25927349e+01 -1.79489970e+00 -6.03471519e-01 -6.03471519e-01
 -6.03471519e-01  5.36416555e+00  5.36416555e+00  5.36416555e+00
  5.34331360e+01  6.24038912e+02]
E1 = -181.23577817961066  E_coul = 54.419839967466146
cycle= 1 E= -126.815938212145  delta_E= -5.68e-14  |g|= 7.58e-11  |ddm|= 1.08e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -181.23577817961066  E_coul = 54.419839967466146
  HOMO = -0.603471519047341  LUMO = 5.36416555154061
  mo_energy =
[-3.25927349e+01 -1.79489970e+00 -6.03471519e-01 -6.03471519e-01
 -6.03471519e-01  5.36416555e+00  5.36416555e+00  5.36416555e+00
  5.34331360e+01  6.24038912e+02]
E1 = -181.23577817949698  E_coul = 54.41983996735248
Extra cycle  E= -126.815938212144  delta_E= 2.84e-14  |g|= 1.25e-11  |ddm|= 1.8e-11
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [452.92606421  68.2688129   14.7962608    0.9542827    5.31383957
   0.89609632]
grad_E = [-9.72564986e-06  2.07048867e-04 -1.59716428e-03  2.08208870e-03
  5.89865528e-05 -2.46726927e-03]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:29:07 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  453.494642702        1
[INPUT] 0    0    [1    /1   ]  68.3086514931        1
[INPUT] 0    0    [1    /1   ]  14.8130060006        1
[INPUT] 0    0    [1    /1   ]  0.954071533625       1
[INPUT] 1    0    [1    /1   ]  5.31553516148        1
[INPUT] 1    0    [1    /1   ]  0.896427180059       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [453.4946427022759, 1.0]], [0, [68.30865149305778, 1.0]], [0, [14.813006000621709, 1.0]], [0, [0.9540715336254195, 1.0]], [1, [5.3155351614784445, 1.0]], [1, [0.8964271800591601, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [453.4946427]
bas 1, expnt(s) = [68.30865149]
bas 2, expnt(s) = [14.813006]
bas 3, expnt(s) = [0.95407153]
bas 4, expnt(s) = [5.31553516]
bas 5, expnt(s) = [0.89642718]
CPU time:       204.94
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.         453.4946427
 248.28137676  68.30865149  60.03047892  14.813006    19.07644406
   0.95407153   2.43893782   5.31553516  23.54605405   0.89642718
   2.54465062]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.82585228574892
cond(S) = 9.79028717166343
E1 = -180.77634227570084  E_coul = 54.33473542861213
init E= -126.441606847089
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.65114706735916  LUMO = 5.33083626837019
  mo_energy =
[-32.4538627   -1.83658993  -0.65114707  -0.65114707  -0.65114707
   5.33083627   5.33083627   5.33083627  53.60391301 625.01796631]
E1 = -181.17330005694467  E_coul = 54.35750216958702
cycle= 1 E= -126.815797887358  delta_E= -0.374  |g|= 0.0853  |ddm|= 0.284
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0875944
diis-c [-0.00767278  1.        ]
  HOMO = -0.607297033635966  LUMO = 5.36028969171776
  mo_energy =
[-3.26078129e+01 -1.79953394e+00 -6.07297034e-01 -6.07297034e-01
 -6.07297034e-01  5.36028969e+00  5.36028969e+00  5.36028969e+00
  5.34876148e+01  6.24806720e+02]
E1 = -181.2504869853314  E_coul = 54.434537188244086
cycle= 2 E= -126.815949797087  delta_E= -0.000152  |g|= 0.00843  |ddm|= 0.0121
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0102785
diis-c [-5.32097990e-05  7.66032340e-02  9.23396766e-01]
  HOMO = -0.602937147304992  LUMO = 5.36730574058065
  mo_energy =
[-3.25904229e+01 -1.79442569e+00 -6.02937147e-01 -6.02937147e-01
 -6.02937147e-01  5.36730574e+00  5.36730574e+00  5.36730574e+00
  5.35040527e+01  6.24827581e+02]
E1 = -181.23863231142388  E_coul = 54.422678438923796
cycle= 3 E= -126.8159538725  delta_E= -4.08e-06  |g|= 0.000678  |ddm|= 0.00188
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000812213
diis-c [-8.58952705e-09 -1.90164088e-03  6.22935026e-02  9.39608138e-01]
  HOMO = -0.60325919867847  LUMO = 5.36679501079555
  mo_energy =
[-3.25916276e+01 -1.79480116e+00 -6.03259199e-01 -6.03259199e-01
 -6.03259199e-01  5.36679501e+00  5.36679501e+00  5.36679501e+00
  5.35029260e+01  6.24826390e+02]
E1 = -181.23949403030048  E_coul = 54.42354013269551
cycle= 4 E= -126.815953897605  delta_E= -2.51e-08  |g|= 1.21e-06  |ddm|= 0.000136
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.65026e-06
diis-c [-3.71331636e-14  2.66659601e-05 -1.08498911e-03 -1.61986609e-02
  1.01725698e+00]
  HOMO = -0.603259306693584  LUMO = 5.36679487318368
  mo_energy =
[-3.25916276e+01 -1.79480125e+00 -6.03259307e-01 -6.03259307e-01
 -6.03259307e-01  5.36679487e+00  5.36679487e+00  5.36679487e+00
  5.35029263e+01  6.24826392e+02]
E1 = -181.23949432443865  E_coul = 54.42354042683372
cycle= 5 E= -126.815953897605  delta_E= 2.84e-14  |g|= 6.59e-09  |ddm|= 6e-08
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -181.23949432443865  E_coul = 54.42354042683372
  HOMO = -0.603259304597717  LUMO = 5.3667948762579
  mo_energy =
[-3.25916276e+01 -1.79480125e+00 -6.03259305e-01 -6.03259305e-01
 -6.03259305e-01  5.36679488e+00  5.36679488e+00  5.36679488e+00
  5.35029263e+01  6.24826392e+02]
E1 = -181.23949432039512  E_coul = 54.42354042279022
Extra cycle  E= -126.815953897605  delta_E= 2.84e-14  |g|= 4.34e-10  |ddm|= 6.61e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
exp = [453.4946427   68.30865149  14.813006     0.95407153   5.31553516
   0.89642718]
E = -126.81595389760491
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:29:07 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  453.494642702        1
[INPUT] 0    0    [1    /1   ]  68.3086514931        1
[INPUT] 0    0    [1    /1   ]  14.8130060006        1
[INPUT] 0    0    [1    /1   ]  0.954071533625       1
[INPUT] 1    0    [1    /1   ]  5.31553516148        1
[INPUT] 1    0    [1    /1   ]  0.896427180059       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [453.4946427022759, 1.0]], [0, [68.30865149305778, 1.0]], [0, [14.813006000621709, 1.0]], [0, [0.9540715336254195, 1.0]], [1, [5.3155351614784445, 1.0]], [1, [0.8964271800591601, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [453.4946427]
bas 1, expnt(s) = [68.30865149]
bas 2, expnt(s) = [14.813006]
bas 3, expnt(s) = [0.95407153]
bas 4, expnt(s) = [5.31553516]
bas 5, expnt(s) = [0.89642718]
CPU time:       205.70
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.         453.4946427
 248.28137676  68.30865149  60.03047892  14.813006    19.07644406
   0.95407153   2.43893782   5.31553516  23.54605405   0.89642718
   2.54465062]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.82585228574892
cond(S) = 9.79028717166343
E1 = -180.77634227570084  E_coul = 54.33473542861213
init E= -126.441606847089
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.65114706735916  LUMO = 5.33083626837019
  mo_energy =
[-32.4538627   -1.83658993  -0.65114707  -0.65114707  -0.65114707
   5.33083627   5.33083627   5.33083627  53.60391301 625.01796631]
E1 = -181.17330005694467  E_coul = 54.35750216958702
cycle= 1 E= -126.815797887358  delta_E= -0.374  |g|= 0.0853  |ddm|= 0.284
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0875944
diis-c [-0.00767278  1.        ]
  HOMO = -0.607297033635966  LUMO = 5.36028969171776
  mo_energy =
[-3.26078129e+01 -1.79953394e+00 -6.07297034e-01 -6.07297034e-01
 -6.07297034e-01  5.36028969e+00  5.36028969e+00  5.36028969e+00
  5.34876148e+01  6.24806720e+02]
E1 = -181.2504869853314  E_coul = 54.434537188244086
cycle= 2 E= -126.815949797087  delta_E= -0.000152  |g|= 0.00843  |ddm|= 0.0121
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0102785
diis-c [-5.32097990e-05  7.66032340e-02  9.23396766e-01]
  HOMO = -0.602937147304992  LUMO = 5.36730574058065
  mo_energy =
[-3.25904229e+01 -1.79442569e+00 -6.02937147e-01 -6.02937147e-01
 -6.02937147e-01  5.36730574e+00  5.36730574e+00  5.36730574e+00
  5.35040527e+01  6.24827581e+02]
E1 = -181.23863231142388  E_coul = 54.422678438923796
cycle= 3 E= -126.8159538725  delta_E= -4.08e-06  |g|= 0.000678  |ddm|= 0.00188
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000812213
diis-c [-8.58952705e-09 -1.90164088e-03  6.22935026e-02  9.39608138e-01]
  HOMO = -0.60325919867847  LUMO = 5.36679501079555
  mo_energy =
[-3.25916276e+01 -1.79480116e+00 -6.03259199e-01 -6.03259199e-01
 -6.03259199e-01  5.36679501e+00  5.36679501e+00  5.36679501e+00
  5.35029260e+01  6.24826390e+02]
E1 = -181.23949403030048  E_coul = 54.42354013269551
cycle= 4 E= -126.815953897605  delta_E= -2.51e-08  |g|= 1.21e-06  |ddm|= 0.000136
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.65026e-06
diis-c [-3.71331636e-14  2.66659601e-05 -1.08498911e-03 -1.61986609e-02
  1.01725698e+00]
  HOMO = -0.603259306693584  LUMO = 5.36679487318368
  mo_energy =
[-3.25916276e+01 -1.79480125e+00 -6.03259307e-01 -6.03259307e-01
 -6.03259307e-01  5.36679487e+00  5.36679487e+00  5.36679487e+00
  5.35029263e+01  6.24826392e+02]
E1 = -181.23949432443865  E_coul = 54.42354042683372
cycle= 5 E= -126.815953897605  delta_E= 2.84e-14  |g|= 6.59e-09  |ddm|= 6e-08
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -181.23949432443865  E_coul = 54.42354042683372
  HOMO = -0.603259304597717  LUMO = 5.3667948762579
  mo_energy =
[-3.25916276e+01 -1.79480125e+00 -6.03259305e-01 -6.03259305e-01
 -6.03259305e-01  5.36679488e+00  5.36679488e+00  5.36679488e+00
  5.35029263e+01  6.24826392e+02]
E1 = -181.23949432039512  E_coul = 54.42354042279022
Extra cycle  E= -126.815953897605  delta_E= 2.84e-14  |g|= 4.34e-10  |ddm|= 6.61e-10
    CPU time for scf_cycle      0.08 sec, wall time      0.08 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 9.79028717166343
E1 = -181.23949432039512  E_coul = 54.42354042279022
init E= -126.815953897605
    CPU time for initialize scf      0.04 sec, wall time      0.04 sec
  HOMO = -0.603259304842958  LUMO = 5.36679487586152
  mo_energy =
[-3.25916276e+01 -1.79480125e+00 -6.03259305e-01 -6.03259305e-01
 -6.03259305e-01  5.36679488e+00  5.36679488e+00  5.36679488e+00
  5.35029263e+01  6.24826392e+02]
E1 = -181.23949432109035  E_coul = 54.423540423485534
cycle= 1 E= -126.815953897605  delta_E= 9.95e-14  |g|= 7.75e-11  |ddm|= 1.11e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -181.23949432109035  E_coul = 54.423540423485534
  HOMO = -0.603259304799703  LUMO = 5.36679487593065
  mo_energy =
[-3.25916276e+01 -1.79480125e+00 -6.03259305e-01 -6.03259305e-01
 -6.03259305e-01  5.36679488e+00  5.36679488e+00  5.36679488e+00
  5.35029263e+01  6.24826392e+02]
E1 = -181.23949432097416  E_coul = 54.42354042336937
Extra cycle  E= -126.815953897605  delta_E= 1.42e-14  |g|= 1.29e-11  |ddm|= 1.83e-11
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [453.4946427   68.30865149  14.813006     0.95407153   5.31553516
   0.89642718]
grad_E = [-7.92050605e-07  8.56525400e-06 -3.42000644e-04  1.01824065e-03
  6.24810324e-05 -7.54546756e-04]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:29:10 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  453.892485971        1
[INPUT] 0    0    [1    /1   ]  68.361153309         1
[INPUT] 0    0    [1    /1   ]  14.8231153282        1
[INPUT] 0    0    [1    /1   ]  0.953883855931       1
[INPUT] 1    0    [1    /1   ]  5.31581436898        1
[INPUT] 1    0    [1    /1   ]  0.896527486733       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [453.8924859714153, 1.0]], [0, [68.36115330901625, 1.0]], [0, [14.82311532818513, 1.0]], [0, [0.9538838559314027, 1.0]], [1, [5.315814368977716, 1.0]], [1, [0.8965274867333095, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [453.89248597]
bas 1, expnt(s) = [68.36115331]
bas 2, expnt(s) = [14.82311533]
bas 3, expnt(s) = [0.95388386]
bas 4, expnt(s) = [5.31581437]
bas 5, expnt(s) = [0.89652749]
CPU time:       208.67
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.         453.89248597
 248.44471868  68.36115331  60.06508002  14.82311533  19.08620745
   0.95388386   2.43857798   5.31581437  23.54760006   0.89652749
   2.54500655]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.825823223360066
cond(S) = 9.787416199161498
E1 = -180.77541128597514  E_coul = 54.3342913285395
init E= -126.441119957436
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.651182558877002  LUMO = 5.33133774269143
  mo_energy =
[-32.45387793  -1.83668682  -0.65118256  -0.65118256  -0.65118256
   5.33133774   5.33133774   5.33133774  53.66245489 625.64081302]
E1 = -181.174415107459  E_coul = 54.35861426303741
cycle= 1 E= -126.815800844422  delta_E= -0.375  |g|= 0.0853  |ddm|= 0.284
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0875742
diis-c [-0.00766924  1.        ]
  HOMO = -0.607241563802896  LUMO = 5.36093508763753
  mo_energy =
[-3.26074425e+01 -1.79951566e+00 -6.07241564e-01 -6.07241564e-01
 -6.07241564e-01  5.36093509e+00  5.36093509e+00  5.36093509e+00
  5.35464965e+01  6.25430303e+02]
E1 = -181.25132190636782  E_coul = 54.43537011606157
cycle= 2 E= -126.815951790306  delta_E= -0.000151  |g|= 0.0084  |ddm|= 0.0121
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0102399
diis-c [-5.32113210e-05  7.60818758e-02  9.23918124e-01]
  HOMO = -0.602895302360926  LUMO = 5.36792949818514
  mo_energy =
[-3.25901041e+01 -1.79442375e+00 -6.02895302e-01 -6.02895302e-01
 -6.02895302e-01  5.36792950e+00  5.36792950e+00  5.36792950e+00
  5.35628887e+01  6.25451110e+02]
E1 = -181.23950653885433  E_coul = 54.42355070428916
cycle= 3 E= -126.815955834565  delta_E= -4.04e-06  |g|= 0.00068  |ddm|= 0.00187
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000814987
diis-c [-8.62175636e-09 -1.89976134e-03  6.28019618e-02  9.39097800e-01]
  HOMO = -0.603218524000164  LUMO = 5.36741686403902
  mo_energy =
[-3.25913136e+01 -1.79480057e+00 -6.03218524e-01 -6.03218524e-01
 -6.03218524e-01  5.36741686e+00  5.36741686e+00  5.36741686e+00
  5.35617574e+01  6.25449914e+02]
E1 = -181.24037125485523  E_coul = 54.42441539500798
cycle= 4 E= -126.815955859847  delta_E= -2.53e-08  |g|= 1.22e-06  |ddm|= 0.000137
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.65232e-06
diis-c [-3.70464570e-14  2.66344863e-05 -1.09345886e-03 -1.61844793e-02
  1.01725130e+00]
  HOMO = -0.603218631352259  LUMO = 5.36741672770231
  mo_energy =
[-3.25913136e+01 -1.79480066e+00 -6.03218631e-01 -6.03218631e-01
 -6.03218631e-01  5.36741673e+00  5.36741673e+00  5.36741673e+00
  5.35617576e+01  6.25449916e+02]
E1 = -181.24037154690973  E_coul = 54.42441568706245
cycle= 5 E= -126.815955859847  delta_E= -2.84e-14  |g|= 6.59e-09  |ddm|= 5.98e-08
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -181.24037154690973  E_coul = 54.42441568706245
  HOMO = -0.603218629250523  LUMO = 5.36741673078442
  mo_energy =
[-3.25913135e+01 -1.79480065e+00 -6.03218629e-01 -6.03218629e-01
 -6.03218629e-01  5.36741673e+00  5.36741673e+00  5.36741673e+00
  5.35617576e+01  6.25449916e+02]
E1 = -181.2403715428487  E_coul = 54.42441568300137
Extra cycle  E= -126.815955859847  delta_E= -4.26e-14  |g|= 4.36e-10  |ddm|= 6.64e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
exp = [453.89248597  68.36115331  14.82311533   0.95388386   5.31581437
   0.89652749]
E = -126.81595585984732
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:29:11 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  453.892485971        1
[INPUT] 0    0    [1    /1   ]  68.361153309         1
[INPUT] 0    0    [1    /1   ]  14.8231153282        1
[INPUT] 0    0    [1    /1   ]  0.953883855931       1
[INPUT] 1    0    [1    /1   ]  5.31581436898        1
[INPUT] 1    0    [1    /1   ]  0.896527486733       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [453.8924859714153, 1.0]], [0, [68.36115330901625, 1.0]], [0, [14.82311532818513, 1.0]], [0, [0.9538838559314027, 1.0]], [1, [5.315814368977716, 1.0]], [1, [0.8965274867333095, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [453.89248597]
bas 1, expnt(s) = [68.36115331]
bas 2, expnt(s) = [14.82311533]
bas 3, expnt(s) = [0.95388386]
bas 4, expnt(s) = [5.31581437]
bas 5, expnt(s) = [0.89652749]
CPU time:       209.49
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.         453.89248597
 248.44471868  68.36115331  60.06508002  14.82311533  19.08620745
   0.95388386   2.43857798   5.31581437  23.54760006   0.89652749
   2.54500655]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.825823223360066
cond(S) = 9.787416199161498
E1 = -180.77541128597514  E_coul = 54.3342913285395
init E= -126.441119957436
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.651182558877002  LUMO = 5.33133774269143
  mo_energy =
[-32.45387793  -1.83668682  -0.65118256  -0.65118256  -0.65118256
   5.33133774   5.33133774   5.33133774  53.66245489 625.64081302]
E1 = -181.174415107459  E_coul = 54.35861426303741
cycle= 1 E= -126.815800844422  delta_E= -0.375  |g|= 0.0853  |ddm|= 0.284
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0875742
diis-c [-0.00766924  1.        ]
  HOMO = -0.607241563802896  LUMO = 5.36093508763753
  mo_energy =
[-3.26074425e+01 -1.79951566e+00 -6.07241564e-01 -6.07241564e-01
 -6.07241564e-01  5.36093509e+00  5.36093509e+00  5.36093509e+00
  5.35464965e+01  6.25430303e+02]
E1 = -181.25132190636782  E_coul = 54.43537011606157
cycle= 2 E= -126.815951790306  delta_E= -0.000151  |g|= 0.0084  |ddm|= 0.0121
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0102399
diis-c [-5.32113210e-05  7.60818758e-02  9.23918124e-01]
  HOMO = -0.602895302360926  LUMO = 5.36792949818514
  mo_energy =
[-3.25901041e+01 -1.79442375e+00 -6.02895302e-01 -6.02895302e-01
 -6.02895302e-01  5.36792950e+00  5.36792950e+00  5.36792950e+00
  5.35628887e+01  6.25451110e+02]
E1 = -181.23950653885433  E_coul = 54.42355070428916
cycle= 3 E= -126.815955834565  delta_E= -4.04e-06  |g|= 0.00068  |ddm|= 0.00187
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000814987
diis-c [-8.62175636e-09 -1.89976134e-03  6.28019618e-02  9.39097800e-01]
  HOMO = -0.603218524000164  LUMO = 5.36741686403902
  mo_energy =
[-3.25913136e+01 -1.79480057e+00 -6.03218524e-01 -6.03218524e-01
 -6.03218524e-01  5.36741686e+00  5.36741686e+00  5.36741686e+00
  5.35617574e+01  6.25449914e+02]
E1 = -181.24037125485523  E_coul = 54.42441539500798
cycle= 4 E= -126.815955859847  delta_E= -2.53e-08  |g|= 1.22e-06  |ddm|= 0.000137
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.65232e-06
diis-c [-3.70464570e-14  2.66344863e-05 -1.09345886e-03 -1.61844793e-02
  1.01725130e+00]
  HOMO = -0.603218631352259  LUMO = 5.36741672770231
  mo_energy =
[-3.25913136e+01 -1.79480066e+00 -6.03218631e-01 -6.03218631e-01
 -6.03218631e-01  5.36741673e+00  5.36741673e+00  5.36741673e+00
  5.35617576e+01  6.25449916e+02]
E1 = -181.24037154690973  E_coul = 54.42441568706245
cycle= 5 E= -126.815955859847  delta_E= -2.84e-14  |g|= 6.59e-09  |ddm|= 5.98e-08
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -181.24037154690973  E_coul = 54.42441568706245
  HOMO = -0.603218629250523  LUMO = 5.36741673078442
  mo_energy =
[-3.25913135e+01 -1.79480065e+00 -6.03218629e-01 -6.03218629e-01
 -6.03218629e-01  5.36741673e+00  5.36741673e+00  5.36741673e+00
  5.35617576e+01  6.25449916e+02]
E1 = -181.2403715428487  E_coul = 54.42441568300137
Extra cycle  E= -126.815955859847  delta_E= -4.26e-14  |g|= 4.36e-10  |ddm|= 6.64e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 9.787416199161498
E1 = -181.2403715428487  E_coul = 54.42441568300137
init E= -126.815955859847
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.603218629496874  LUMO = 5.36741673038627
  mo_energy =
[-3.25913135e+01 -1.79480065e+00 -6.03218629e-01 -6.03218629e-01
 -6.03218629e-01  5.36741673e+00  5.36741673e+00  5.36741673e+00
  5.35617576e+01  6.25449916e+02]
E1 = -181.24037154354662  E_coul = 54.42441568369941
cycle= 1 E= -126.815955859847  delta_E= 1.14e-13  |g|= 7.77e-11  |ddm|= 1.11e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -181.24037154354662  E_coul = 54.42441568369941
  HOMO = -0.603218629453446  LUMO = 5.36741673045567
  mo_energy =
[-3.25913135e+01 -1.79480065e+00 -6.03218629e-01 -6.03218629e-01
 -6.03218629e-01  5.36741673e+00  5.36741673e+00  5.36741673e+00
  5.35617576e+01  6.25449916e+02]
E1 = -181.2403715434301  E_coul = 54.42441568358289
Extra cycle  E= -126.815955859847  delta_E= 1.42e-14  |g|= 1.28e-11  |ddm|= 1.84e-11
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [453.89248597  68.36115331  14.82311533   0.95388386   5.31581437
   0.89652749]
grad_E = [ 2.71757867e-07 -1.23775623e-05  2.06238752e-05  1.18010079e-04
  8.05056423e-06  1.20016022e-05]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:29:14 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  453.976552881        1
[INPUT] 0    0    [1    /1   ]  68.3730493927        1
[INPUT] 0    0    [1    /1   ]  14.8244715888        1
[INPUT] 0    0    [1    /1   ]  0.953860960205       1
[INPUT] 1    0    [1    /1   ]  5.31575073997        1
[INPUT] 1    0    [1    /1   ]  0.896521940397       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [453.9765528806375, 1.0]], [0, [68.37304939273527, 1.0]], [0, [14.82447158877164, 1.0]], [0, [0.9538609602045603, 1.0]], [1, [5.3157507399708, 1.0]], [1, [0.8965219403973007, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [453.97655288]
bas 1, expnt(s) = [68.37304939]
bas 2, expnt(s) = [14.82447159]
bas 3, expnt(s) = [0.95386096]
bas 4, expnt(s) = [5.31575074]
bas 5, expnt(s) = [0.89652194]
CPU time:       212.54
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.         453.97655288
 248.47922932  68.37304939  60.07291916  14.82447159  19.08751717
   0.95386096   2.43853408   5.31575074  23.54724773   0.89652194
   2.54498687]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.825826651409502
cond(S) = 9.786300847482336
E1 = -180.77528098175677  E_coul = 54.334204402419495
init E= -126.441076579337
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.65118895462715  LUMO = 5.33126872833565
  mo_energy =
[-32.45389116  -1.83669767  -0.65118895  -0.65118895  -0.65118895
   5.33126873   5.33126873   5.33126873  53.67317259 625.77228942]
E1 = -181.1743215794535  E_coul = 54.35852066144579
cycle= 1 E= -126.815800918008  delta_E= -0.375  |g|= 0.0853  |ddm|= 0.284
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0875594
diis-c [-0.00766665  1.        ]
  HOMO = -0.607249752769092  LUMO = 5.36086547159189
  mo_energy =
[-3.26074535e+01 -1.79952693e+00 -6.07249753e-01 -6.07249753e-01
 -6.07249753e-01  5.36086547e+00  5.36086547e+00  5.36086547e+00
  5.35572097e+01  6.25561793e+02]
E1 = -181.25122472681394  E_coul = 54.435272881361996
cycle= 2 E= -126.815951845452  delta_E= -0.000151  |g|= 0.0084  |ddm|= 0.0121
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0102393
diis-c [-5.31917618e-05  7.60982353e-02  9.23901765e-01]
  HOMO = -0.602903730831669  LUMO = 5.36785938847459
  mo_energy =
[-3.25901164e+01 -1.79443532e+00 -6.02903731e-01 -6.02903731e-01
 -6.02903731e-01  5.36785939e+00  5.36785939e+00  5.36785939e+00
  5.35736013e+01  6.25582599e+02]
E1 = -181.23941018985045  E_coul = 54.423454300562
cycle= 3 E= -126.815955889288  delta_E= -4.04e-06  |g|= 0.00068  |ddm|= 0.00187
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000814736
diis-c [-8.61959888e-09 -1.89985366e-03  6.27840819e-02  9.39115772e-01]
  HOMO = -0.603226856878859  LUMO = 5.36734691231534
  mo_energy =
[-3.25913255e+01 -1.79481203e+00 -6.03226857e-01 -6.03226857e-01
 -6.03226857e-01  5.36734691e+00  5.36734691e+00  5.36734691e+00
  5.35724703e+01  6.25581402e+02]
E1 = -181.24027464819054  E_coul = 54.424318733635275
cycle= 4 E= -126.815955914555  delta_E= -2.53e-08  |g|= 1.22e-06  |ddm|= 0.000137
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.65164e-06
diis-c [-3.70202434e-14  2.66282235e-05 -1.09296472e-03 -1.61808631e-02
  1.01724720e+00]
  HOMO = -0.603226963902827  LUMO = 5.36734677646157
  mo_energy =
[-3.25913255e+01 -1.79481211e+00 -6.03226964e-01 -6.03226964e-01
 -6.03226964e-01  5.36734678e+00  5.36734678e+00  5.36734678e+00
  5.35724705e+01  6.25581405e+02]
E1 = -181.24027493946303  E_coul = 54.424319024907774
cycle= 5 E= -126.815955914555  delta_E=    0  |g|= 6.59e-09  |ddm|= 5.97e-08
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -181.24027493946303  E_coul = 54.424319024907774
  HOMO = -0.603226961802516  LUMO = 5.36734677954162
  mo_energy =
[-3.25913255e+01 -1.79481211e+00 -6.03226962e-01 -6.03226962e-01
 -6.03226962e-01  5.36734678e+00  5.36734678e+00  5.36734678e+00
  5.35724705e+01  6.25581405e+02]
E1 = -181.24027493540444  E_coul = 54.42431902084922
Extra cycle  E= -126.815955914555  delta_E= 4.26e-14  |g|= 4.36e-10  |ddm|= 6.63e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
exp = [453.97655288  68.37304939  14.82447159   0.95386096   5.31575074
   0.89652194]
E = -126.81595591455522
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:29:15 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  453.976552881        1
[INPUT] 0    0    [1    /1   ]  68.3730493927        1
[INPUT] 0    0    [1    /1   ]  14.8244715888        1
[INPUT] 0    0    [1    /1   ]  0.953860960205       1
[INPUT] 1    0    [1    /1   ]  5.31575073997        1
[INPUT] 1    0    [1    /1   ]  0.896521940397       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [453.9765528806375, 1.0]], [0, [68.37304939273527, 1.0]], [0, [14.82447158877164, 1.0]], [0, [0.9538609602045603, 1.0]], [1, [5.3157507399708, 1.0]], [1, [0.8965219403973007, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [453.97655288]
bas 1, expnt(s) = [68.37304939]
bas 2, expnt(s) = [14.82447159]
bas 3, expnt(s) = [0.95386096]
bas 4, expnt(s) = [5.31575074]
bas 5, expnt(s) = [0.89652194]
CPU time:       213.37
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.         453.97655288
 248.47922932  68.37304939  60.07291916  14.82447159  19.08751717
   0.95386096   2.43853408   5.31575074  23.54724773   0.89652194
   2.54498687]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.825826651409502
cond(S) = 9.786300847482336
E1 = -180.77528098175677  E_coul = 54.334204402419495
init E= -126.441076579337
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.65118895462715  LUMO = 5.33126872833565
  mo_energy =
[-32.45389116  -1.83669767  -0.65118895  -0.65118895  -0.65118895
   5.33126873   5.33126873   5.33126873  53.67317259 625.77228942]
E1 = -181.1743215794535  E_coul = 54.35852066144579
cycle= 1 E= -126.815800918008  delta_E= -0.375  |g|= 0.0853  |ddm|= 0.284
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0875594
diis-c [-0.00766665  1.        ]
  HOMO = -0.607249752769092  LUMO = 5.36086547159189
  mo_energy =
[-3.26074535e+01 -1.79952693e+00 -6.07249753e-01 -6.07249753e-01
 -6.07249753e-01  5.36086547e+00  5.36086547e+00  5.36086547e+00
  5.35572097e+01  6.25561793e+02]
E1 = -181.25122472681394  E_coul = 54.435272881361996
cycle= 2 E= -126.815951845452  delta_E= -0.000151  |g|= 0.0084  |ddm|= 0.0121
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0102393
diis-c [-5.31917618e-05  7.60982353e-02  9.23901765e-01]
  HOMO = -0.602903730831669  LUMO = 5.36785938847459
  mo_energy =
[-3.25901164e+01 -1.79443532e+00 -6.02903731e-01 -6.02903731e-01
 -6.02903731e-01  5.36785939e+00  5.36785939e+00  5.36785939e+00
  5.35736013e+01  6.25582599e+02]
E1 = -181.23941018985045  E_coul = 54.423454300562
cycle= 3 E= -126.815955889288  delta_E= -4.04e-06  |g|= 0.00068  |ddm|= 0.00187
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000814736
diis-c [-8.61959888e-09 -1.89985366e-03  6.27840819e-02  9.39115772e-01]
  HOMO = -0.603226856878859  LUMO = 5.36734691231534
  mo_energy =
[-3.25913255e+01 -1.79481203e+00 -6.03226857e-01 -6.03226857e-01
 -6.03226857e-01  5.36734691e+00  5.36734691e+00  5.36734691e+00
  5.35724703e+01  6.25581402e+02]
E1 = -181.24027464819054  E_coul = 54.424318733635275
cycle= 4 E= -126.815955914555  delta_E= -2.53e-08  |g|= 1.22e-06  |ddm|= 0.000137
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.65164e-06
diis-c [-3.70202434e-14  2.66282235e-05 -1.09296472e-03 -1.61808631e-02
  1.01724720e+00]
  HOMO = -0.603226963902827  LUMO = 5.36734677646157
  mo_energy =
[-3.25913255e+01 -1.79481211e+00 -6.03226964e-01 -6.03226964e-01
 -6.03226964e-01  5.36734678e+00  5.36734678e+00  5.36734678e+00
  5.35724705e+01  6.25581405e+02]
E1 = -181.24027493946303  E_coul = 54.424319024907774
cycle= 5 E= -126.815955914555  delta_E=    0  |g|= 6.59e-09  |ddm|= 5.97e-08
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -181.24027493946303  E_coul = 54.424319024907774
  HOMO = -0.603226961802516  LUMO = 5.36734677954162
  mo_energy =
[-3.25913255e+01 -1.79481211e+00 -6.03226962e-01 -6.03226962e-01
 -6.03226962e-01  5.36734678e+00  5.36734678e+00  5.36734678e+00
  5.35724705e+01  6.25581405e+02]
E1 = -181.24027493540444  E_coul = 54.42431902084922
Extra cycle  E= -126.815955914555  delta_E= 4.26e-14  |g|= 4.36e-10  |ddm|= 6.63e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 9.786300847482336
E1 = -181.24027493540444  E_coul = 54.42431902084922
init E= -126.815955914555
    CPU time for initialize scf      0.04 sec, wall time      0.04 sec
  HOMO = -0.603226962048716  LUMO = 5.36734677914373
  mo_energy =
[-3.25913255e+01 -1.79481211e+00 -6.03226962e-01 -6.03226962e-01
 -6.03226962e-01  5.36734678e+00  5.36734678e+00  5.36734678e+00
  5.35724705e+01  6.25581405e+02]
E1 = -181.24027493610205  E_coul = 54.42431902154687
cycle= 1 E= -126.815955914555  delta_E= 2.84e-14  |g|= 7.77e-11  |ddm|= 1.11e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -181.24027493610205  E_coul = 54.42431902154687
  HOMO = -0.603226962005315  LUMO = 5.36734677921309
  mo_energy =
[-3.25913255e+01 -1.79481211e+00 -6.03226962e-01 -6.03226962e-01
 -6.03226962e-01  5.36734678e+00  5.36734678e+00  5.36734678e+00
  5.35724705e+01  6.25581405e+02]
E1 = -181.24027493598567  E_coul = 54.424319021430414
Extra cycle  E= -126.815955914555  delta_E= -5.68e-14  |g|= 1.28e-11  |ddm|= 1.84e-11
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [453.97655288  68.37304939  14.82447159   0.95386096   5.31575074
   0.89652194]
grad_E = [ 6.58511680e-08 -2.34168060e-06  9.42504177e-06  2.45839841e-06
  1.99865362e-07  1.93172475e-05]
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:29:18 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  453.983950531        1
[INPUT] 0    0    [1    /1   ]  68.3742158008        1
[INPUT] 0    0    [1    /1   ]  14.8245283227        1
[INPUT] 0    0    [1    /1   ]  0.953860696336       1
[INPUT] 1    0    [1    /1   ]  5.31572988795        1
[INPUT] 1    0    [1    /1   ]  0.896518209808       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [453.9839505308337, 1.0]], [0, [68.37421580081491, 1.0]], [0, [14.824528322712155, 1.0]], [0, [0.9538606963361832, 1.0]], [1, [5.315729887950344, 1.0]], [1, [0.8965182098083508, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [453.98395053]
bas 1, expnt(s) = [68.3742158]
bas 2, expnt(s) = [14.82452832]
bas 3, expnt(s) = [0.9538607]
bas 4, expnt(s) = [5.31572989]
bas 5, expnt(s) = [0.89651821]
CPU time:       216.43
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.         453.98395053
 248.48226608  68.3742158   60.07368777  14.82452832  19.08757196
   0.9538607    2.43853358   5.31572989  23.54713227   0.89651821
   2.54497363]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.82582812000391
cond(S) = 9.786158637554065
E1 = -180.7752754442121  E_coul = 54.334197359861115
init E= -126.441078084351
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.651189402150938  LUMO = 5.33124125628296
  mo_energy =
[-32.45389328  -1.83669778  -0.6511894   -0.6511894   -0.6511894
   5.33124126   5.33124126   5.33124126  53.67401836 625.78402556]
E1 = -181.1742759034907  E_coul = 54.35847500428298
cycle= 1 E= -126.815800899208  delta_E= -0.375  |g|= 0.0853  |ddm|= 0.284
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0875577
diis-c [-0.00766634  1.        ]
  HOMO = -0.60725283250298  LUMO = 5.36083438364966
  mo_energy =
[-3.26074640e+01 -1.79953002e+00 -6.07252833e-01 -6.07252833e-01
 -6.07252833e-01  5.36083438e+00  5.36083438e+00  5.36083438e+00
  5.35580467e+01  6.25573517e+02]
E1 = -181.25118489642983  E_coul = 54.435233050697974
cycle= 2 E= -126.815951845732  delta_E= -0.000151  |g|= 0.0084  |ddm|= 0.0121
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0102401
diis-c [-5.31888726e-05  7.61124493e-02  9.23887551e-01]
  HOMO = -0.602906533280138  LUMO = 5.3678287176573
  mo_energy =
[-3.25901259e+01 -1.79443808e+00 -6.02906533e-01 -6.02906533e-01
 -6.02906533e-01  5.36782872e+00  5.36782872e+00  5.36782872e+00
  5.35744393e+01  6.25594323e+02]
E1 = -181.23936958355108  E_coul = 54.42341369333812
cycle= 3 E= -126.815955890213  delta_E= -4.04e-06  |g|= 0.00068  |ddm|= 0.00187
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000814637
diis-c [-8.61854095e-09 -1.89990528e-03  6.27699950e-02  9.39129910e-01]
  HOMO = -0.603229619235417  LUMO = 5.36731630749671
  mo_energy =
[-3.25913349e+01 -1.79481474e+00 -6.03229619e-01 -6.03229619e-01
 -6.03229619e-01  5.36731631e+00  5.36731631e+00  5.36731631e+00
  5.35733084e+01  6.25593127e+02]
E1 = -181.240233937627  E_coul = 54.42427802215335
cycle= 4 E= -126.815955915474  delta_E= -2.53e-08  |g|= 1.22e-06  |ddm|= 0.000137
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.65148e-06
diis-c [-3.70179825e-14  2.66277132e-05 -1.09269391e-03 -1.61805145e-02
  1.01724658e+00]
  HOMO = -0.603229726217971  LUMO = 5.3673161716974
  mo_energy =
[-3.25913348e+01 -1.79481482e+00 -6.03229726e-01 -6.03229726e-01
 -6.03229726e-01  5.36731617e+00  5.36731617e+00  5.36731617e+00
  5.35733087e+01  6.25593129e+02]
E1 = -181.24023422881163  E_coul = 54.42427831333797
cycle= 5 E= -126.815955915474  delta_E=    0  |g|= 6.59e-09  |ddm|= 5.97e-08
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -181.24023422881163  E_coul = 54.42427831333797
  HOMO = -0.603229724118036  LUMO = 5.36731617477693
  mo_energy =
[-3.25913348e+01 -1.79481482e+00 -6.03229724e-01 -6.03229724e-01
 -6.03229724e-01  5.36731617e+00  5.36731617e+00  5.36731617e+00
  5.35733087e+01  6.25593129e+02]
E1 = -181.24023422475418  E_coul = 54.424278309280425
Extra cycle  E= -126.815955915474  delta_E= -8.53e-14  |g|= 4.36e-10  |ddm|= 6.63e-10
    CPU time for scf_cycle      0.08 sec, wall time      0.08 sec
exp = [453.98395053  68.3742158   14.82452832   0.9538607    5.31572989
   0.89651821]
E = -126.81595591547375
 message: Optimization terminated successfully
 success: True
  status: 0
     fun: -126.81595591547375
       x: [ 4.540e+02  6.837e+01  1.482e+01  9.539e-01  5.316e+00
            8.965e-01]
     nit: 59
     jac: [ 6.585e-08 -2.342e-06  9.425e-06  2.458e-06  1.999e-07
            1.932e-05]
    nfev: 68
    njev: 59
#INFO: **** input file is /Users/deyanmihaylov/Documents/Work/pyscf_basis_opt/Ne_energies.py ****
import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ne  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ne 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ne': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
exps[:, 0] = np.array([10*4.6173192432585620e+02,6.9554573188421969e+01,1.5133196157965202e+01,1.0335473286585297e+00,1.2764742147304990e+00,1.0000000000362833e-09])
# exps[1:, 0] = exp_Ne_5s[:]
# exps[0, 0] = np.max(exp_Ne_5s) * 10.0

# minimize_energy(N, exps)

basis = "4s2p"

minimize_energy(basis, exps)

#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Deyans-MBP-Home', release='22.1.0', version='Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.16 (default, Mar  1 2023, 21:19:10) 
[Clang 14.0.6 ]
numpy 1.24.2  scipy 1.10.1
Date: Wed Mar  8 02:29:19 2023
PySCF version 2.1.1
PySCF path  /Users/deyanmihaylov/opt/anaconda3/envs/pyscfad_env/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/v7/w4c0kx6d5bq1lvxw1rnqy7br0000gp/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/deyanmihaylov/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ne     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ne
[INPUT] 0    0    [1    /1   ]  453.983950531        1
[INPUT] 0    0    [1    /1   ]  68.3742158008        1
[INPUT] 0    0    [1    /1   ]  14.8245283227        1
[INPUT] 0    0    [1    /1   ]  0.953860696336       1
[INPUT] 1    0    [1    /1   ]  5.31572988795        1
[INPUT] 1    0    [1    /1   ]  0.896518209808       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ne': [[0, [453.9839505308337, 1.0]], [0, [68.37421580081491, 1.0]], [0, [14.824528322712155, 1.0]], [0, [0.9538606963361832, 1.0]], [1, [5.315729887950344, 1.0]], [1, [0.8965182098083508, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [453.98395053]
bas 1, expnt(s) = [68.3742158]
bas 2, expnt(s) = [14.82452832]
bas 3, expnt(s) = [0.9538607]
bas 4, expnt(s) = [5.31572989]
bas 5, expnt(s) = [0.89651821]
CPU time:       217.21
arg.atm = [[10 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.         453.98395053
 248.48226608  68.3742158   60.07368777  14.82452832  19.08757196
   0.9538607    2.43853358   5.31572989  23.54713227   0.89651821
   2.54497363]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.82582812000391
cond(S) = 9.786158637554065
E1 = -180.7752754442121  E_coul = 54.334197359861115
init E= -126.441078084351
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.651189402150938  LUMO = 5.33124125628296
  mo_energy =
[-32.45389328  -1.83669778  -0.6511894   -0.6511894   -0.6511894
   5.33124126   5.33124126   5.33124126  53.67401836 625.78402556]
E1 = -181.1742759034907  E_coul = 54.35847500428298
cycle= 1 E= -126.815800899208  delta_E= -0.375  |g|= 0.0853  |ddm|= 0.284
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0875577
diis-c [-0.00766634  1.        ]
  HOMO = -0.60725283250298  LUMO = 5.36083438364966
  mo_energy =
[-3.26074640e+01 -1.79953002e+00 -6.07252833e-01 -6.07252833e-01
 -6.07252833e-01  5.36083438e+00  5.36083438e+00  5.36083438e+00
  5.35580467e+01  6.25573517e+02]
E1 = -181.25118489642983  E_coul = 54.435233050697974
cycle= 2 E= -126.815951845732  delta_E= -0.000151  |g|= 0.0084  |ddm|= 0.0121
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0102401
diis-c [-5.31888726e-05  7.61124493e-02  9.23887551e-01]
  HOMO = -0.602906533280138  LUMO = 5.3678287176573
  mo_energy =
[-3.25901259e+01 -1.79443808e+00 -6.02906533e-01 -6.02906533e-01
 -6.02906533e-01  5.36782872e+00  5.36782872e+00  5.36782872e+00
  5.35744393e+01  6.25594323e+02]
E1 = -181.23936958355108  E_coul = 54.42341369333812
cycle= 3 E= -126.815955890213  delta_E= -4.04e-06  |g|= 0.00068  |ddm|= 0.00187
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000814637
diis-c [-8.61854095e-09 -1.89990528e-03  6.27699950e-02  9.39129910e-01]
  HOMO = -0.603229619235417  LUMO = 5.36731630749671
  mo_energy =
[-3.25913349e+01 -1.79481474e+00 -6.03229619e-01 -6.03229619e-01
 -6.03229619e-01  5.36731631e+00  5.36731631e+00  5.36731631e+00
  5.35733084e+01  6.25593127e+02]
E1 = -181.240233937627  E_coul = 54.42427802215335
cycle= 4 E= -126.815955915474  delta_E= -2.53e-08  |g|= 1.22e-06  |ddm|= 0.000137
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.65148e-06
diis-c [-3.70179825e-14  2.66277132e-05 -1.09269391e-03 -1.61805145e-02
  1.01724658e+00]
  HOMO = -0.603229726217971  LUMO = 5.3673161716974
  mo_energy =
[-3.25913348e+01 -1.79481482e+00 -6.03229726e-01 -6.03229726e-01
 -6.03229726e-01  5.36731617e+00  5.36731617e+00  5.36731617e+00
  5.35733087e+01  6.25593129e+02]
E1 = -181.24023422881163  E_coul = 54.42427831333797
cycle= 5 E= -126.815955915474  delta_E=    0  |g|= 6.59e-09  |ddm|= 5.97e-08
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -181.24023422881163  E_coul = 54.42427831333797
  HOMO = -0.603229724118036  LUMO = 5.36731617477693
  mo_energy =
[-3.25913348e+01 -1.79481482e+00 -6.03229724e-01 -6.03229724e-01
 -6.03229724e-01  5.36731617e+00  5.36731617e+00  5.36731617e+00
  5.35733087e+01  6.25593129e+02]
E1 = -181.24023422475418  E_coul = 54.424278309280425
Extra cycle  E= -126.815955915474  delta_E= -8.53e-14  |g|= 4.36e-10  |ddm|= 6.63e-10
    CPU time for scf_cycle      0.08 sec, wall time      0.09 sec
exp = [453.98395053  68.3742158   14.82452832   0.9538607    5.31572989
   0.89651821]
E = -126.81595591547375
E = -126.81595591547375
exp = [4.5398395053083368e+02,6.8374215800814909e+01,1.4824528322712155e+01,9.5386069633618320e-01,5.3157298879503436e+00,8.9651820980835084e-01]
